-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1chan is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_image_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_image_V_ce0 : OUT STD_LOGIC;
    in_image_V_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    in_image_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_image_V_ce1 : OUT STD_LOGIC;
    in_image_V_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
    out_image_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_image_V_ce0 : OUT STD_LOGIC;
    out_image_V_we0 : OUT STD_LOGIC;
    out_image_V_d0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of max_pool_1chan is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_143_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal reg_163 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_167 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_43_fu_211_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_43_reg_497 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_247_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_reg_503 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_23_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_273_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_48_reg_517 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_50_fu_298_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_50_reg_527 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_5_fu_303_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_reg_532 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_fu_309_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_V_8_fu_337_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal max_V_8_reg_557 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_30_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_562 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_V_9_fu_358_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal max_V_9_reg_567 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_32_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_572 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal j_reg_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_51_cast_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_cast_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_cast_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_cast_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_462_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_1_fu_454_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_187_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_fu_199_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_195_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_207_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_217_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_44_fu_223_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_fu_235_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_231_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_243_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_cast_fu_259_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_47_fu_263_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_278_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_cast_fu_284_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_fu_288_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_319_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_29_fu_344_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_31_fu_364_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_11_fu_395_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_407_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_399_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_411_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_391_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_419_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_425_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_23_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_120 <= i_5_fu_309_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_120 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_132 <= j_5_reg_532;
            elsif (((tmp_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_132 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    x_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                x_fu_62 <= p_x_1_fu_454_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_fu_62 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                y_fu_58 <= p_s_fu_462_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_58 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_23_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                j_5_reg_532 <= j_5_fu_303_p2;
                tmp_48_reg_517 <= tmp_48_fu_273_p2;
                    tmp_50_reg_527(10 downto 1) <= tmp_50_fu_298_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                max_V_8_reg_557 <= max_V_8_fu_337_p3;
                tmp_30_reg_562 <= tmp_30_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                max_V_9_reg_567 <= max_V_9_fu_358_p3;
                tmp_32_reg_572 <= tmp_32_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_163 <= in_image_V_q0(47 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_167 <= in_image_V_q1(47 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_28_reg_547 <= tmp_28_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_43_reg_497(10 downto 2) <= tmp_43_fu_211_p2(10 downto 2);
                    tmp_46_reg_503(10 downto 3) <= tmp_46_fu_247_p2(10 downto 3);
            end if;
        end if;
    end process;
    tmp_43_reg_497(1 downto 0) <= "00";
    tmp_46_reg_503(2 downto 0) <= "100";
    tmp_50_reg_527(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_181_p2, ap_CS_fsm_state3, tmp_23_fu_253_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_23_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_181_p2)
    begin
        if (((tmp_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_181_p2)
    begin
        if (((tmp_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_143_p4 <= in_image_V_q0(47 downto 23);
    i_5_fu_309_p2 <= std_logic_vector(unsigned(i_reg_120) + unsigned(ap_const_lv5_2));

    in_image_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_51_cast_fu_268_p1, tmp_52_cast_fu_315_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_image_V_address0 <= tmp_52_cast_fu_315_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_image_V_address0 <= tmp_51_cast_fu_268_p1(10 - 1 downto 0);
        else 
            in_image_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_image_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state3, tmp_53_cast_fu_293_p1, tmp_54_cast_fu_333_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_image_V_address1 <= tmp_54_cast_fu_333_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_image_V_address1 <= tmp_53_cast_fu_293_p1(10 - 1 downto 0);
        else 
            in_image_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_image_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_image_V_ce0 <= ap_const_logic_1;
        else 
            in_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_image_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in_image_V_ce1 <= ap_const_logic_1;
        else 
            in_image_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_5_fu_303_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(j_reg_132));
    max_V_8_fu_337_p3 <= 
        reg_167 when (tmp_28_reg_547(0) = '1') else 
        reg_163;
    max_V_9_fu_358_p3 <= 
        reg_163 when (tmp_30_reg_562(0) = '1') else 
        max_V_8_reg_557;
    out_image_V_address0 <= tmp_59_cast_fu_431_p1(8 - 1 downto 0);

    out_image_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_image_V_ce0 <= ap_const_logic_1;
        else 
            out_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_image_V_d0 <= 
        reg_167 when (tmp_32_reg_572(0) = '1') else 
        max_V_9_reg_567;

    out_image_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_image_V_we0 <= ap_const_logic_1;
        else 
            out_image_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_s_fu_462_p3 <= 
        ap_const_lv32_0 when (tmp_34_fu_442_p2(0) = '1') else 
        y_1_fu_436_p2;
    p_shl1_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_235_p3),11));
    p_shl2_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_187_p3),11));
    p_shl3_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_199_p3),11));
    p_shl4_cast_fu_399_p3 <= (tmp_11_fu_395_p1 & ap_const_lv4_0);
    p_shl5_cast_fu_411_p3 <= (tmp_12_fu_407_p1 & ap_const_lv1_0);
    p_shl_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_223_p3),11));
    p_x_1_fu_454_p3 <= 
        x_1_fu_448_p2 when (tmp_34_fu_442_p2(0) = '1') else 
        x_fu_62;
    tmp_10_fu_391_p1 <= y_fu_58(9 - 1 downto 0);
    tmp_11_fu_395_p1 <= x_fu_62(5 - 1 downto 0);
    tmp_12_fu_407_p1 <= x_fu_62(8 - 1 downto 0);
    tmp_21_fu_217_p2 <= (i_reg_120 or ap_const_lv5_1);
    tmp_23_fu_253_p2 <= "1" when (unsigned(j_reg_132) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_24_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_132),11));
    tmp_25_fu_278_p2 <= (j_reg_132 or ap_const_lv5_1);
    tmp_26_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_278_p2),11));
    tmp_27_fu_319_p3 <= (grp_fu_143_p4 & ap_const_lv23_0);
    tmp_28_fu_327_p2 <= "1" when (signed(in_image_V_q1) > signed(tmp_27_fu_319_p3)) else "0";
    tmp_29_fu_344_p3 <= (max_V_8_fu_337_p3 & ap_const_lv23_0);
    tmp_30_fu_352_p2 <= "1" when (signed(in_image_V_q0) > signed(tmp_29_fu_344_p3)) else "0";
    tmp_31_fu_364_p3 <= (max_V_9_fu_358_p3 & ap_const_lv23_0);
    tmp_32_fu_372_p2 <= "1" when (signed(in_image_V_q1) > signed(tmp_31_fu_364_p3)) else "0";
    tmp_34_fu_442_p2 <= "1" when (y_1_fu_436_p2 = ap_const_lv32_E) else "0";
    tmp_41_fu_187_p3 <= (i_reg_120 & ap_const_lv5_0);
    tmp_42_fu_199_p3 <= (i_reg_120 & ap_const_lv2_0);
    tmp_43_fu_211_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_195_p1) - unsigned(p_shl3_cast_fu_207_p1));
    tmp_44_fu_223_p3 <= (tmp_21_fu_217_p2 & ap_const_lv5_0);
    tmp_45_fu_235_p3 <= (tmp_21_fu_217_p2 & ap_const_lv2_0);
    tmp_46_fu_247_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_231_p1) - unsigned(p_shl1_cast_fu_243_p1));
    tmp_47_fu_263_p2 <= std_logic_vector(unsigned(tmp_24_cast_fu_259_p1) + unsigned(tmp_43_reg_497));
    tmp_48_fu_273_p2 <= std_logic_vector(unsigned(tmp_24_cast_fu_259_p1) + unsigned(tmp_46_reg_503));
    tmp_49_fu_288_p2 <= std_logic_vector(unsigned(tmp_26_cast_fu_284_p1) + unsigned(tmp_43_reg_497));
    tmp_50_fu_298_p2 <= std_logic_vector(unsigned(tmp_26_cast_fu_284_p1) + unsigned(tmp_46_reg_503));
        tmp_51_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_47_fu_263_p2),64));

    tmp_51_fu_419_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_399_p3) - unsigned(p_shl5_cast_fu_411_p3));
        tmp_52_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_reg_517),64));

    tmp_52_fu_425_p2 <= std_logic_vector(unsigned(tmp_10_fu_391_p1) + unsigned(tmp_51_fu_419_p2));
        tmp_53_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_fu_288_p2),64));

        tmp_54_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_reg_527),64));

        tmp_59_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_52_fu_425_p2),64));

    tmp_fu_181_p2 <= "1" when (unsigned(i_reg_120) < unsigned(ap_const_lv5_1C)) else "0";
    x_1_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(x_fu_62));
    y_1_fu_436_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(y_fu_58));
end behav;
