// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _batch_norm_HH_
#define _batch_norm_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "CNN_mux_732_25_2_1.h"
#include "CNN_mac_muladd_25dEe.h"

namespace ap_rtl {

struct batch_norm : public sc_module {
    // Port declarations 38
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > in_image_0_V_address0;
    sc_out< sc_logic > in_image_0_V_ce0;
    sc_in< sc_lv<25> > in_image_0_V_q0;
    sc_out< sc_lv<7> > in_image_1_V_address0;
    sc_out< sc_logic > in_image_1_V_ce0;
    sc_in< sc_lv<25> > in_image_1_V_q0;
    sc_out< sc_lv<7> > in_image_2_V_address0;
    sc_out< sc_logic > in_image_2_V_ce0;
    sc_in< sc_lv<25> > in_image_2_V_q0;
    sc_out< sc_lv<7> > in_image_3_V_address0;
    sc_out< sc_logic > in_image_3_V_ce0;
    sc_in< sc_lv<25> > in_image_3_V_q0;
    sc_out< sc_lv<7> > in_image_4_V_address0;
    sc_out< sc_logic > in_image_4_V_ce0;
    sc_in< sc_lv<25> > in_image_4_V_q0;
    sc_out< sc_lv<7> > in_image_5_V_address0;
    sc_out< sc_logic > in_image_5_V_ce0;
    sc_in< sc_lv<25> > in_image_5_V_q0;
    sc_out< sc_lv<7> > in_image_6_V_address0;
    sc_out< sc_logic > in_image_6_V_ce0;
    sc_in< sc_lv<25> > in_image_6_V_q0;
    sc_in< sc_lv<18> > A_V_dout;
    sc_in< sc_logic > A_V_empty_n;
    sc_out< sc_logic > A_V_read;
    sc_in< sc_lv<18> > B_V_dout;
    sc_in< sc_logic > B_V_empty_n;
    sc_out< sc_logic > B_V_read;
    sc_out< sc_lv<10> > out_image_V_address0;
    sc_out< sc_logic > out_image_V_ce0;
    sc_out< sc_logic > out_image_V_we0;
    sc_out< sc_lv<48> > out_image_V_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    batch_norm(sc_module_name name);
    SC_HAS_PROCESS(batch_norm);

    ~batch_norm();

    sc_trace_file* mVcdFile;

    CNN_mux_732_25_2_1<1,2,25,25,25,25,25,25,25,32,25>* CNN_mux_732_25_2_1_U117;
    CNN_mac_muladd_25dEe<1,2,25,18,34,37>* CNN_mac_muladd_25dEe_U118;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > A_V_blk_n;
    sc_signal< sc_logic > B_V_blk_n;
    sc_signal< sc_lv<37> > OP2_V_i_fu_218_p1;
    sc_signal< sc_lv<37> > OP2_V_i_reg_406;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<37> > tmp_56_cast_i_fu_230_p1;
    sc_signal< sc_lv<37> > tmp_56_cast_i_reg_411;
    sc_signal< sc_lv<5> > j_fu_240_p2;
    sc_signal< sc_lv<5> > j_reg_419;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<11> > tmp_78_fu_270_p2;
    sc_signal< sc_lv<11> > tmp_78_reg_424;
    sc_signal< sc_lv<1> > tmp_i_fu_234_p2;
    sc_signal< sc_lv<32> > arrayNo_cast_i_fu_286_p1;
    sc_signal< sc_lv<32> > arrayNo_cast_i_reg_429;
    sc_signal< sc_lv<8> > tmp_81_fu_318_p2;
    sc_signal< sc_lv<8> > tmp_81_reg_434;
    sc_signal< sc_lv<5> > k_fu_330_p2;
    sc_signal< sc_lv<5> > k_reg_442;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_53_i_fu_324_p2;
    sc_signal< sc_lv<11> > tmp_83_fu_360_p2;
    sc_signal< sc_lv<11> > tmp_83_reg_482;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<37> > grp_fu_400_p3;
    sc_signal< sc_lv<37> > p_Val2_i_74_reg_527;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > j_i_reg_196;
    sc_signal< sc_lv<5> > k_i_reg_207;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > tmp_99_cast_fu_349_p1;
    sc_signal< sc_lv<64> > tmp_100_cast_fu_388_p1;
    sc_signal< sc_lv<34> > tmp_56_i_fu_222_p3;
    sc_signal< sc_lv<10> > tmp_s_fu_246_p3;
    sc_signal< sc_lv<7> > tmp_77_fu_258_p3;
    sc_signal< sc_lv<11> > p_shl2_cast_fu_254_p1;
    sc_signal< sc_lv<11> > p_shl3_cast_fu_266_p1;
    sc_signal< sc_lv<3> > arrayNo_i_fu_276_p4;
    sc_signal< sc_lv<2> > tmp_20_fu_290_p1;
    sc_signal< sc_lv<7> > tmp_79_fu_294_p3;
    sc_signal< sc_lv<4> > tmp_80_fu_306_p3;
    sc_signal< sc_lv<8> > p_shl_cast_fu_302_p1;
    sc_signal< sc_lv<8> > p_shl1_cast_fu_314_p1;
    sc_signal< sc_lv<8> > tmp_54_i_cast_fu_340_p1;
    sc_signal< sc_lv<8> > tmp_82_fu_344_p2;
    sc_signal< sc_lv<11> > tmp_54_i_cast1_fu_336_p1;
    sc_signal< sc_lv<25> > grp_fu_365_p9;
    sc_signal< sc_lv<18> > grp_fu_400_p1;
    sc_signal< sc_lv<34> > grp_fu_400_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<5> ap_const_lv5_1C;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_V_blk_n();
    void thread_A_V_read();
    void thread_B_V_blk_n();
    void thread_B_V_read();
    void thread_OP2_V_i_fu_218_p1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_arrayNo_cast_i_fu_286_p1();
    void thread_arrayNo_i_fu_276_p4();
    void thread_grp_fu_400_p1();
    void thread_grp_fu_400_p2();
    void thread_in_image_0_V_address0();
    void thread_in_image_0_V_ce0();
    void thread_in_image_1_V_address0();
    void thread_in_image_1_V_ce0();
    void thread_in_image_2_V_address0();
    void thread_in_image_2_V_ce0();
    void thread_in_image_3_V_address0();
    void thread_in_image_3_V_ce0();
    void thread_in_image_4_V_address0();
    void thread_in_image_4_V_ce0();
    void thread_in_image_5_V_address0();
    void thread_in_image_5_V_ce0();
    void thread_in_image_6_V_address0();
    void thread_in_image_6_V_ce0();
    void thread_j_fu_240_p2();
    void thread_k_fu_330_p2();
    void thread_out_image_V_address0();
    void thread_out_image_V_ce0();
    void thread_out_image_V_d0();
    void thread_out_image_V_we0();
    void thread_p_shl1_cast_fu_314_p1();
    void thread_p_shl2_cast_fu_254_p1();
    void thread_p_shl3_cast_fu_266_p1();
    void thread_p_shl_cast_fu_302_p1();
    void thread_tmp_100_cast_fu_388_p1();
    void thread_tmp_20_fu_290_p1();
    void thread_tmp_53_i_fu_324_p2();
    void thread_tmp_54_i_cast1_fu_336_p1();
    void thread_tmp_54_i_cast_fu_340_p1();
    void thread_tmp_56_cast_i_fu_230_p1();
    void thread_tmp_56_i_fu_222_p3();
    void thread_tmp_77_fu_258_p3();
    void thread_tmp_78_fu_270_p2();
    void thread_tmp_79_fu_294_p3();
    void thread_tmp_80_fu_306_p3();
    void thread_tmp_81_fu_318_p2();
    void thread_tmp_82_fu_344_p2();
    void thread_tmp_83_fu_360_p2();
    void thread_tmp_99_cast_fu_349_p1();
    void thread_tmp_i_fu_234_p2();
    void thread_tmp_s_fu_246_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
