// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "relu.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic relu::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic relu::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> relu::ap_ST_fsm_state1 = "1";
const sc_lv<5> relu::ap_ST_fsm_state2 = "10";
const sc_lv<5> relu::ap_ST_fsm_state3 = "100";
const sc_lv<5> relu::ap_ST_fsm_state4 = "1000";
const sc_lv<5> relu::ap_ST_fsm_state5 = "10000";
const sc_lv<32> relu::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> relu::ap_const_lv32_1 = "1";
const sc_lv<1> relu::ap_const_lv1_0 = "0";
const sc_lv<32> relu::ap_const_lv32_2 = "10";
const sc_lv<32> relu::ap_const_lv32_3 = "11";
const sc_lv<5> relu::ap_const_lv5_0 = "00000";
const sc_lv<1> relu::ap_const_lv1_1 = "1";
const sc_lv<32> relu::ap_const_lv32_4 = "100";
const sc_lv<5> relu::ap_const_lv5_1C = "11100";
const sc_lv<5> relu::ap_const_lv5_1 = "1";
const sc_lv<2> relu::ap_const_lv2_0 = "00";
const sc_lv<48> relu::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const bool relu::ap_const_boolean_1 = true;

relu::relu(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_activations_V_address0);
    sensitive << ( tmp_31_cast_reg_184 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_activations_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_activations_V_d0);
    sensitive << ( in_features_V_load_reg_194 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_15_fu_150_p2 );

    SC_METHOD(thread_activations_V_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_82_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_82_p2 );

    SC_METHOD(thread_in_features_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_31_cast_fu_145_p1 );

    SC_METHOD(thread_in_features_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_3_fu_88_p2);
    sensitive << ( j_reg_60 );

    SC_METHOD(thread_k_1_fu_130_p2);
    sensitive << ( k_reg_71 );

    SC_METHOD(thread_p_shl1_cast_fu_114_p1);
    sensitive << ( tmp_26_fu_106_p3 );

    SC_METHOD(thread_p_shl_cast_fu_102_p1);
    sensitive << ( tmp_s_fu_94_p3 );

    SC_METHOD(thread_tmp_13_fu_124_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( k_reg_71 );

    SC_METHOD(thread_tmp_14_cast_fu_136_p1);
    sensitive << ( k_reg_71 );

    SC_METHOD(thread_tmp_15_fu_150_p2);
    sensitive << ( in_features_V_load_reg_194 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_26_fu_106_p3);
    sensitive << ( j_reg_60 );

    SC_METHOD(thread_tmp_27_fu_118_p2);
    sensitive << ( p_shl_cast_fu_102_p1 );
    sensitive << ( p_shl1_cast_fu_114_p1 );

    SC_METHOD(thread_tmp_28_fu_140_p2);
    sensitive << ( tmp_27_reg_171 );
    sensitive << ( tmp_14_cast_fu_136_p1 );

    SC_METHOD(thread_tmp_31_cast_fu_145_p1);
    sensitive << ( tmp_28_fu_140_p2 );

    SC_METHOD(thread_tmp_fu_82_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_reg_60 );

    SC_METHOD(thread_tmp_s_fu_94_p3);
    sensitive << ( j_reg_60 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_82_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_13_fu_124_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "relu_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_features_V_address0, "(port)in_features_V_address0");
    sc_trace(mVcdFile, in_features_V_ce0, "(port)in_features_V_ce0");
    sc_trace(mVcdFile, in_features_V_q0, "(port)in_features_V_q0");
    sc_trace(mVcdFile, activations_V_address0, "(port)activations_V_address0");
    sc_trace(mVcdFile, activations_V_ce0, "(port)activations_V_ce0");
    sc_trace(mVcdFile, activations_V_we0, "(port)activations_V_we0");
    sc_trace(mVcdFile, activations_V_d0, "(port)activations_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, j_3_fu_88_p2, "j_3_fu_88_p2");
    sc_trace(mVcdFile, j_3_reg_166, "j_3_reg_166");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_27_fu_118_p2, "tmp_27_fu_118_p2");
    sc_trace(mVcdFile, tmp_27_reg_171, "tmp_27_reg_171");
    sc_trace(mVcdFile, tmp_fu_82_p2, "tmp_fu_82_p2");
    sc_trace(mVcdFile, k_1_fu_130_p2, "k_1_fu_130_p2");
    sc_trace(mVcdFile, k_1_reg_179, "k_1_reg_179");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_31_cast_fu_145_p1, "tmp_31_cast_fu_145_p1");
    sc_trace(mVcdFile, tmp_31_cast_reg_184, "tmp_31_cast_reg_184");
    sc_trace(mVcdFile, tmp_13_fu_124_p2, "tmp_13_fu_124_p2");
    sc_trace(mVcdFile, in_features_V_load_reg_194, "in_features_V_load_reg_194");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, j_reg_60, "j_reg_60");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, k_reg_71, "k_reg_71");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_s_fu_94_p3, "tmp_s_fu_94_p3");
    sc_trace(mVcdFile, tmp_26_fu_106_p3, "tmp_26_fu_106_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_102_p1, "p_shl_cast_fu_102_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_114_p1, "p_shl1_cast_fu_114_p1");
    sc_trace(mVcdFile, tmp_14_cast_fu_136_p1, "tmp_14_cast_fu_136_p1");
    sc_trace(mVcdFile, tmp_28_fu_140_p2, "tmp_28_fu_140_p2");
    sc_trace(mVcdFile, tmp_15_fu_150_p2, "tmp_15_fu_150_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

relu::~relu() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void relu::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(tmp_fu_82_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(tmp_13_fu_124_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        j_reg_60 = j_3_reg_166.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        j_reg_60 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_reg_71 = k_1_reg_179.read();
    } else if ((esl_seteq<1,1,1>(tmp_fu_82_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        k_reg_71 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_features_V_load_reg_194 = in_features_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        j_3_reg_166 = j_3_fu_88_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_1_reg_179 = k_1_fu_130_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_fu_82_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_27_reg_171 = tmp_27_fu_118_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_13_fu_124_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_31_cast_reg_184 = tmp_31_cast_fu_145_p1.read();
    }
}

void relu::thread_activations_V_address0() {
    activations_V_address0 =  (sc_lv<10>) (tmp_31_cast_reg_184.read());
}

void relu::thread_activations_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        activations_V_ce0 = ap_const_logic_1;
    } else {
        activations_V_ce0 = ap_const_logic_0;
    }
}

void relu::thread_activations_V_d0() {
    activations_V_d0 = (!tmp_15_fu_150_p2.read()[0].is_01())? sc_lv<48>(): ((tmp_15_fu_150_p2.read()[0].to_bool())? in_features_V_load_reg_194.read(): ap_const_lv48_0);
}

void relu::thread_activations_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        activations_V_we0 = ap_const_logic_1;
    } else {
        activations_V_we0 = ap_const_logic_0;
    }
}

void relu::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void relu::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void relu::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void relu::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void relu::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void relu::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void relu::thread_ap_done() {
    if ((esl_seteq<1,1,1>(tmp_fu_82_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void relu::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void relu::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_fu_82_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void relu::thread_in_features_V_address0() {
    in_features_V_address0 =  (sc_lv<10>) (tmp_31_cast_fu_145_p1.read());
}

void relu::thread_in_features_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_features_V_ce0 = ap_const_logic_1;
    } else {
        in_features_V_ce0 = ap_const_logic_0;
    }
}

void relu::thread_j_3_fu_88_p2() {
    j_3_fu_88_p2 = (!j_reg_60.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_reg_60.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void relu::thread_k_1_fu_130_p2() {
    k_1_fu_130_p2 = (!k_reg_71.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(k_reg_71.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void relu::thread_p_shl1_cast_fu_114_p1() {
    p_shl1_cast_fu_114_p1 = esl_zext<11,7>(tmp_26_fu_106_p3.read());
}

void relu::thread_p_shl_cast_fu_102_p1() {
    p_shl_cast_fu_102_p1 = esl_zext<11,10>(tmp_s_fu_94_p3.read());
}

void relu::thread_tmp_13_fu_124_p2() {
    tmp_13_fu_124_p2 = (!k_reg_71.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_71.read() == ap_const_lv5_1C);
}

void relu::thread_tmp_14_cast_fu_136_p1() {
    tmp_14_cast_fu_136_p1 = esl_zext<11,5>(k_reg_71.read());
}

void relu::thread_tmp_15_fu_150_p2() {
    tmp_15_fu_150_p2 = (!in_features_V_load_reg_194.read().is_01() || !ap_const_lv48_0.is_01())? sc_lv<1>(): (sc_bigint<48>(in_features_V_load_reg_194.read()) > sc_bigint<48>(ap_const_lv48_0));
}

void relu::thread_tmp_26_fu_106_p3() {
    tmp_26_fu_106_p3 = esl_concat<5,2>(j_reg_60.read(), ap_const_lv2_0);
}

void relu::thread_tmp_27_fu_118_p2() {
    tmp_27_fu_118_p2 = (!p_shl_cast_fu_102_p1.read().is_01() || !p_shl1_cast_fu_114_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl_cast_fu_102_p1.read()) - sc_biguint<11>(p_shl1_cast_fu_114_p1.read()));
}

void relu::thread_tmp_28_fu_140_p2() {
    tmp_28_fu_140_p2 = (!tmp_27_reg_171.read().is_01() || !tmp_14_cast_fu_136_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_27_reg_171.read()) + sc_biguint<11>(tmp_14_cast_fu_136_p1.read()));
}

void relu::thread_tmp_31_cast_fu_145_p1() {
    tmp_31_cast_fu_145_p1 = esl_sext<64,11>(tmp_28_fu_140_p2.read());
}

void relu::thread_tmp_fu_82_p2() {
    tmp_fu_82_p2 = (!j_reg_60.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_60.read() == ap_const_lv5_1C);
}

void relu::thread_tmp_s_fu_94_p3() {
    tmp_s_fu_94_p3 = esl_concat<5,5>(j_reg_60.read(), ap_const_lv5_0);
}

void relu::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_fu_82_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_13_fu_124_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

