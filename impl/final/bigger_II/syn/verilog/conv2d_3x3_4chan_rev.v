// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2d_3x3_4chan_rev (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        bias_0_V_dout,
        bias_0_V_empty_n,
        bias_0_V_read,
        bias_1_V_dout,
        bias_1_V_empty_n,
        bias_1_V_read,
        bias_2_V_dout,
        bias_2_V_empty_n,
        bias_2_V_read,
        bias_3_V_dout,
        bias_3_V_empty_n,
        bias_3_V_read,
        in_image_0_V_address0,
        in_image_0_V_ce0,
        in_image_0_V_q0,
        in_image_0_V_address1,
        in_image_0_V_ce1,
        in_image_0_V_q1,
        in_image_1_V_address0,
        in_image_1_V_ce0,
        in_image_1_V_q0,
        in_image_1_V_address1,
        in_image_1_V_ce1,
        in_image_1_V_q1,
        kernel_0_V_address0,
        kernel_0_V_ce0,
        kernel_0_V_q0,
        kernel_1_V_address0,
        kernel_1_V_ce0,
        kernel_1_V_q0,
        kernel_2_V_address0,
        kernel_2_V_ce0,
        kernel_2_V_q0,
        kernel_3_V_address0,
        kernel_3_V_ce0,
        kernel_3_V_q0,
        kernel_4_V_address0,
        kernel_4_V_ce0,
        kernel_4_V_q0,
        kernel_5_V_address0,
        kernel_5_V_ce0,
        kernel_5_V_q0,
        kernel_6_V_address0,
        kernel_6_V_ce0,
        kernel_6_V_q0,
        kernel_7_V_address0,
        kernel_7_V_ce0,
        kernel_7_V_q0,
        kernel_8_V_address0,
        kernel_8_V_ce0,
        kernel_8_V_q0,
        out_image_0_V_address0,
        out_image_0_V_ce0,
        out_image_0_V_we0,
        out_image_0_V_d0,
        out_image_1_V_address0,
        out_image_1_V_ce0,
        out_image_1_V_we0,
        out_image_1_V_d0,
        out_image_2_V_address0,
        out_image_2_V_ce0,
        out_image_2_V_we0,
        out_image_2_V_d0,
        out_image_3_V_address0,
        out_image_3_V_ce0,
        out_image_3_V_we0,
        out_image_3_V_d0,
        out_image_4_V_address0,
        out_image_4_V_ce0,
        out_image_4_V_we0,
        out_image_4_V_d0,
        out_image_5_V_address0,
        out_image_5_V_ce0,
        out_image_5_V_we0,
        out_image_5_V_d0,
        out_image_6_V_address0,
        out_image_6_V_ce0,
        out_image_6_V_we0,
        out_image_6_V_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_pp0_stage2 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] bias_0_V_dout;
input   bias_0_V_empty_n;
output   bias_0_V_read;
input  [47:0] bias_1_V_dout;
input   bias_1_V_empty_n;
output   bias_1_V_read;
input  [47:0] bias_2_V_dout;
input   bias_2_V_empty_n;
output   bias_2_V_read;
input  [47:0] bias_3_V_dout;
input   bias_3_V_empty_n;
output   bias_3_V_read;
output  [9:0] in_image_0_V_address0;
output   in_image_0_V_ce0;
input  [24:0] in_image_0_V_q0;
output  [9:0] in_image_0_V_address1;
output   in_image_0_V_ce1;
input  [24:0] in_image_0_V_q1;
output  [9:0] in_image_1_V_address0;
output   in_image_1_V_ce0;
input  [24:0] in_image_1_V_q0;
output  [9:0] in_image_1_V_address1;
output   in_image_1_V_ce1;
input  [24:0] in_image_1_V_q1;
output  [1:0] kernel_0_V_address0;
output   kernel_0_V_ce0;
input  [17:0] kernel_0_V_q0;
output  [1:0] kernel_1_V_address0;
output   kernel_1_V_ce0;
input  [17:0] kernel_1_V_q0;
output  [1:0] kernel_2_V_address0;
output   kernel_2_V_ce0;
input  [17:0] kernel_2_V_q0;
output  [1:0] kernel_3_V_address0;
output   kernel_3_V_ce0;
input  [17:0] kernel_3_V_q0;
output  [1:0] kernel_4_V_address0;
output   kernel_4_V_ce0;
input  [17:0] kernel_4_V_q0;
output  [1:0] kernel_5_V_address0;
output   kernel_5_V_ce0;
input  [17:0] kernel_5_V_q0;
output  [1:0] kernel_6_V_address0;
output   kernel_6_V_ce0;
input  [17:0] kernel_6_V_q0;
output  [1:0] kernel_7_V_address0;
output   kernel_7_V_ce0;
input  [17:0] kernel_7_V_q0;
output  [1:0] kernel_8_V_address0;
output   kernel_8_V_ce0;
input  [17:0] kernel_8_V_q0;
output  [6:0] out_image_0_V_address0;
output   out_image_0_V_ce0;
output   out_image_0_V_we0;
output  [47:0] out_image_0_V_d0;
output  [6:0] out_image_1_V_address0;
output   out_image_1_V_ce0;
output   out_image_1_V_we0;
output  [47:0] out_image_1_V_d0;
output  [6:0] out_image_2_V_address0;
output   out_image_2_V_ce0;
output   out_image_2_V_we0;
output  [47:0] out_image_2_V_d0;
output  [6:0] out_image_3_V_address0;
output   out_image_3_V_ce0;
output   out_image_3_V_we0;
output  [47:0] out_image_3_V_d0;
output  [6:0] out_image_4_V_address0;
output   out_image_4_V_ce0;
output   out_image_4_V_we0;
output  [47:0] out_image_4_V_d0;
output  [6:0] out_image_5_V_address0;
output   out_image_5_V_ce0;
output   out_image_5_V_we0;
output  [47:0] out_image_5_V_d0;
output  [6:0] out_image_6_V_address0;
output   out_image_6_V_ce0;
output   out_image_6_V_we0;
output  [47:0] out_image_6_V_d0;

reg ap_done;
reg ap_idle;
reg bias_0_V_read;
reg bias_1_V_read;
reg bias_2_V_read;
reg bias_3_V_read;
reg[9:0] in_image_0_V_address0;
reg in_image_0_V_ce0;
reg[9:0] in_image_0_V_address1;
reg in_image_0_V_ce1;
reg[9:0] in_image_1_V_address0;
reg in_image_1_V_ce0;
reg[9:0] in_image_1_V_address1;
reg in_image_1_V_ce1;
reg kernel_0_V_ce0;
reg kernel_1_V_ce0;
reg kernel_2_V_ce0;
reg kernel_3_V_ce0;
reg kernel_4_V_ce0;
reg kernel_5_V_ce0;
reg kernel_6_V_ce0;
reg kernel_7_V_ce0;
reg kernel_8_V_ce0;
reg out_image_0_V_ce0;
reg out_image_0_V_we0;
reg out_image_1_V_ce0;
reg out_image_1_V_we0;
reg out_image_2_V_ce0;
reg out_image_2_V_we0;
reg out_image_3_V_ce0;
reg out_image_3_V_we0;
reg out_image_4_V_ce0;
reg out_image_4_V_we0;
reg out_image_5_V_ce0;
reg out_image_5_V_we0;
reg out_image_6_V_ce0;
reg out_image_6_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [0:0] exitcond_flatten_reg_1410;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire   [0:0] ap_phi_mux_do_init_phi_fu_535_p6;
reg    ap_block_state8_pp0_stage0_iter2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    bias_0_V_blk_n;
wire    ap_block_pp0_stage0;
reg    bias_1_V_blk_n;
reg    bias_2_V_blk_n;
reg    bias_3_V_blk_n;
reg   [0:0] tmp_i1_reg_472;
reg   [0:0] tmp_i1_reg_472_pp0_iter1_reg;
reg   [0:0] tmp_i1_reg_472_pp0_iter2_reg;
reg   [8:0] i_i_reg_487;
reg   [2:0] k_i_reg_501;
reg   [9:0] indvar_flatten_reg_515;
reg   [0:0] do_init_reg_530;
reg   [47:0] bias_3_V_load_rewin_reg_547;
reg   [47:0] bias_2_V_load_rewin_reg_562;
reg   [47:0] bias_1_V_load_rewin_reg_577;
reg   [47:0] bias_0_V_load_rewin_reg_592;
reg   [31:0] y_i_reg_607;
reg   [31:0] x_i_reg_621;
reg   [47:0] bias_3_V_load_phi_reg_635;
reg   [47:0] bias_2_V_load_phi_reg_647;
reg   [47:0] bias_1_V_load_phi_reg_659;
reg   [47:0] bias_0_V_load_phi_reg_671;
reg  signed [24:0] reg_683;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state10_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg  signed [24:0] reg_687;
reg  signed [24:0] reg_691;
wire   [8:0] i_i_mid2_fu_701_p3;
reg   [8:0] i_i_mid2_reg_1182;
wire   [2:0] k_i_mid2_fu_709_p3;
reg   [2:0] k_i_mid2_reg_1188;
reg   [2:0] k_i_mid2_reg_1188_pp0_iter1_reg;
reg   [2:0] k_i_mid2_reg_1188_pp0_iter2_reg;
wire   [63:0] tmp_50_i_fu_717_p1;
reg   [63:0] tmp_50_i_reg_1195;
wire   [63:0] tmp_51_i_fu_724_p1;
reg   [63:0] tmp_51_i_reg_1205;
wire   [63:0] tmp_70_cast_fu_751_p1;
reg   [63:0] tmp_70_cast_reg_1220;
wire   [1:0] tmp_16_fu_756_p1;
reg   [1:0] tmp_16_reg_1250;
reg   [1:0] tmp_16_reg_1250_pp0_iter1_reg;
reg   [1:0] tmp_16_reg_1250_pp0_iter2_reg;
wire   [10:0] tmp_51_i_cast1_fu_760_p1;
reg   [10:0] tmp_51_i_cast1_reg_1255;
reg  signed [17:0] kernel_0_V_load_reg_1280;
reg  signed [17:0] kernel_1_V_load_reg_1285;
reg  signed [17:0] kernel_6_V_load_reg_1310;
reg  signed [24:0] in_image_1_V_load_2_reg_1320;
reg  signed [17:0] kernel_2_V_load_reg_1355;
reg  signed [17:0] kernel_3_V_load_reg_1360;
reg  signed [17:0] kernel_4_V_load_reg_1365;
reg  signed [17:0] kernel_5_V_load_reg_1370;
reg  signed [17:0] kernel_7_V_load_reg_1385;
reg  signed [17:0] kernel_8_V_load_reg_1390;
reg  signed [24:0] in_image_1_V_load_3_reg_1395;
wire   [8:0] i_fu_806_p2;
reg   [8:0] i_reg_1400;
wire   [0:0] tmp_i_fu_811_p2;
reg   [0:0] tmp_i_reg_1405;
wire   [0:0] exitcond_flatten_fu_817_p2;
reg   [0:0] exitcond_flatten_reg_1410_pp0_iter1_reg;
wire  signed [40:0] grp_fu_1128_p2;
reg  signed [40:0] p_Val2_9_i_reg_1414;
wire  signed [40:0] grp_fu_1134_p2;
reg  signed [40:0] p_Val2_9_1_i_reg_1419;
wire  signed [40:0] grp_fu_1140_p2;
reg  signed [40:0] p_Val2_9_6_i_reg_1444;
wire  signed [40:0] grp_fu_1146_p2;
reg  signed [40:0] p_Val2_9_2_i_reg_1459;
wire  signed [40:0] grp_fu_1152_p2;
reg  signed [40:0] p_Val2_9_3_i_reg_1464;
wire  signed [40:0] grp_fu_1158_p2;
reg  signed [40:0] p_Val2_9_7_i_reg_1489;
wire   [47:0] tmp1_fu_877_p2;
reg   [47:0] tmp1_reg_1504;
wire   [9:0] indvar_flatten_next_fu_883_p2;
reg   [9:0] indvar_flatten_next_reg_1509;
wire  signed [40:0] grp_fu_1164_p2;
reg  signed [40:0] p_Val2_9_4_i_reg_1514;
wire  signed [40:0] grp_fu_1170_p2;
reg  signed [40:0] p_Val2_9_5_i_reg_1519;
wire  signed [40:0] grp_fu_1176_p2;
reg  signed [40:0] p_Val2_9_8_i_reg_1524;
wire   [47:0] tmp_fu_909_p2;
reg   [47:0] tmp_reg_1529;
wire   [47:0] tmp4_fu_949_p2;
reg   [47:0] tmp4_reg_1554;
wire   [47:0] tmp5_fu_961_p2;
reg   [47:0] tmp5_reg_1559;
wire   [31:0] x_i_mid2_fu_967_p3;
reg   [31:0] x_i_mid2_reg_1564;
wire   [31:0] y_i_mid2_fu_975_p3;
reg   [31:0] y_i_mid2_reg_1570;
reg   [47:0] tmp_76_8_i_reg_1575;
reg   [30:0] arrayNo_cast_i_reg_1586;
wire   [7:0] tmp_65_fu_1079_p2;
reg   [7:0] tmp_65_reg_1590;
wire   [31:0] p_x_1_8_i_fu_1111_p3;
wire   [31:0] p_8_i_fu_1118_p3;
reg    rewind_ap_ready;
reg    rewind_ap_ready_reg;
reg    rewind_enable;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_state1;
reg   [0:0] ap_phi_mux_tmp_i1_phi_fu_476_p6;
reg   [8:0] ap_phi_mux_i_i_phi_fu_491_p6;
reg   [2:0] ap_phi_mux_k_i_phi_fu_505_p6;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_519_p6;
wire    ap_block_pp0_stage2;
wire   [47:0] ap_phi_reg_pp0_iter0_bias_3_V_load_phi_reg_635;
reg   [47:0] ap_phi_reg_pp0_iter1_bias_3_V_load_phi_reg_635;
reg   [47:0] ap_phi_reg_pp0_iter2_bias_3_V_load_phi_reg_635;
wire   [47:0] ap_phi_reg_pp0_iter0_bias_2_V_load_phi_reg_647;
reg   [47:0] ap_phi_reg_pp0_iter1_bias_2_V_load_phi_reg_647;
reg   [47:0] ap_phi_reg_pp0_iter2_bias_2_V_load_phi_reg_647;
wire   [47:0] ap_phi_reg_pp0_iter0_bias_1_V_load_phi_reg_659;
reg   [47:0] ap_phi_reg_pp0_iter1_bias_1_V_load_phi_reg_659;
reg   [47:0] ap_phi_reg_pp0_iter2_bias_1_V_load_phi_reg_659;
wire   [47:0] ap_phi_reg_pp0_iter0_bias_0_V_load_phi_reg_671;
reg   [47:0] ap_phi_reg_pp0_iter1_bias_0_V_load_phi_reg_671;
reg   [47:0] ap_phi_reg_pp0_iter2_bias_0_V_load_phi_reg_671;
wire   [63:0] tmp_69_cast_fu_739_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] tmp_71_cast_fu_769_p1;
wire  signed [63:0] tmp_72_cast_fu_780_p1;
wire  signed [63:0] tmp_76_cast_fu_1085_p1;
wire   [2:0] k_fu_695_p2;
wire   [9:0] tmp_51_i_cast_fu_729_p1;
wire   [9:0] tmp_s_fu_733_p2;
wire   [9:0] tmp_59_fu_745_p2;
wire   [10:0] tmp_60_fu_763_p2;
wire   [10:0] tmp_61_fu_775_p2;
wire   [47:0] tmp_68_1_i_fu_850_p3;
wire   [47:0] tmp_68_i_fu_843_p3;
wire   [47:0] tmp_68_3_i_fu_896_p3;
wire   [47:0] tmp_68_2_i_fu_889_p3;
wire   [47:0] tmp2_fu_903_p2;
wire   [47:0] tmp_68_5_i_fu_921_p3;
wire   [47:0] tmp_68_4_i_fu_914_p3;
wire   [47:0] tmp_68_8_i_fu_942_p3;
wire   [47:0] tmp_68_7_i_fu_935_p3;
wire   [47:0] tmp_68_6_i_fu_928_p3;
wire   [47:0] tmp6_fu_955_p2;
wire   [47:0] tmp3_fu_983_p2;
wire   [47:0] p_Val2_10_8_i_fu_987_p2;
wire   [47:0] tmp_21_fu_1004_p6;
wire  signed [49:0] tmp_74_8_cast_i_fu_1017_p1;
wire   [49:0] tmp_73_8_i_fu_996_p3;
wire   [49:0] p_Val2_13_8_i_fu_1021_p2;
wire   [0:0] tmp_17_fu_1047_p1;
wire   [4:0] tmp_63_fu_1060_p4;
wire   [7:0] tmp_62_fu_1051_p4;
wire   [7:0] p_shl1_cast_fu_1069_p1;
wire   [7:0] tmp_64_fu_1073_p2;
wire   [7:0] tmp_15_fu_992_p1;
wire   [31:0] y_4_8_i_fu_1095_p2;
wire   [0:0] tmp_77_8_i_fu_1100_p2;
wire   [31:0] x_4_8_i_fu_1106_p2;
reg    grp_fu_1128_ce;
reg    grp_fu_1134_ce;
reg    grp_fu_1140_ce;
reg    grp_fu_1146_ce;
reg    grp_fu_1152_ce;
reg    grp_fu_1158_ce;
reg    grp_fu_1164_ce;
reg    grp_fu_1170_ce;
reg    grp_fu_1176_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_472;
reg    ap_condition_488;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 rewind_ap_ready_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

CNN_mux_42_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 48 ),
    .din1_WIDTH( 48 ),
    .din2_WIDTH( 48 ),
    .din3_WIDTH( 48 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 48 ))
CNN_mux_42_48_1_1_U152(
    .din0(ap_phi_reg_pp0_iter2_bias_0_V_load_phi_reg_671),
    .din1(ap_phi_reg_pp0_iter2_bias_1_V_load_phi_reg_659),
    .din2(ap_phi_reg_pp0_iter2_bias_2_V_load_phi_reg_647),
    .din3(ap_phi_reg_pp0_iter2_bias_3_V_load_phi_reg_635),
    .din4(tmp_16_reg_1250_pp0_iter2_reg),
    .dout(tmp_21_fu_1004_p6)
);

CNN_mul_mul_18s_2g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_18s_2g8j_U153(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_V_load_reg_1280),
    .din1(reg_683),
    .ce(grp_fu_1128_ce),
    .dout(grp_fu_1128_p2)
);

CNN_mul_mul_18s_2g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_18s_2g8j_U154(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_1_V_load_reg_1285),
    .din1(reg_687),
    .ce(grp_fu_1134_ce),
    .dout(grp_fu_1134_p2)
);

CNN_mul_mul_18s_2g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_18s_2g8j_U155(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_6_V_load_reg_1310),
    .din1(reg_691),
    .ce(grp_fu_1140_ce),
    .dout(grp_fu_1140_p2)
);

CNN_mul_mul_18s_2g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_18s_2g8j_U156(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_2_V_load_reg_1355),
    .din1(reg_683),
    .ce(grp_fu_1146_ce),
    .dout(grp_fu_1146_p2)
);

CNN_mul_mul_18s_2g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_18s_2g8j_U157(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_3_V_load_reg_1360),
    .din1(reg_687),
    .ce(grp_fu_1152_ce),
    .dout(grp_fu_1152_p2)
);

CNN_mul_mul_18s_2g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_18s_2g8j_U158(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_7_V_load_reg_1385),
    .din1(in_image_1_V_load_2_reg_1320),
    .ce(grp_fu_1158_ce),
    .dout(grp_fu_1158_p2)
);

CNN_mul_mul_18s_2g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_18s_2g8j_U159(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_4_V_load_reg_1365),
    .din1(reg_683),
    .ce(grp_fu_1164_ce),
    .dout(grp_fu_1164_p2)
);

CNN_mul_mul_18s_2g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_18s_2g8j_U160(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_5_V_load_reg_1370),
    .din1(reg_691),
    .ce(grp_fu_1170_ce),
    .dout(grp_fu_1170_p2)
);

CNN_mul_mul_18s_2g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_18s_2g8j_U161(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_8_V_load_reg_1390),
    .din1(in_image_1_V_load_3_reg_1395),
    .ce(grp_fu_1176_ce),
    .dout(grp_fu_1176_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_flatten_reg_1410_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= rewind_enable;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rewind_ap_ready_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (ap_start == 1'b1))) begin
            rewind_ap_ready_reg <= rewind_ap_ready;
        end else begin
            rewind_ap_ready_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_do_init_phi_fu_535_p6 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_bias_0_V_load_phi_reg_671 <= bias_0_V_load_rewin_reg_592;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (do_init_reg_530 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_bias_0_V_load_phi_reg_671 <= bias_0_V_dout;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_reg_pp0_iter2_bias_0_V_load_phi_reg_671 <= ap_phi_reg_pp0_iter1_bias_0_V_load_phi_reg_671;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_do_init_phi_fu_535_p6 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_bias_1_V_load_phi_reg_659 <= bias_1_V_load_rewin_reg_577;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (do_init_reg_530 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_bias_1_V_load_phi_reg_659 <= bias_1_V_dout;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_reg_pp0_iter2_bias_1_V_load_phi_reg_659 <= ap_phi_reg_pp0_iter1_bias_1_V_load_phi_reg_659;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_do_init_phi_fu_535_p6 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_bias_2_V_load_phi_reg_647 <= bias_2_V_load_rewin_reg_562;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (do_init_reg_530 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_bias_2_V_load_phi_reg_647 <= bias_2_V_dout;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_reg_pp0_iter2_bias_2_V_load_phi_reg_647 <= ap_phi_reg_pp0_iter1_bias_2_V_load_phi_reg_647;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_do_init_phi_fu_535_p6 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_bias_3_V_load_phi_reg_635 <= bias_3_V_load_rewin_reg_547;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (do_init_reg_530 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_bias_3_V_load_phi_reg_635 <= bias_3_V_dout;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_phi_reg_pp0_iter2_bias_3_V_load_phi_reg_635 <= ap_phi_reg_pp0_iter1_bias_3_V_load_phi_reg_635;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1410_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        do_init_reg_530 <= 1'd0;
    end else if ((((exitcond_flatten_reg_1410_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        do_init_reg_530 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1410 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_i_reg_487 <= i_reg_1400;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1410 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_i_reg_487 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1410 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        indvar_flatten_reg_515 <= indvar_flatten_next_reg_1509;
    end else if ((((exitcond_flatten_reg_1410 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten_reg_515 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1410 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_i_reg_501 <= k_i_mid2_reg_1188;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1410 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        k_i_reg_501 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1410 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_i1_reg_472 <= tmp_i_reg_1405;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1410 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp_i1_reg_472 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1410_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        x_i_reg_621 <= p_x_1_8_i_fu_1111_p3;
    end else if ((((exitcond_flatten_reg_1410_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_i_reg_621 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1410_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        y_i_reg_607 <= p_8_i_fu_1118_p3;
    end else if ((((exitcond_flatten_reg_1410_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        y_i_reg_607 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_bias_0_V_load_phi_reg_671 <= ap_phi_reg_pp0_iter0_bias_0_V_load_phi_reg_671;
        ap_phi_reg_pp0_iter1_bias_1_V_load_phi_reg_659 <= ap_phi_reg_pp0_iter0_bias_1_V_load_phi_reg_659;
        ap_phi_reg_pp0_iter1_bias_2_V_load_phi_reg_647 <= ap_phi_reg_pp0_iter0_bias_2_V_load_phi_reg_647;
        ap_phi_reg_pp0_iter1_bias_3_V_load_phi_reg_635 <= ap_phi_reg_pp0_iter0_bias_3_V_load_phi_reg_635;
        i_reg_1400 <= i_fu_806_p2;
        in_image_1_V_load_3_reg_1395 <= in_image_1_V_q1;
        tmp_i_reg_1405 <= tmp_i_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        arrayNo_cast_i_reg_1586 <= {{x_i_mid2_fu_967_p3[31:1]}};
        kernel_0_V_load_reg_1280 <= kernel_0_V_q0;
        kernel_1_V_load_reg_1285 <= kernel_1_V_q0;
        kernel_6_V_load_reg_1310 <= kernel_6_V_q0;
        p_Val2_9_2_i_reg_1459 <= grp_fu_1146_p2;
        p_Val2_9_3_i_reg_1464 <= grp_fu_1152_p2;
        p_Val2_9_7_i_reg_1489 <= grp_fu_1158_p2;
        tmp1_reg_1504[47 : 7] <= tmp1_fu_877_p2[47 : 7];
        tmp_51_i_cast1_reg_1255[8 : 0] <= tmp_51_i_cast1_fu_760_p1[8 : 0];
        tmp_65_reg_1590 <= tmp_65_fu_1079_p2;
        tmp_76_8_i_reg_1575 <= {{p_Val2_13_8_i_fu_1021_p2[49:2]}};
        x_i_mid2_reg_1564 <= x_i_mid2_fu_967_p3;
        y_i_mid2_reg_1570 <= y_i_mid2_fu_975_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bias_0_V_load_phi_reg_671 <= ap_phi_reg_pp0_iter2_bias_0_V_load_phi_reg_671;
        bias_1_V_load_phi_reg_659 <= ap_phi_reg_pp0_iter2_bias_1_V_load_phi_reg_659;
        bias_2_V_load_phi_reg_647 <= ap_phi_reg_pp0_iter2_bias_2_V_load_phi_reg_647;
        bias_3_V_load_phi_reg_635 <= ap_phi_reg_pp0_iter2_bias_3_V_load_phi_reg_635;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1410_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        bias_0_V_load_rewin_reg_592 <= bias_0_V_load_phi_reg_671;
        bias_1_V_load_rewin_reg_577 <= bias_1_V_load_phi_reg_659;
        bias_2_V_load_rewin_reg_562 <= bias_2_V_load_phi_reg_647;
        bias_3_V_load_rewin_reg_547 <= bias_3_V_load_phi_reg_635;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exitcond_flatten_reg_1410 <= exitcond_flatten_fu_817_p2;
        exitcond_flatten_reg_1410_pp0_iter1_reg <= exitcond_flatten_reg_1410;
        kernel_2_V_load_reg_1355 <= kernel_2_V_q0;
        kernel_3_V_load_reg_1360 <= kernel_3_V_q0;
        kernel_4_V_load_reg_1365 <= kernel_4_V_q0;
        kernel_5_V_load_reg_1370 <= kernel_5_V_q0;
        kernel_7_V_load_reg_1385 <= kernel_7_V_q0;
        kernel_8_V_load_reg_1390 <= kernel_8_V_q0;
        p_Val2_9_4_i_reg_1514 <= grp_fu_1164_p2;
        p_Val2_9_5_i_reg_1519 <= grp_fu_1170_p2;
        p_Val2_9_8_i_reg_1524 <= grp_fu_1176_p2;
        tmp_reg_1529[47 : 7] <= tmp_fu_909_p2[47 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_i_mid2_reg_1182 <= i_i_mid2_fu_701_p3;
        k_i_mid2_reg_1188_pp0_iter1_reg <= k_i_mid2_reg_1188;
        k_i_mid2_reg_1188_pp0_iter2_reg <= k_i_mid2_reg_1188_pp0_iter1_reg;
        p_Val2_9_1_i_reg_1419 <= grp_fu_1134_p2;
        p_Val2_9_6_i_reg_1444 <= grp_fu_1140_p2;
        p_Val2_9_i_reg_1414 <= grp_fu_1128_p2;
        tmp4_reg_1554[47 : 7] <= tmp4_fu_949_p2[47 : 7];
        tmp5_reg_1559[47 : 7] <= tmp5_fu_961_p2[47 : 7];
        tmp_16_reg_1250 <= tmp_16_fu_756_p1;
        tmp_16_reg_1250_pp0_iter1_reg <= tmp_16_reg_1250;
        tmp_16_reg_1250_pp0_iter2_reg <= tmp_16_reg_1250_pp0_iter1_reg;
        tmp_50_i_reg_1195[2 : 0] <= tmp_50_i_fu_717_p1[2 : 0];
        tmp_51_i_reg_1205[8 : 0] <= tmp_51_i_fu_724_p1[8 : 0];
        tmp_70_cast_reg_1220[9 : 0] <= tmp_70_cast_fu_751_p1[9 : 0];
        tmp_i1_reg_472_pp0_iter1_reg <= tmp_i1_reg_472;
        tmp_i1_reg_472_pp0_iter2_reg <= tmp_i1_reg_472_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_image_1_V_load_2_reg_1320 <= in_image_1_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten_next_reg_1509 <= indvar_flatten_next_fu_883_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        k_i_mid2_reg_1188 <= k_i_mid2_fu_709_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_683 <= in_image_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_687 <= in_image_0_V_q1;
        reg_691 <= in_image_1_V_q0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1410_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = rewind_enable;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_472)) begin
        if ((exitcond_flatten_reg_1410 == 1'd1)) begin
            ap_phi_mux_i_i_phi_fu_491_p6 = 9'd0;
        end else if ((exitcond_flatten_reg_1410 == 1'd0)) begin
            ap_phi_mux_i_i_phi_fu_491_p6 = i_reg_1400;
        end else begin
            ap_phi_mux_i_i_phi_fu_491_p6 = i_i_reg_487;
        end
    end else begin
        ap_phi_mux_i_i_phi_fu_491_p6 = i_i_reg_487;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_488)) begin
        if ((exitcond_flatten_reg_1410 == 1'd1)) begin
            ap_phi_mux_indvar_flatten_phi_fu_519_p6 = 10'd0;
        end else if ((exitcond_flatten_reg_1410 == 1'd0)) begin
            ap_phi_mux_indvar_flatten_phi_fu_519_p6 = indvar_flatten_next_reg_1509;
        end else begin
            ap_phi_mux_indvar_flatten_phi_fu_519_p6 = indvar_flatten_reg_515;
        end
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_519_p6 = indvar_flatten_reg_515;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_472)) begin
        if ((exitcond_flatten_reg_1410 == 1'd1)) begin
            ap_phi_mux_k_i_phi_fu_505_p6 = 3'd0;
        end else if ((exitcond_flatten_reg_1410 == 1'd0)) begin
            ap_phi_mux_k_i_phi_fu_505_p6 = k_i_mid2_reg_1188;
        end else begin
            ap_phi_mux_k_i_phi_fu_505_p6 = k_i_reg_501;
        end
    end else begin
        ap_phi_mux_k_i_phi_fu_505_p6 = k_i_reg_501;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_472)) begin
        if ((exitcond_flatten_reg_1410 == 1'd1)) begin
            ap_phi_mux_tmp_i1_phi_fu_476_p6 = 1'd0;
        end else if ((exitcond_flatten_reg_1410 == 1'd0)) begin
            ap_phi_mux_tmp_i1_phi_fu_476_p6 = tmp_i_reg_1405;
        end else begin
            ap_phi_mux_tmp_i1_phi_fu_476_p6 = tmp_i1_reg_472;
        end
    end else begin
        ap_phi_mux_tmp_i1_phi_fu_476_p6 = tmp_i1_reg_472;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((do_init_reg_530 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_0_V_blk_n = bias_0_V_empty_n;
    end else begin
        bias_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (do_init_reg_530 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_0_V_read = 1'b1;
    end else begin
        bias_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((do_init_reg_530 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_1_V_blk_n = bias_1_V_empty_n;
    end else begin
        bias_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (do_init_reg_530 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_1_V_read = 1'b1;
    end else begin
        bias_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((do_init_reg_530 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_2_V_blk_n = bias_2_V_empty_n;
    end else begin
        bias_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (do_init_reg_530 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_2_V_read = 1'b1;
    end else begin
        bias_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((do_init_reg_530 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_3_V_blk_n = bias_3_V_empty_n;
    end else begin
        bias_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (do_init_reg_530 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_3_V_read = 1'b1;
    end else begin
        bias_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_1128_ce = 1'b1;
    end else begin
        grp_fu_1128_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_1134_ce = 1'b1;
    end else begin
        grp_fu_1134_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_1140_ce = 1'b1;
    end else begin
        grp_fu_1140_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1146_ce = 1'b1;
    end else begin
        grp_fu_1146_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1152_ce = 1'b1;
    end else begin
        grp_fu_1152_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1158_ce = 1'b1;
    end else begin
        grp_fu_1158_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1164_ce = 1'b1;
    end else begin
        grp_fu_1164_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1170_ce = 1'b1;
    end else begin
        grp_fu_1170_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1176_ce = 1'b1;
    end else begin
        grp_fu_1176_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            in_image_0_V_address0 = tmp_72_cast_fu_780_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            in_image_0_V_address0 = tmp_70_cast_reg_1220;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            in_image_0_V_address0 = tmp_51_i_fu_724_p1;
        end else begin
            in_image_0_V_address0 = 'bx;
        end
    end else begin
        in_image_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            in_image_0_V_address1 = tmp_71_cast_fu_769_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            in_image_0_V_address1 = tmp_69_cast_fu_739_p1;
        end else begin
            in_image_0_V_address1 = 'bx;
        end
    end else begin
        in_image_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        in_image_0_V_ce0 = 1'b1;
    end else begin
        in_image_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        in_image_0_V_ce1 = 1'b1;
    end else begin
        in_image_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            in_image_1_V_address0 = tmp_51_i_reg_1205;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            in_image_1_V_address0 = tmp_69_cast_fu_739_p1;
        end else begin
            in_image_1_V_address0 = 'bx;
        end
    end else begin
        in_image_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            in_image_1_V_address1 = tmp_71_cast_fu_769_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            in_image_1_V_address1 = tmp_70_cast_fu_751_p1;
        end else begin
            in_image_1_V_address1 = 'bx;
        end
    end else begin
        in_image_1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        in_image_1_V_ce0 = 1'b1;
    end else begin
        in_image_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        in_image_1_V_ce1 = 1'b1;
    end else begin
        in_image_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1410 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_0_V_ce0 = 1'b1;
    end else begin
        kernel_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_1_V_ce0 = 1'b1;
    end else begin
        kernel_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_2_V_ce0 = 1'b1;
    end else begin
        kernel_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_3_V_ce0 = 1'b1;
    end else begin
        kernel_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_4_V_ce0 = 1'b1;
    end else begin
        kernel_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_5_V_ce0 = 1'b1;
    end else begin
        kernel_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_6_V_ce0 = 1'b1;
    end else begin
        kernel_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_7_V_ce0 = 1'b1;
    end else begin
        kernel_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_8_V_ce0 = 1'b1;
    end else begin
        kernel_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_0_V_ce0 = 1'b1;
    end else begin
        out_image_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_i_reg_1586 == 31'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_0_V_we0 = 1'b1;
    end else begin
        out_image_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_1_V_ce0 = 1'b1;
    end else begin
        out_image_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_i_reg_1586 == 31'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_1_V_we0 = 1'b1;
    end else begin
        out_image_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_2_V_ce0 = 1'b1;
    end else begin
        out_image_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_i_reg_1586 == 31'd2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_2_V_we0 = 1'b1;
    end else begin
        out_image_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_3_V_ce0 = 1'b1;
    end else begin
        out_image_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_i_reg_1586 == 31'd3) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_3_V_we0 = 1'b1;
    end else begin
        out_image_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_4_V_ce0 = 1'b1;
    end else begin
        out_image_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_i_reg_1586 == 31'd4) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_4_V_we0 = 1'b1;
    end else begin
        out_image_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_5_V_ce0 = 1'b1;
    end else begin
        out_image_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_i_reg_1586 == 31'd5) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_5_V_we0 = 1'b1;
    end else begin
        out_image_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_6_V_ce0 = 1'b1;
    end else begin
        out_image_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(arrayNo_cast_i_reg_1586 == 31'd0) & ~(arrayNo_cast_i_reg_1586 == 31'd1) & ~(arrayNo_cast_i_reg_1586 == 31'd2) & ~(arrayNo_cast_i_reg_1586 == 31'd3) & ~(arrayNo_cast_i_reg_1586 == 31'd4) & ~(arrayNo_cast_i_reg_1586 == 31'd5) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_image_6_V_we0 = 1'b1;
    end else begin
        out_image_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((rewind_ap_ready_reg == 1'b1) | ((exitcond_flatten_fu_817_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        rewind_ap_ready = 1'b1;
    end else begin
        rewind_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((rewind_ap_ready_reg == 1'b0) & (ap_start == 1'b1))) begin
        rewind_enable = 1'b1;
    end else begin
        rewind_enable = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((bias_3_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)) | ((bias_2_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)) | ((bias_1_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)) | ((bias_0_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((bias_3_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)) | ((bias_2_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)) | ((bias_1_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)) | ((bias_0_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter2 = (((bias_3_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)) | ((bias_2_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)) | ((bias_1_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)) | ((bias_0_V_empty_n == 1'b0) & (do_init_reg_530 == 1'd1)));
end

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_472 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_488 = ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_do_init_phi_fu_535_p6 = do_init_reg_530;

assign ap_phi_reg_pp0_iter0_bias_0_V_load_phi_reg_671 = 'bx;

assign ap_phi_reg_pp0_iter0_bias_1_V_load_phi_reg_659 = 'bx;

assign ap_phi_reg_pp0_iter0_bias_2_V_load_phi_reg_647 = 'bx;

assign ap_phi_reg_pp0_iter0_bias_3_V_load_phi_reg_635 = 'bx;

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_817_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_519_p6 == 10'd1023) ? 1'b1 : 1'b0);

assign i_fu_806_p2 = (i_i_mid2_reg_1182 + 9'd1);

assign i_i_mid2_fu_701_p3 = ((ap_phi_mux_tmp_i1_phi_fu_476_p6[0:0] === 1'b1) ? 9'd0 : ap_phi_mux_i_i_phi_fu_491_p6);

assign indvar_flatten_next_fu_883_p2 = (10'd1 + indvar_flatten_reg_515);

assign k_fu_695_p2 = (3'd1 + ap_phi_mux_k_i_phi_fu_505_p6);

assign k_i_mid2_fu_709_p3 = ((ap_phi_mux_tmp_i1_phi_fu_476_p6[0:0] === 1'b1) ? k_fu_695_p2 : ap_phi_mux_k_i_phi_fu_505_p6);

assign kernel_0_V_address0 = tmp_50_i_fu_717_p1;

assign kernel_1_V_address0 = tmp_50_i_fu_717_p1;

assign kernel_2_V_address0 = tmp_50_i_reg_1195;

assign kernel_3_V_address0 = tmp_50_i_reg_1195;

assign kernel_4_V_address0 = tmp_50_i_reg_1195;

assign kernel_5_V_address0 = tmp_50_i_reg_1195;

assign kernel_6_V_address0 = tmp_50_i_fu_717_p1;

assign kernel_7_V_address0 = tmp_50_i_reg_1195;

assign kernel_8_V_address0 = tmp_50_i_reg_1195;

assign out_image_0_V_address0 = tmp_76_cast_fu_1085_p1;

assign out_image_0_V_d0 = tmp_76_8_i_reg_1575;

assign out_image_1_V_address0 = tmp_76_cast_fu_1085_p1;

assign out_image_1_V_d0 = tmp_76_8_i_reg_1575;

assign out_image_2_V_address0 = tmp_76_cast_fu_1085_p1;

assign out_image_2_V_d0 = tmp_76_8_i_reg_1575;

assign out_image_3_V_address0 = tmp_76_cast_fu_1085_p1;

assign out_image_3_V_d0 = tmp_76_8_i_reg_1575;

assign out_image_4_V_address0 = tmp_76_cast_fu_1085_p1;

assign out_image_4_V_d0 = tmp_76_8_i_reg_1575;

assign out_image_5_V_address0 = tmp_76_cast_fu_1085_p1;

assign out_image_5_V_d0 = tmp_76_8_i_reg_1575;

assign out_image_6_V_address0 = tmp_76_cast_fu_1085_p1;

assign out_image_6_V_d0 = tmp_76_8_i_reg_1575;

assign p_8_i_fu_1118_p3 = ((tmp_77_8_i_fu_1100_p2[0:0] === 1'b1) ? 32'd0 : y_4_8_i_fu_1095_p2);

assign p_Val2_10_8_i_fu_987_p2 = (tmp_reg_1529 + tmp3_fu_983_p2);

assign p_Val2_13_8_i_fu_1021_p2 = ($signed(tmp_74_8_cast_i_fu_1017_p1) + $signed(tmp_73_8_i_fu_996_p3));

assign p_shl1_cast_fu_1069_p1 = tmp_63_fu_1060_p4;

assign p_x_1_8_i_fu_1111_p3 = ((tmp_77_8_i_fu_1100_p2[0:0] === 1'b1) ? x_4_8_i_fu_1106_p2 : x_i_mid2_reg_1564);

assign tmp1_fu_877_p2 = (tmp_68_1_i_fu_850_p3 + tmp_68_i_fu_843_p3);

assign tmp2_fu_903_p2 = (tmp_68_3_i_fu_896_p3 + tmp_68_2_i_fu_889_p3);

assign tmp3_fu_983_p2 = (tmp4_reg_1554 + tmp5_reg_1559);

assign tmp4_fu_949_p2 = (tmp_68_5_i_fu_921_p3 + tmp_68_4_i_fu_914_p3);

assign tmp5_fu_961_p2 = (tmp_68_6_i_fu_928_p3 + tmp6_fu_955_p2);

assign tmp6_fu_955_p2 = (tmp_68_8_i_fu_942_p3 + tmp_68_7_i_fu_935_p3);

assign tmp_15_fu_992_p1 = y_i_mid2_fu_975_p3[7:0];

assign tmp_16_fu_756_p1 = k_i_mid2_fu_709_p3[1:0];

assign tmp_17_fu_1047_p1 = x_i_mid2_fu_967_p3[0:0];

assign tmp_50_i_fu_717_p1 = k_i_mid2_fu_709_p3;

assign tmp_51_i_cast1_fu_760_p1 = i_i_mid2_reg_1182;

assign tmp_51_i_cast_fu_729_p1 = i_i_mid2_fu_701_p3;

assign tmp_51_i_fu_724_p1 = i_i_mid2_fu_701_p3;

assign tmp_59_fu_745_p2 = (10'd392 + tmp_51_i_cast_fu_729_p1);

assign tmp_60_fu_763_p2 = (11'd588 + tmp_51_i_cast1_fu_760_p1);

assign tmp_61_fu_775_p2 = (11'd784 + tmp_51_i_cast1_reg_1255);

assign tmp_62_fu_1051_p4 = {{{k_i_mid2_reg_1188_pp0_iter2_reg}, {tmp_17_fu_1047_p1}}, {4'd0}};

assign tmp_63_fu_1060_p4 = {{{k_i_mid2_reg_1188_pp0_iter2_reg}, {tmp_17_fu_1047_p1}}, {1'd0}};

assign tmp_64_fu_1073_p2 = (tmp_62_fu_1051_p4 - p_shl1_cast_fu_1069_p1);

assign tmp_65_fu_1079_p2 = (tmp_64_fu_1073_p2 + tmp_15_fu_992_p1);

assign tmp_68_1_i_fu_850_p3 = {{p_Val2_9_1_i_reg_1419}, {7'd0}};

assign tmp_68_2_i_fu_889_p3 = {{p_Val2_9_2_i_reg_1459}, {7'd0}};

assign tmp_68_3_i_fu_896_p3 = {{p_Val2_9_3_i_reg_1464}, {7'd0}};

assign tmp_68_4_i_fu_914_p3 = {{p_Val2_9_4_i_reg_1514}, {7'd0}};

assign tmp_68_5_i_fu_921_p3 = {{p_Val2_9_5_i_reg_1519}, {7'd0}};

assign tmp_68_6_i_fu_928_p3 = {{p_Val2_9_6_i_reg_1444}, {7'd0}};

assign tmp_68_7_i_fu_935_p3 = {{p_Val2_9_7_i_reg_1489}, {7'd0}};

assign tmp_68_8_i_fu_942_p3 = {{p_Val2_9_8_i_reg_1524}, {7'd0}};

assign tmp_68_i_fu_843_p3 = {{p_Val2_9_i_reg_1414}, {7'd0}};

assign tmp_69_cast_fu_739_p1 = tmp_s_fu_733_p2;

assign tmp_70_cast_fu_751_p1 = tmp_59_fu_745_p2;

assign tmp_71_cast_fu_769_p1 = $signed(tmp_60_fu_763_p2);

assign tmp_72_cast_fu_780_p1 = $signed(tmp_61_fu_775_p2);

assign tmp_73_8_i_fu_996_p3 = {{p_Val2_10_8_i_fu_987_p2}, {2'd0}};

assign tmp_74_8_cast_i_fu_1017_p1 = $signed(tmp_21_fu_1004_p6);

assign tmp_76_cast_fu_1085_p1 = $signed(tmp_65_reg_1590);

assign tmp_77_8_i_fu_1100_p2 = ((y_4_8_i_fu_1095_p2 == 32'd14) ? 1'b1 : 1'b0);

assign tmp_fu_909_p2 = (tmp1_reg_1504 + tmp2_fu_903_p2);

assign tmp_i_fu_811_p2 = ((i_fu_806_p2 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_s_fu_733_p2 = (10'd196 + tmp_51_i_cast_fu_729_p1);

assign x_4_8_i_fu_1106_p2 = (x_i_mid2_reg_1564 + 32'd1);

assign x_i_mid2_fu_967_p3 = ((tmp_i1_reg_472_pp0_iter2_reg[0:0] === 1'b1) ? 32'd0 : x_i_reg_621);

assign y_4_8_i_fu_1095_p2 = (y_i_mid2_reg_1570 + 32'd1);

assign y_i_mid2_fu_975_p3 = ((tmp_i1_reg_472_pp0_iter2_reg[0:0] === 1'b1) ? 32'd0 : y_i_reg_607);

always @ (posedge ap_clk) begin
    tmp_50_i_reg_1195[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_51_i_reg_1205[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    tmp_70_cast_reg_1220[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    tmp_51_i_cast1_reg_1255[10:9] <= 2'b00;
    tmp1_reg_1504[6:0] <= 7'b0000000;
    tmp_reg_1529[6:0] <= 7'b0000000;
    tmp4_reg_1554[6:0] <= 7'b0000000;
    tmp5_reg_1559[6:0] <= 7'b0000000;
end

endmodule //conv2d_3x3_4chan_rev
