// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pad_for_conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_image_V_address0,
        in_image_V_ce0,
        in_image_V_q0,
        out_image_0_V_address0,
        out_image_0_V_ce0,
        out_image_0_V_we0,
        out_image_0_V_d0,
        out_image_0_V_address1,
        out_image_0_V_ce1,
        out_image_0_V_we1,
        out_image_0_V_d1,
        out_image_1_V_address0,
        out_image_1_V_ce0,
        out_image_1_V_we0,
        out_image_1_V_d0,
        out_image_1_V_address1,
        out_image_1_V_ce1,
        out_image_1_V_we1,
        out_image_1_V_d1,
        out_image_2_V_address0,
        out_image_2_V_ce0,
        out_image_2_V_we0,
        out_image_2_V_d0,
        out_image_2_V_address1,
        out_image_2_V_ce1,
        out_image_2_V_we1,
        out_image_2_V_d1,
        out_image_3_V_address0,
        out_image_3_V_ce0,
        out_image_3_V_we0,
        out_image_3_V_d0,
        out_image_3_V_address1,
        out_image_3_V_ce1,
        out_image_3_V_we1,
        out_image_3_V_d1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] in_image_V_address0;
output   in_image_V_ce0;
input  [24:0] in_image_V_q0;
output  [5:0] out_image_0_V_address0;
output   out_image_0_V_ce0;
output   out_image_0_V_we0;
output  [24:0] out_image_0_V_d0;
output  [5:0] out_image_0_V_address1;
output   out_image_0_V_ce1;
output   out_image_0_V_we1;
output  [24:0] out_image_0_V_d1;
output  [5:0] out_image_1_V_address0;
output   out_image_1_V_ce0;
output   out_image_1_V_we0;
output  [24:0] out_image_1_V_d0;
output  [5:0] out_image_1_V_address1;
output   out_image_1_V_ce1;
output   out_image_1_V_we1;
output  [24:0] out_image_1_V_d1;
output  [5:0] out_image_2_V_address0;
output   out_image_2_V_ce0;
output   out_image_2_V_we0;
output  [24:0] out_image_2_V_d0;
output  [5:0] out_image_2_V_address1;
output   out_image_2_V_ce1;
output   out_image_2_V_we1;
output  [24:0] out_image_2_V_d1;
output  [5:0] out_image_3_V_address0;
output   out_image_3_V_ce0;
output   out_image_3_V_we0;
output  [24:0] out_image_3_V_d0;
output  [5:0] out_image_3_V_address1;
output   out_image_3_V_ce1;
output   out_image_3_V_we1;
output  [24:0] out_image_3_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_image_V_ce0;
reg[5:0] out_image_0_V_address0;
reg out_image_0_V_ce0;
reg out_image_0_V_we0;
reg[5:0] out_image_0_V_address1;
reg out_image_0_V_ce1;
reg out_image_0_V_we1;
reg[24:0] out_image_0_V_d1;
reg[5:0] out_image_1_V_address0;
reg out_image_1_V_ce0;
reg out_image_1_V_we0;
reg[24:0] out_image_1_V_d0;
reg out_image_1_V_ce1;
reg out_image_1_V_we1;
reg[5:0] out_image_2_V_address0;
reg out_image_2_V_ce0;
reg out_image_2_V_we0;
reg[24:0] out_image_2_V_d0;
reg out_image_2_V_ce1;
reg out_image_2_V_we1;
reg[5:0] out_image_3_V_address0;
reg out_image_3_V_ce0;
reg out_image_3_V_we0;
reg[5:0] out_image_3_V_address1;
reg out_image_3_V_ce1;
reg out_image_3_V_we1;
reg[24:0] out_image_3_V_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_3_fu_282_p2;
reg   [4:0] i_3_reg_461;
wire    ap_CS_fsm_state2;
wire   [2:0] arrayNo3_cast_fu_308_p4;
reg   [2:0] arrayNo3_cast_reg_466;
wire   [0:0] tmp_fu_276_p2;
reg   [5:0] out_image_0_V_addr_2_reg_470;
reg   [5:0] out_image_3_V_addr_2_reg_475;
wire   [3:0] i_4_fu_362_p2;
reg   [3:0] i_4_reg_483;
wire    ap_CS_fsm_state4;
wire   [8:0] tmp_36_fu_396_p2;
reg   [8:0] tmp_36_reg_488;
wire   [0:0] tmp_16_fu_356_p2;
reg   [1:0] tmp_37_reg_493;
wire   [1:0] newIndex_trunc_fu_412_p2;
reg   [1:0] newIndex_trunc_reg_497;
wire   [3:0] j_4_fu_424_p2;
reg   [3:0] j_4_reg_505;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_18_fu_418_p2;
reg   [5:0] out_image_0_V_addr_3_reg_516;
wire    ap_CS_fsm_state6;
reg   [5:0] out_image_1_V_addr_2_reg_521;
reg   [5:0] out_image_2_V_addr_2_reg_526;
reg   [5:0] out_image_3_V_addr_3_reg_531;
reg   [24:0] in_image_V_load_reg_536;
reg   [4:0] i_reg_243;
reg    ap_block_state1;
wire    ap_CS_fsm_state3;
reg   [3:0] i_1_reg_254;
reg   [3:0] j_reg_265;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_s_fu_288_p1;
wire   [63:0] tmp_32_cast_fu_303_p1;
wire   [63:0] tmp_31_fu_330_p1;
wire   [63:0] tmp_33_fu_344_p3;
wire  signed [63:0] tmp_44_cast_fu_439_p1;
wire   [63:0] tmp_39_fu_450_p1;
wire   [4:0] tmp_29_fu_293_p2;
wire  signed [5:0] tmp_32_cast1_fu_299_p1;
wire   [1:0] tmp_8_fu_318_p1;
wire   [5:0] tmp_30_fu_322_p3;
wire   [5:0] tmp_32_fu_338_p2;
wire   [7:0] tmp_34_fu_372_p3;
wire   [4:0] tmp_35_fu_384_p3;
wire   [8:0] p_shl_cast_fu_380_p1;
wire   [8:0] p_shl1_cast_fu_392_p1;
wire   [1:0] tmp_9_fu_368_p1;
wire   [8:0] tmp_20_cast_fu_430_p1;
wire   [8:0] tmp_40_fu_434_p2;
wire   [5:0] tmp_38_fu_444_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_16_fu_356_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_254 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_18_fu_418_p2 == 1'd1))) begin
        i_1_reg_254 <= i_4_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_243 <= i_3_reg_461;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_243 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_265 <= j_4_reg_505;
    end else if (((tmp_16_fu_356_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_265 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayNo3_cast_reg_466 <= {{i_reg_243[4:2]}};
        out_image_0_V_addr_2_reg_470[5 : 4] <= tmp_33_fu_344_p3[5 : 4];
        out_image_3_V_addr_2_reg_475[5 : 4] <= tmp_33_fu_344_p3[5 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_461 <= i_3_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_4_reg_483 <= i_4_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_image_V_load_reg_536 <= in_image_V_q0;
        out_image_0_V_addr_3_reg_516 <= tmp_39_fu_450_p1;
        out_image_1_V_addr_2_reg_521 <= tmp_39_fu_450_p1;
        out_image_2_V_addr_2_reg_526 <= tmp_39_fu_450_p1;
        out_image_3_V_addr_3_reg_531 <= tmp_39_fu_450_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_4_reg_505 <= j_4_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_16_fu_356_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        newIndex_trunc_reg_497 <= newIndex_trunc_fu_412_p2;
        tmp_36_reg_488[8 : 1] <= tmp_36_fu_396_p2[8 : 1];
        tmp_37_reg_493 <= {{i_4_fu_362_p2[3:2]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_16_fu_356_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_16_fu_356_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_image_V_ce0 = 1'b1;
    end else begin
        in_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_image_0_V_address0 = out_image_0_V_addr_2_reg_470;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_0_V_address0 = tmp_s_fu_288_p1;
    end else begin
        out_image_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_0_V_address1 = out_image_0_V_addr_3_reg_516;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_0_V_address1 = tmp_31_fu_330_p1;
    end else begin
        out_image_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        out_image_0_V_ce0 = 1'b1;
    end else begin
        out_image_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        out_image_0_V_ce1 = 1'b1;
    end else begin
        out_image_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_0_V_d1 = in_image_V_load_reg_536;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_0_V_d1 = 25'd0;
    end else begin
        out_image_0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((arrayNo3_cast_reg_466 == 3'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_image_0_V_we0 = 1'b1;
    end else begin
        out_image_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_fu_276_p2 == 1'd0) & (arrayNo3_cast_fu_308_p4 == 3'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_37_reg_493 == 2'd0)))) begin
        out_image_0_V_we1 = 1'b1;
    end else begin
        out_image_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_1_V_address0 = out_image_1_V_addr_2_reg_521;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_1_V_address0 = tmp_31_fu_330_p1;
    end else begin
        out_image_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        out_image_1_V_ce0 = 1'b1;
    end else begin
        out_image_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_1_V_ce1 = 1'b1;
    end else begin
        out_image_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_1_V_d0 = in_image_V_load_reg_536;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_1_V_d0 = 25'd0;
    end else begin
        out_image_1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_fu_276_p2 == 1'd0) & (arrayNo3_cast_fu_308_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_37_reg_493 == 2'd1)))) begin
        out_image_1_V_we0 = 1'b1;
    end else begin
        out_image_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_276_p2 == 1'd0) & (arrayNo3_cast_fu_308_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_1_V_we1 = 1'b1;
    end else begin
        out_image_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_2_V_address0 = out_image_2_V_addr_2_reg_526;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_2_V_address0 = tmp_31_fu_330_p1;
    end else begin
        out_image_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        out_image_2_V_ce0 = 1'b1;
    end else begin
        out_image_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_2_V_ce1 = 1'b1;
    end else begin
        out_image_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_2_V_d0 = in_image_V_load_reg_536;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_2_V_d0 = 25'd0;
    end else begin
        out_image_2_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_fu_276_p2 == 1'd0) & (arrayNo3_cast_fu_308_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_37_reg_493 == 2'd2)))) begin
        out_image_2_V_we0 = 1'b1;
    end else begin
        out_image_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_276_p2 == 1'd0) & (arrayNo3_cast_fu_308_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_2_V_we1 = 1'b1;
    end else begin
        out_image_2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_image_3_V_address0 = out_image_3_V_addr_2_reg_475;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_3_V_address0 = tmp_32_cast_fu_303_p1;
    end else begin
        out_image_3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_3_V_address1 = out_image_3_V_addr_3_reg_531;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_3_V_address1 = tmp_31_fu_330_p1;
    end else begin
        out_image_3_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        out_image_3_V_ce0 = 1'b1;
    end else begin
        out_image_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        out_image_3_V_ce1 = 1'b1;
    end else begin
        out_image_3_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_3_V_d1 = in_image_V_load_reg_536;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_3_V_d1 = 25'd0;
    end else begin
        out_image_3_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | (~(arrayNo3_cast_reg_466 == 3'd2) & ~(arrayNo3_cast_reg_466 == 3'd1) & ~(arrayNo3_cast_reg_466 == 3'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_image_3_V_we0 = 1'b1;
    end else begin
        out_image_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((~(arrayNo3_cast_fu_308_p4 == 3'd2) & ~(arrayNo3_cast_fu_308_p4 == 3'd1) & ~(arrayNo3_cast_fu_308_p4 == 3'd0) & (tmp_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_37_reg_493 == 2'd3)))) begin
        out_image_3_V_we1 = 1'b1;
    end else begin
        out_image_3_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_16_fu_356_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_18_fu_418_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign arrayNo3_cast_fu_308_p4 = {{i_reg_243[4:2]}};

assign i_3_fu_282_p2 = (i_reg_243 + 5'd1);

assign i_4_fu_362_p2 = (i_1_reg_254 + 4'd1);

assign in_image_V_address0 = tmp_44_cast_fu_439_p1;

assign j_4_fu_424_p2 = (j_reg_265 + 4'd1);

assign newIndex_trunc_fu_412_p2 = (2'd1 + tmp_9_fu_368_p1);

assign out_image_0_V_d0 = 25'd0;

assign out_image_1_V_address1 = tmp_33_fu_344_p3;

assign out_image_1_V_d1 = 25'd0;

assign out_image_2_V_address1 = tmp_33_fu_344_p3;

assign out_image_2_V_d1 = 25'd0;

assign out_image_3_V_d0 = 25'd0;

assign p_shl1_cast_fu_392_p1 = tmp_35_fu_384_p3;

assign p_shl_cast_fu_380_p1 = tmp_34_fu_372_p3;

assign tmp_16_fu_356_p2 = ((i_1_reg_254 == 4'd14) ? 1'b1 : 1'b0);

assign tmp_18_fu_418_p2 = ((j_reg_265 == 4'd14) ? 1'b1 : 1'b0);

assign tmp_20_cast_fu_430_p1 = j_reg_265;

assign tmp_29_fu_293_p2 = (i_reg_243 ^ 5'd16);

assign tmp_30_fu_322_p3 = {{tmp_8_fu_318_p1}, {4'd0}};

assign tmp_31_fu_330_p1 = tmp_30_fu_322_p3;

assign tmp_32_cast1_fu_299_p1 = $signed(tmp_29_fu_293_p2);

assign tmp_32_cast_fu_303_p1 = $unsigned(tmp_32_cast1_fu_299_p1);

assign tmp_32_fu_338_p2 = (tmp_30_fu_322_p3 | 6'd15);

assign tmp_33_fu_344_p3 = {{58'd0}, {tmp_32_fu_338_p2}};

assign tmp_34_fu_372_p3 = {{i_1_reg_254}, {4'd0}};

assign tmp_35_fu_384_p3 = {{i_1_reg_254}, {1'd0}};

assign tmp_36_fu_396_p2 = (p_shl_cast_fu_380_p1 - p_shl1_cast_fu_392_p1);

assign tmp_38_fu_444_p3 = {{newIndex_trunc_reg_497}, {j_4_reg_505}};

assign tmp_39_fu_450_p1 = tmp_38_fu_444_p3;

assign tmp_40_fu_434_p2 = (tmp_36_reg_488 + tmp_20_cast_fu_430_p1);

assign tmp_44_cast_fu_439_p1 = $signed(tmp_40_fu_434_p2);

assign tmp_8_fu_318_p1 = i_reg_243[1:0];

assign tmp_9_fu_368_p1 = i_1_reg_254[1:0];

assign tmp_fu_276_p2 = ((i_reg_243 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_s_fu_288_p1 = i_reg_243;

always @ (posedge ap_clk) begin
    out_image_0_V_addr_2_reg_470[3:0] <= 4'b1111;
    out_image_3_V_addr_2_reg_475[3:0] <= 4'b1111;
    tmp_36_reg_488[0] <= 1'b0;
end

endmodule //pad_for_conv2
