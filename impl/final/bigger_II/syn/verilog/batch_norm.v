// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module batch_norm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_image_0_V_address0,
        in_image_0_V_ce0,
        in_image_0_V_q0,
        in_image_1_V_address0,
        in_image_1_V_ce0,
        in_image_1_V_q0,
        in_image_2_V_address0,
        in_image_2_V_ce0,
        in_image_2_V_q0,
        in_image_3_V_address0,
        in_image_3_V_ce0,
        in_image_3_V_q0,
        in_image_4_V_address0,
        in_image_4_V_ce0,
        in_image_4_V_q0,
        in_image_5_V_address0,
        in_image_5_V_ce0,
        in_image_5_V_q0,
        in_image_6_V_address0,
        in_image_6_V_ce0,
        in_image_6_V_q0,
        A_V_dout,
        A_V_empty_n,
        A_V_read,
        B_V_dout,
        B_V_empty_n,
        B_V_read,
        out_image_V_address0,
        out_image_V_ce0,
        out_image_V_we0,
        out_image_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [6:0] in_image_0_V_address0;
output   in_image_0_V_ce0;
input  [24:0] in_image_0_V_q0;
output  [6:0] in_image_1_V_address0;
output   in_image_1_V_ce0;
input  [24:0] in_image_1_V_q0;
output  [6:0] in_image_2_V_address0;
output   in_image_2_V_ce0;
input  [24:0] in_image_2_V_q0;
output  [6:0] in_image_3_V_address0;
output   in_image_3_V_ce0;
input  [24:0] in_image_3_V_q0;
output  [6:0] in_image_4_V_address0;
output   in_image_4_V_ce0;
input  [24:0] in_image_4_V_q0;
output  [6:0] in_image_5_V_address0;
output   in_image_5_V_ce0;
input  [24:0] in_image_5_V_q0;
output  [6:0] in_image_6_V_address0;
output   in_image_6_V_ce0;
input  [24:0] in_image_6_V_q0;
input  [17:0] A_V_dout;
input   A_V_empty_n;
output   A_V_read;
input  [17:0] B_V_dout;
input   B_V_empty_n;
output   B_V_read;
output  [9:0] out_image_V_address0;
output   out_image_V_ce0;
output   out_image_V_we0;
output  [47:0] out_image_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_image_0_V_ce0;
reg in_image_1_V_ce0;
reg in_image_2_V_ce0;
reg in_image_3_V_ce0;
reg in_image_4_V_ce0;
reg in_image_5_V_ce0;
reg in_image_6_V_ce0;
reg A_V_read;
reg B_V_read;
reg out_image_V_ce0;
reg out_image_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    A_V_blk_n;
reg    B_V_blk_n;
wire  signed [36:0] OP2_V_i_fu_218_p1;
reg  signed [36:0] OP2_V_i_reg_406;
reg    ap_block_state1;
wire  signed [36:0] tmp_56_cast_i_fu_230_p1;
reg  signed [36:0] tmp_56_cast_i_reg_411;
wire   [4:0] j_fu_240_p2;
reg   [4:0] j_reg_419;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_78_fu_270_p2;
reg   [10:0] tmp_78_reg_424;
wire   [0:0] tmp_i_fu_234_p2;
wire   [31:0] arrayNo_cast_i_fu_286_p1;
reg   [31:0] arrayNo_cast_i_reg_429;
wire   [7:0] tmp_81_fu_318_p2;
reg   [7:0] tmp_81_reg_434;
wire   [4:0] k_fu_330_p2;
reg   [4:0] k_reg_442;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_53_i_fu_324_p2;
wire   [10:0] tmp_83_fu_360_p2;
reg   [10:0] tmp_83_reg_482;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire  signed [36:0] grp_fu_400_p3;
reg  signed [36:0] p_Val2_i_74_reg_527;
wire    ap_CS_fsm_state6;
reg   [4:0] j_i_reg_196;
reg   [4:0] k_i_reg_207;
wire    ap_CS_fsm_state7;
wire  signed [63:0] tmp_99_cast_fu_349_p1;
wire  signed [63:0] tmp_100_cast_fu_388_p1;
wire   [33:0] tmp_56_i_fu_222_p3;
wire   [9:0] tmp_s_fu_246_p3;
wire   [6:0] tmp_77_fu_258_p3;
wire   [10:0] p_shl2_cast_fu_254_p1;
wire   [10:0] p_shl3_cast_fu_266_p1;
wire   [2:0] arrayNo_i_fu_276_p4;
wire   [1:0] tmp_20_fu_290_p1;
wire   [6:0] tmp_79_fu_294_p3;
wire   [3:0] tmp_80_fu_306_p3;
wire   [7:0] p_shl_cast_fu_302_p1;
wire   [7:0] p_shl1_cast_fu_314_p1;
wire   [7:0] tmp_54_i_cast_fu_340_p1;
wire   [7:0] tmp_82_fu_344_p2;
wire   [10:0] tmp_54_i_cast1_fu_336_p1;
wire  signed [24:0] grp_fu_365_p9;
wire  signed [17:0] grp_fu_400_p1;
wire  signed [33:0] grp_fu_400_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

CNN_mux_732_25_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .din2_WIDTH( 25 ),
    .din3_WIDTH( 25 ),
    .din4_WIDTH( 25 ),
    .din5_WIDTH( 25 ),
    .din6_WIDTH( 25 ),
    .din7_WIDTH( 32 ),
    .dout_WIDTH( 25 ))
CNN_mux_732_25_2_1_U117(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_image_0_V_q0),
    .din1(in_image_1_V_q0),
    .din2(in_image_2_V_q0),
    .din3(in_image_3_V_q0),
    .din4(in_image_4_V_q0),
    .din5(in_image_5_V_q0),
    .din6(in_image_6_V_q0),
    .din7(arrayNo_cast_i_reg_429),
    .ce(1'b1),
    .dout(grp_fu_365_p9)
);

CNN_mac_muladd_25dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 37 ))
CNN_mac_muladd_25dEe_U118(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_365_p9),
    .din1(grp_fu_400_p1),
    .din2(grp_fu_400_p2),
    .ce(1'b1),
    .dout(grp_fu_400_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_234_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_53_i_fu_324_p2 == 1'd1))) begin
        j_i_reg_196 <= j_reg_419;
    end else if ((~((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_i_reg_196 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_i_reg_207 <= k_reg_442;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_234_p2 == 1'd0))) begin
        k_i_reg_207 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        OP2_V_i_reg_406 <= OP2_V_i_fu_218_p1;
        tmp_56_cast_i_reg_411[36 : 16] <= tmp_56_cast_i_fu_230_p1[36 : 16];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_234_p2 == 1'd0))) begin
        arrayNo_cast_i_reg_429[2 : 0] <= arrayNo_cast_i_fu_286_p1[2 : 0];
        tmp_78_reg_424[10 : 2] <= tmp_78_fu_270_p2[10 : 2];
        tmp_81_reg_434[7 : 2] <= tmp_81_fu_318_p2[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_419 <= j_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_442 <= k_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_i_74_reg_527 <= grp_fu_400_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_53_i_fu_324_p2 == 1'd0))) begin
        tmp_83_reg_482 <= tmp_83_fu_360_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        A_V_blk_n = A_V_empty_n;
    end else begin
        A_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        A_V_read = 1'b1;
    end else begin
        A_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        B_V_blk_n = B_V_empty_n;
    end else begin
        B_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        B_V_read = 1'b1;
    end else begin
        B_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_234_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_234_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_0_V_ce0 = 1'b1;
    end else begin
        in_image_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_1_V_ce0 = 1'b1;
    end else begin
        in_image_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_2_V_ce0 = 1'b1;
    end else begin
        in_image_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_3_V_ce0 = 1'b1;
    end else begin
        in_image_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_4_V_ce0 = 1'b1;
    end else begin
        in_image_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_5_V_ce0 = 1'b1;
    end else begin
        in_image_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_6_V_ce0 = 1'b1;
    end else begin
        in_image_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_V_ce0 = 1'b1;
    end else begin
        out_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_V_we0 = 1'b1;
    end else begin
        out_image_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_234_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_53_i_fu_324_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP2_V_i_fu_218_p1 = $signed(A_V_dout);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign arrayNo_cast_i_fu_286_p1 = arrayNo_i_fu_276_p4;

assign arrayNo_i_fu_276_p4 = {{j_i_reg_196[4:2]}};

assign grp_fu_400_p1 = OP2_V_i_reg_406;

assign grp_fu_400_p2 = tmp_56_cast_i_reg_411;

assign in_image_0_V_address0 = tmp_99_cast_fu_349_p1;

assign in_image_1_V_address0 = tmp_99_cast_fu_349_p1;

assign in_image_2_V_address0 = tmp_99_cast_fu_349_p1;

assign in_image_3_V_address0 = tmp_99_cast_fu_349_p1;

assign in_image_4_V_address0 = tmp_99_cast_fu_349_p1;

assign in_image_5_V_address0 = tmp_99_cast_fu_349_p1;

assign in_image_6_V_address0 = tmp_99_cast_fu_349_p1;

assign j_fu_240_p2 = (j_i_reg_196 + 5'd1);

assign k_fu_330_p2 = (k_i_reg_207 + 5'd1);

assign out_image_V_address0 = tmp_100_cast_fu_388_p1;

assign out_image_V_d0 = {{p_Val2_i_74_reg_527}, {11'd0}};

assign p_shl1_cast_fu_314_p1 = tmp_80_fu_306_p3;

assign p_shl2_cast_fu_254_p1 = tmp_s_fu_246_p3;

assign p_shl3_cast_fu_266_p1 = tmp_77_fu_258_p3;

assign p_shl_cast_fu_302_p1 = tmp_79_fu_294_p3;

assign tmp_100_cast_fu_388_p1 = $signed(tmp_83_reg_482);

assign tmp_20_fu_290_p1 = j_i_reg_196[1:0];

assign tmp_53_i_fu_324_p2 = ((k_i_reg_207 == 5'd28) ? 1'b1 : 1'b0);

assign tmp_54_i_cast1_fu_336_p1 = k_i_reg_207;

assign tmp_54_i_cast_fu_340_p1 = k_i_reg_207;

assign tmp_56_cast_i_fu_230_p1 = $signed(tmp_56_i_fu_222_p3);

assign tmp_56_i_fu_222_p3 = {{B_V_dout}, {16'd0}};

assign tmp_77_fu_258_p3 = {{j_i_reg_196}, {2'd0}};

assign tmp_78_fu_270_p2 = (p_shl2_cast_fu_254_p1 - p_shl3_cast_fu_266_p1);

assign tmp_79_fu_294_p3 = {{tmp_20_fu_290_p1}, {5'd0}};

assign tmp_80_fu_306_p3 = {{tmp_20_fu_290_p1}, {2'd0}};

assign tmp_81_fu_318_p2 = (p_shl_cast_fu_302_p1 - p_shl1_cast_fu_314_p1);

assign tmp_82_fu_344_p2 = (tmp_54_i_cast_fu_340_p1 + tmp_81_reg_434);

assign tmp_83_fu_360_p2 = (tmp_54_i_cast1_fu_336_p1 + tmp_78_reg_424);

assign tmp_99_cast_fu_349_p1 = $signed(tmp_82_fu_344_p2);

assign tmp_i_fu_234_p2 = ((j_i_reg_196 == 5'd28) ? 1'b1 : 1'b0);

assign tmp_s_fu_246_p3 = {{j_i_reg_196}, {5'd0}};

always @ (posedge ap_clk) begin
    tmp_56_cast_i_reg_411[15:0] <= 16'b0000000000000000;
    tmp_78_reg_424[1:0] <= 2'b00;
    arrayNo_cast_i_reg_429[31:3] <= 29'b00000000000000000000000000000;
    tmp_81_reg_434[1:0] <= 2'b00;
end

endmodule //batch_norm
