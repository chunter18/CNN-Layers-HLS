// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module efficient_pad_n_1cha (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_image_V_address0,
        in_image_V_ce0,
        in_image_V_q0,
        out_image_0_V_address0,
        out_image_0_V_ce0,
        out_image_0_V_we0,
        out_image_0_V_d0,
        out_image_0_V_address1,
        out_image_0_V_ce1,
        out_image_0_V_we1,
        out_image_0_V_d1,
        out_image_1_V_address0,
        out_image_1_V_ce0,
        out_image_1_V_we0,
        out_image_1_V_d0,
        out_image_1_V_address1,
        out_image_1_V_ce1,
        out_image_1_V_we1,
        out_image_1_V_d1,
        out_image_2_V_address0,
        out_image_2_V_ce0,
        out_image_2_V_we0,
        out_image_2_V_d0,
        out_image_2_V_address1,
        out_image_2_V_ce1,
        out_image_2_V_we1,
        out_image_2_V_d1,
        out_image_3_V_address0,
        out_image_3_V_ce0,
        out_image_3_V_we0,
        out_image_3_V_d0,
        out_image_3_V_address1,
        out_image_3_V_ce1,
        out_image_3_V_we1,
        out_image_3_V_d1,
        out_image_4_V_address0,
        out_image_4_V_ce0,
        out_image_4_V_we0,
        out_image_4_V_d0,
        out_image_4_V_address1,
        out_image_4_V_ce1,
        out_image_4_V_we1,
        out_image_4_V_d1,
        out_image_5_V_address0,
        out_image_5_V_ce0,
        out_image_5_V_we0,
        out_image_5_V_d0,
        out_image_5_V_address1,
        out_image_5_V_ce1,
        out_image_5_V_we1,
        out_image_5_V_d1,
        out_image_6_V_address0,
        out_image_6_V_ce0,
        out_image_6_V_we0,
        out_image_6_V_d0,
        out_image_6_V_address1,
        out_image_6_V_ce1,
        out_image_6_V_we1,
        out_image_6_V_d1,
        out_image_7_V_address0,
        out_image_7_V_ce0,
        out_image_7_V_we0,
        out_image_7_V_d0,
        out_image_7_V_address1,
        out_image_7_V_ce1,
        out_image_7_V_we1,
        out_image_7_V_d1,
        out_image_8_V_address0,
        out_image_8_V_ce0,
        out_image_8_V_we0,
        out_image_8_V_d0,
        out_image_8_V_address1,
        out_image_8_V_ce1,
        out_image_8_V_we1,
        out_image_8_V_d1,
        out_image_9_V_address0,
        out_image_9_V_ce0,
        out_image_9_V_we0,
        out_image_9_V_d0,
        out_image_9_V_address1,
        out_image_9_V_ce1,
        out_image_9_V_we1,
        out_image_9_V_d1,
        out_image_10_V_address0,
        out_image_10_V_ce0,
        out_image_10_V_we0,
        out_image_10_V_d0,
        out_image_10_V_address1,
        out_image_10_V_ce1,
        out_image_10_V_we1,
        out_image_10_V_d1,
        out_image_11_V_address0,
        out_image_11_V_ce0,
        out_image_11_V_we0,
        out_image_11_V_d0,
        out_image_11_V_address1,
        out_image_11_V_ce1,
        out_image_11_V_we1,
        out_image_11_V_d1,
        out_image_12_V_address0,
        out_image_12_V_ce0,
        out_image_12_V_we0,
        out_image_12_V_d0,
        out_image_12_V_address1,
        out_image_12_V_ce1,
        out_image_12_V_we1,
        out_image_12_V_d1,
        out_image_13_V_address0,
        out_image_13_V_ce0,
        out_image_13_V_we0,
        out_image_13_V_d0,
        out_image_13_V_address1,
        out_image_13_V_ce1,
        out_image_13_V_we1,
        out_image_13_V_d1,
        out_image_14_V_address0,
        out_image_14_V_ce0,
        out_image_14_V_we0,
        out_image_14_V_d0,
        out_image_14_V_address1,
        out_image_14_V_ce1,
        out_image_14_V_we1,
        out_image_14_V_d1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] in_image_V_address0;
output   in_image_V_ce0;
input  [17:0] in_image_V_q0;
output  [5:0] out_image_0_V_address0;
output   out_image_0_V_ce0;
output   out_image_0_V_we0;
output  [17:0] out_image_0_V_d0;
output  [5:0] out_image_0_V_address1;
output   out_image_0_V_ce1;
output   out_image_0_V_we1;
output  [17:0] out_image_0_V_d1;
output  [5:0] out_image_1_V_address0;
output   out_image_1_V_ce0;
output   out_image_1_V_we0;
output  [17:0] out_image_1_V_d0;
output  [5:0] out_image_1_V_address1;
output   out_image_1_V_ce1;
output   out_image_1_V_we1;
output  [17:0] out_image_1_V_d1;
output  [5:0] out_image_2_V_address0;
output   out_image_2_V_ce0;
output   out_image_2_V_we0;
output  [17:0] out_image_2_V_d0;
output  [5:0] out_image_2_V_address1;
output   out_image_2_V_ce1;
output   out_image_2_V_we1;
output  [17:0] out_image_2_V_d1;
output  [5:0] out_image_3_V_address0;
output   out_image_3_V_ce0;
output   out_image_3_V_we0;
output  [17:0] out_image_3_V_d0;
output  [5:0] out_image_3_V_address1;
output   out_image_3_V_ce1;
output   out_image_3_V_we1;
output  [17:0] out_image_3_V_d1;
output  [5:0] out_image_4_V_address0;
output   out_image_4_V_ce0;
output   out_image_4_V_we0;
output  [17:0] out_image_4_V_d0;
output  [5:0] out_image_4_V_address1;
output   out_image_4_V_ce1;
output   out_image_4_V_we1;
output  [17:0] out_image_4_V_d1;
output  [5:0] out_image_5_V_address0;
output   out_image_5_V_ce0;
output   out_image_5_V_we0;
output  [17:0] out_image_5_V_d0;
output  [5:0] out_image_5_V_address1;
output   out_image_5_V_ce1;
output   out_image_5_V_we1;
output  [17:0] out_image_5_V_d1;
output  [5:0] out_image_6_V_address0;
output   out_image_6_V_ce0;
output   out_image_6_V_we0;
output  [17:0] out_image_6_V_d0;
output  [5:0] out_image_6_V_address1;
output   out_image_6_V_ce1;
output   out_image_6_V_we1;
output  [17:0] out_image_6_V_d1;
output  [5:0] out_image_7_V_address0;
output   out_image_7_V_ce0;
output   out_image_7_V_we0;
output  [17:0] out_image_7_V_d0;
output  [5:0] out_image_7_V_address1;
output   out_image_7_V_ce1;
output   out_image_7_V_we1;
output  [17:0] out_image_7_V_d1;
output  [5:0] out_image_8_V_address0;
output   out_image_8_V_ce0;
output   out_image_8_V_we0;
output  [17:0] out_image_8_V_d0;
output  [5:0] out_image_8_V_address1;
output   out_image_8_V_ce1;
output   out_image_8_V_we1;
output  [17:0] out_image_8_V_d1;
output  [5:0] out_image_9_V_address0;
output   out_image_9_V_ce0;
output   out_image_9_V_we0;
output  [17:0] out_image_9_V_d0;
output  [5:0] out_image_9_V_address1;
output   out_image_9_V_ce1;
output   out_image_9_V_we1;
output  [17:0] out_image_9_V_d1;
output  [5:0] out_image_10_V_address0;
output   out_image_10_V_ce0;
output   out_image_10_V_we0;
output  [17:0] out_image_10_V_d0;
output  [5:0] out_image_10_V_address1;
output   out_image_10_V_ce1;
output   out_image_10_V_we1;
output  [17:0] out_image_10_V_d1;
output  [5:0] out_image_11_V_address0;
output   out_image_11_V_ce0;
output   out_image_11_V_we0;
output  [17:0] out_image_11_V_d0;
output  [5:0] out_image_11_V_address1;
output   out_image_11_V_ce1;
output   out_image_11_V_we1;
output  [17:0] out_image_11_V_d1;
output  [5:0] out_image_12_V_address0;
output   out_image_12_V_ce0;
output   out_image_12_V_we0;
output  [17:0] out_image_12_V_d0;
output  [5:0] out_image_12_V_address1;
output   out_image_12_V_ce1;
output   out_image_12_V_we1;
output  [17:0] out_image_12_V_d1;
output  [5:0] out_image_13_V_address0;
output   out_image_13_V_ce0;
output   out_image_13_V_we0;
output  [17:0] out_image_13_V_d0;
output  [5:0] out_image_13_V_address1;
output   out_image_13_V_ce1;
output   out_image_13_V_we1;
output  [17:0] out_image_13_V_d1;
output  [5:0] out_image_14_V_address0;
output   out_image_14_V_ce0;
output   out_image_14_V_we0;
output  [17:0] out_image_14_V_d0;
output  [5:0] out_image_14_V_address1;
output   out_image_14_V_ce1;
output   out_image_14_V_we1;
output  [17:0] out_image_14_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_image_V_ce0;
reg[5:0] out_image_0_V_address0;
reg out_image_0_V_ce0;
reg out_image_0_V_we0;
reg[5:0] out_image_0_V_address1;
reg out_image_0_V_ce1;
reg out_image_0_V_we1;
reg[17:0] out_image_0_V_d1;
reg[5:0] out_image_1_V_address0;
reg out_image_1_V_ce0;
reg out_image_1_V_we0;
reg[17:0] out_image_1_V_d0;
reg out_image_1_V_ce1;
reg out_image_1_V_we1;
reg[5:0] out_image_2_V_address0;
reg out_image_2_V_ce0;
reg out_image_2_V_we0;
reg[17:0] out_image_2_V_d0;
reg out_image_2_V_ce1;
reg out_image_2_V_we1;
reg[5:0] out_image_3_V_address0;
reg out_image_3_V_ce0;
reg out_image_3_V_we0;
reg[17:0] out_image_3_V_d0;
reg out_image_3_V_ce1;
reg out_image_3_V_we1;
reg[5:0] out_image_4_V_address0;
reg out_image_4_V_ce0;
reg out_image_4_V_we0;
reg[17:0] out_image_4_V_d0;
reg out_image_4_V_ce1;
reg out_image_4_V_we1;
reg[5:0] out_image_5_V_address0;
reg out_image_5_V_ce0;
reg out_image_5_V_we0;
reg[17:0] out_image_5_V_d0;
reg out_image_5_V_ce1;
reg out_image_5_V_we1;
reg[5:0] out_image_6_V_address0;
reg out_image_6_V_ce0;
reg out_image_6_V_we0;
reg[17:0] out_image_6_V_d0;
reg out_image_6_V_ce1;
reg out_image_6_V_we1;
reg[5:0] out_image_7_V_address0;
reg out_image_7_V_ce0;
reg out_image_7_V_we0;
reg[17:0] out_image_7_V_d0;
reg out_image_7_V_ce1;
reg out_image_7_V_we1;
reg[5:0] out_image_8_V_address0;
reg out_image_8_V_ce0;
reg out_image_8_V_we0;
reg[17:0] out_image_8_V_d0;
reg out_image_8_V_ce1;
reg out_image_8_V_we1;
reg[5:0] out_image_9_V_address0;
reg out_image_9_V_ce0;
reg out_image_9_V_we0;
reg[17:0] out_image_9_V_d0;
reg out_image_9_V_ce1;
reg out_image_9_V_we1;
reg[5:0] out_image_10_V_address0;
reg out_image_10_V_ce0;
reg out_image_10_V_we0;
reg[17:0] out_image_10_V_d0;
reg out_image_10_V_ce1;
reg out_image_10_V_we1;
reg[5:0] out_image_11_V_address0;
reg out_image_11_V_ce0;
reg out_image_11_V_we0;
reg[17:0] out_image_11_V_d0;
reg out_image_11_V_ce1;
reg out_image_11_V_we1;
reg[5:0] out_image_12_V_address0;
reg out_image_12_V_ce0;
reg out_image_12_V_we0;
reg[17:0] out_image_12_V_d0;
reg out_image_12_V_ce1;
reg out_image_12_V_we1;
reg[5:0] out_image_13_V_address0;
reg out_image_13_V_ce0;
reg out_image_13_V_we0;
reg[17:0] out_image_13_V_d0;
reg out_image_13_V_ce1;
reg out_image_13_V_we1;
reg[5:0] out_image_14_V_address0;
reg out_image_14_V_ce0;
reg out_image_14_V_we0;
reg[5:0] out_image_14_V_address1;
reg out_image_14_V_ce1;
reg out_image_14_V_we1;
reg[17:0] out_image_14_V_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_6_fu_686_p2;
reg   [4:0] i_6_reg_892;
wire    ap_CS_fsm_state2;
wire   [3:0] arrayNo4_fu_712_p4;
reg   [3:0] arrayNo4_reg_897;
wire   [0:0] tmp_fu_680_p2;
reg   [5:0] out_image_0_V_addr_4_reg_901;
reg   [5:0] out_image_14_V_addr_2_reg_906;
wire   [4:0] i_7_fu_778_p2;
reg   [4:0] i_7_reg_914;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_56_fu_812_p2;
reg   [10:0] tmp_56_reg_919;
wire   [0:0] tmp_35_fu_772_p2;
reg   [3:0] arrayNo_reg_924;
wire   [5:0] tmp_66_cast_fu_828_p3;
reg   [5:0] tmp_66_cast_reg_928;
wire   [4:0] j_6_fu_842_p2;
reg   [4:0] j_6_reg_936;
wire    ap_CS_fsm_state6;
wire   [5:0] tmp_57_fu_852_p2;
reg   [5:0] tmp_57_reg_941;
wire   [0:0] tmp_38_fu_836_p2;
reg   [5:0] out_image_0_V_addr_6_reg_951;
wire    ap_CS_fsm_state7;
reg   [5:0] out_image_1_V_addr_4_reg_956;
reg   [5:0] out_image_2_V_addr_4_reg_961;
reg   [5:0] out_image_3_V_addr_5_reg_966;
reg   [5:0] out_image_4_V_addr_2_reg_971;
reg   [5:0] out_image_5_V_addr_2_reg_976;
reg   [5:0] out_image_6_V_addr_2_reg_981;
reg   [5:0] out_image_7_V_addr_2_reg_986;
reg   [5:0] out_image_8_V_addr_2_reg_991;
reg   [5:0] out_image_9_V_addr_2_reg_996;
reg   [5:0] out_image_10_V_addr_2_reg_1001;
reg   [5:0] out_image_11_V_addr_2_reg_1006;
reg   [5:0] out_image_12_V_addr_2_reg_1011;
reg   [5:0] out_image_13_V_addr_2_reg_1016;
reg   [5:0] out_image_14_V_addr_3_reg_1021;
reg   [17:0] in_image_V_load_reg_1026;
reg   [4:0] i_reg_647;
reg    ap_block_state1;
wire    ap_CS_fsm_state4;
reg   [4:0] i_1_reg_658;
reg   [4:0] j_reg_669;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_s_fu_692_p1;
wire   [63:0] tmp_60_cast_fu_707_p1;
wire   [63:0] tmp_61_cast_fu_726_p3;
wire   [63:0] tmp_62_cast_fu_749_p3;
wire  signed [63:0] tmp_68_cast_fu_866_p1;
wire   [63:0] tmp_67_cast_fu_871_p1;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_cast_fu_697_p1;
wire   [5:0] tmp_53_fu_701_p2;
wire   [0:0] tmp_13_fu_722_p1;
wire   [9:0] tmp_54_fu_788_p3;
wire   [6:0] tmp_55_fu_800_p3;
wire   [10:0] p_shl_cast_fu_796_p1;
wire   [10:0] p_shl1_cast_fu_808_p1;
wire   [0:0] tmp_14_fu_784_p1;
wire   [5:0] tmp_39_cast_fu_848_p1;
wire   [10:0] tmp_40_cast_fu_857_p1;
wire   [10:0] tmp_58_fu_861_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_35_fu_772_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_658 <= 5'd0;
    end else if (((tmp_38_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_1_reg_658 <= i_7_reg_914;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_647 <= i_6_reg_892;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_647 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_669 <= j_6_reg_936;
    end else if (((tmp_35_fu_772_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_669 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_680_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        arrayNo4_reg_897 <= {{i_reg_647[4:1]}};
        out_image_0_V_addr_4_reg_901[4 : 1] <= tmp_61_cast_fu_726_p3[4 : 1];
        out_image_14_V_addr_2_reg_906[2 : 1] <= tmp_62_cast_fu_749_p3[2 : 1];
out_image_14_V_addr_2_reg_906[5] <= tmp_62_cast_fu_749_p3[5];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_35_fu_772_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        arrayNo_reg_924 <= {{i_7_fu_778_p2[4:1]}};
        tmp_56_reg_919[10 : 2] <= tmp_56_fu_812_p2[10 : 2];
        tmp_66_cast_reg_928[4 : 1] <= tmp_66_cast_fu_828_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_6_reg_892 <= i_6_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_7_reg_914 <= i_7_fu_778_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_image_V_load_reg_1026 <= in_image_V_q0;
        out_image_0_V_addr_6_reg_951 <= tmp_67_cast_fu_871_p1;
        out_image_10_V_addr_2_reg_1001 <= tmp_67_cast_fu_871_p1;
        out_image_11_V_addr_2_reg_1006 <= tmp_67_cast_fu_871_p1;
        out_image_12_V_addr_2_reg_1011 <= tmp_67_cast_fu_871_p1;
        out_image_13_V_addr_2_reg_1016 <= tmp_67_cast_fu_871_p1;
        out_image_14_V_addr_3_reg_1021 <= tmp_67_cast_fu_871_p1;
        out_image_1_V_addr_4_reg_956 <= tmp_67_cast_fu_871_p1;
        out_image_2_V_addr_4_reg_961 <= tmp_67_cast_fu_871_p1;
        out_image_3_V_addr_5_reg_966 <= tmp_67_cast_fu_871_p1;
        out_image_4_V_addr_2_reg_971 <= tmp_67_cast_fu_871_p1;
        out_image_5_V_addr_2_reg_976 <= tmp_67_cast_fu_871_p1;
        out_image_6_V_addr_2_reg_981 <= tmp_67_cast_fu_871_p1;
        out_image_7_V_addr_2_reg_986 <= tmp_67_cast_fu_871_p1;
        out_image_8_V_addr_2_reg_991 <= tmp_67_cast_fu_871_p1;
        out_image_9_V_addr_2_reg_996 <= tmp_67_cast_fu_871_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_6_reg_936 <= j_6_fu_842_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_38_fu_836_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_57_reg_941 <= tmp_57_fu_852_p2;
    end
end

always @ (*) begin
    if (((tmp_35_fu_772_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_35_fu_772_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_image_V_ce0 = 1'b1;
    end else begin
        in_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_image_0_V_address0 = out_image_0_V_addr_4_reg_901;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_0_V_address0 = tmp_s_fu_692_p1;
    end else begin
        out_image_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_0_V_address1 = out_image_0_V_addr_6_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_0_V_address1 = tmp_62_cast_fu_749_p3;
    end else begin
        out_image_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_0_V_ce0 = 1'b1;
    end else begin
        out_image_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_0_V_ce1 = 1'b1;
    end else begin
        out_image_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_0_V_d1 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_0_V_d1 = 18'd0;
    end else begin
        out_image_0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo4_reg_897 == 4'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_fu_680_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_0_V_we0 = 1'b1;
    end else begin
        out_image_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd0) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_0_V_we1 = 1'b1;
    end else begin
        out_image_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_10_V_address0 = out_image_10_V_addr_2_reg_1001;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_10_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_10_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_10_V_ce0 = 1'b1;
    end else begin
        out_image_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_10_V_ce1 = 1'b1;
    end else begin
        out_image_10_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_10_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_10_V_d0 = 18'd0;
    end else begin
        out_image_10_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd10) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd10) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_10_V_we0 = 1'b1;
    end else begin
        out_image_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd10) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_10_V_we1 = 1'b1;
    end else begin
        out_image_10_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_11_V_address0 = out_image_11_V_addr_2_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_11_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_11_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_11_V_ce0 = 1'b1;
    end else begin
        out_image_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_11_V_ce1 = 1'b1;
    end else begin
        out_image_11_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_11_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_11_V_d0 = 18'd0;
    end else begin
        out_image_11_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd11) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd11) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_11_V_we0 = 1'b1;
    end else begin
        out_image_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd11) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_11_V_we1 = 1'b1;
    end else begin
        out_image_11_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_12_V_address0 = out_image_12_V_addr_2_reg_1011;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_12_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_12_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_12_V_ce0 = 1'b1;
    end else begin
        out_image_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_12_V_ce1 = 1'b1;
    end else begin
        out_image_12_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_12_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_12_V_d0 = 18'd0;
    end else begin
        out_image_12_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd12) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd12) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_12_V_we0 = 1'b1;
    end else begin
        out_image_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd12) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_12_V_we1 = 1'b1;
    end else begin
        out_image_12_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_13_V_address0 = out_image_13_V_addr_2_reg_1016;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_13_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_13_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_13_V_ce0 = 1'b1;
    end else begin
        out_image_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_13_V_ce1 = 1'b1;
    end else begin
        out_image_13_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_13_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_13_V_d0 = 18'd0;
    end else begin
        out_image_13_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd13) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd13) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_13_V_we0 = 1'b1;
    end else begin
        out_image_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd13) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_13_V_we1 = 1'b1;
    end else begin
        out_image_13_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_image_14_V_address0 = out_image_14_V_addr_2_reg_906;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_14_V_address0 = tmp_60_cast_fu_707_p1;
    end else begin
        out_image_14_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_14_V_address1 = out_image_14_V_addr_3_reg_1021;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_14_V_address1 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_14_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_14_V_ce0 = 1'b1;
    end else begin
        out_image_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_14_V_ce1 = 1'b1;
    end else begin
        out_image_14_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_14_V_d1 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_14_V_d1 = 18'd0;
    end else begin
        out_image_14_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & ((arrayNo4_reg_897 == 4'd15) | (arrayNo4_reg_897 == 4'd14))) | ((tmp_fu_680_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_14_V_we0 = 1'b1;
    end else begin
        out_image_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & ((arrayNo_reg_924 == 4'd15) | (arrayNo_reg_924 == 4'd14))) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd15)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd14)))))) begin
        out_image_14_V_we1 = 1'b1;
    end else begin
        out_image_14_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_1_V_address0 = out_image_1_V_addr_4_reg_956;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_1_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_1_V_ce0 = 1'b1;
    end else begin
        out_image_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_1_V_ce1 = 1'b1;
    end else begin
        out_image_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_1_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_1_V_d0 = 18'd0;
    end else begin
        out_image_1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd1) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_1_V_we0 = 1'b1;
    end else begin
        out_image_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_1_V_we1 = 1'b1;
    end else begin
        out_image_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_2_V_address0 = out_image_2_V_addr_4_reg_961;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_2_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_2_V_ce0 = 1'b1;
    end else begin
        out_image_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_2_V_ce1 = 1'b1;
    end else begin
        out_image_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_2_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_2_V_d0 = 18'd0;
    end else begin
        out_image_2_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd2) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd2) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_2_V_we0 = 1'b1;
    end else begin
        out_image_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_2_V_we1 = 1'b1;
    end else begin
        out_image_2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_3_V_address0 = out_image_3_V_addr_5_reg_966;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_3_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_3_V_ce0 = 1'b1;
    end else begin
        out_image_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_3_V_ce1 = 1'b1;
    end else begin
        out_image_3_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_3_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_3_V_d0 = 18'd0;
    end else begin
        out_image_3_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd3) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd3) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_3_V_we0 = 1'b1;
    end else begin
        out_image_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_3_V_we1 = 1'b1;
    end else begin
        out_image_3_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_4_V_address0 = out_image_4_V_addr_2_reg_971;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_4_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_4_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_4_V_ce0 = 1'b1;
    end else begin
        out_image_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_4_V_ce1 = 1'b1;
    end else begin
        out_image_4_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_4_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_4_V_d0 = 18'd0;
    end else begin
        out_image_4_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd4) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd4) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_4_V_we0 = 1'b1;
    end else begin
        out_image_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd4) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_4_V_we1 = 1'b1;
    end else begin
        out_image_4_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_5_V_address0 = out_image_5_V_addr_2_reg_976;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_5_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_5_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_5_V_ce0 = 1'b1;
    end else begin
        out_image_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_5_V_ce1 = 1'b1;
    end else begin
        out_image_5_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_5_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_5_V_d0 = 18'd0;
    end else begin
        out_image_5_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd5) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd5) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_5_V_we0 = 1'b1;
    end else begin
        out_image_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd5) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_5_V_we1 = 1'b1;
    end else begin
        out_image_5_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_6_V_address0 = out_image_6_V_addr_2_reg_981;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_6_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_6_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_6_V_ce0 = 1'b1;
    end else begin
        out_image_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_6_V_ce1 = 1'b1;
    end else begin
        out_image_6_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_6_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_6_V_d0 = 18'd0;
    end else begin
        out_image_6_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd6) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd6) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_6_V_we0 = 1'b1;
    end else begin
        out_image_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd6) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_6_V_we1 = 1'b1;
    end else begin
        out_image_6_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_7_V_address0 = out_image_7_V_addr_2_reg_986;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_7_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_7_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_7_V_ce0 = 1'b1;
    end else begin
        out_image_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_7_V_ce1 = 1'b1;
    end else begin
        out_image_7_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_7_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_7_V_d0 = 18'd0;
    end else begin
        out_image_7_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd7) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd7) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_7_V_we0 = 1'b1;
    end else begin
        out_image_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd7) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_7_V_we1 = 1'b1;
    end else begin
        out_image_7_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_8_V_address0 = out_image_8_V_addr_2_reg_991;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_8_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_8_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_8_V_ce0 = 1'b1;
    end else begin
        out_image_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_8_V_ce1 = 1'b1;
    end else begin
        out_image_8_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_8_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_8_V_d0 = 18'd0;
    end else begin
        out_image_8_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd8) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd8) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_8_V_we0 = 1'b1;
    end else begin
        out_image_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd8) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_8_V_we1 = 1'b1;
    end else begin
        out_image_8_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_9_V_address0 = out_image_9_V_addr_2_reg_996;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_9_V_address0 = tmp_61_cast_fu_726_p3;
    end else begin
        out_image_9_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_image_9_V_ce0 = 1'b1;
    end else begin
        out_image_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_9_V_ce1 = 1'b1;
    end else begin
        out_image_9_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_9_V_d0 = in_image_V_load_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_9_V_d0 = 18'd0;
    end else begin
        out_image_9_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((arrayNo_reg_924 == 4'd9) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd9) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_9_V_we0 = 1'b1;
    end else begin
        out_image_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd9) & (1'b1 == ap_CS_fsm_state2))) begin
        out_image_9_V_we1 = 1'b1;
    end else begin
        out_image_9_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((1'b1 == ap_CS_fsm_state2) & (((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd1)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd2)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd3)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd4)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd5)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd6)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd7)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd8)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd9)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd10)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd11)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd12)) | ((tmp_fu_680_p2 == 1'd0) & (arrayNo4_fu_712_p4 == 4'd13))))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_35_fu_772_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_38_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign arrayNo4_fu_712_p4 = {{i_reg_647[4:1]}};

assign i_6_fu_686_p2 = (i_reg_647 + 5'd1);

assign i_7_fu_778_p2 = (i_1_reg_658 + 5'd1);

assign in_image_V_address0 = tmp_68_cast_fu_866_p1;

assign j_6_fu_842_p2 = (j_reg_669 + 5'd1);

assign out_image_0_V_d0 = 18'd0;

assign out_image_10_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_10_V_d1 = 18'd0;

assign out_image_11_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_11_V_d1 = 18'd0;

assign out_image_12_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_12_V_d1 = 18'd0;

assign out_image_13_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_13_V_d1 = 18'd0;

assign out_image_14_V_d0 = 18'd0;

assign out_image_1_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_1_V_d1 = 18'd0;

assign out_image_2_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_2_V_d1 = 18'd0;

assign out_image_3_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_3_V_d1 = 18'd0;

assign out_image_4_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_4_V_d1 = 18'd0;

assign out_image_5_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_5_V_d1 = 18'd0;

assign out_image_6_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_6_V_d1 = 18'd0;

assign out_image_7_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_7_V_d1 = 18'd0;

assign out_image_8_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_8_V_d1 = 18'd0;

assign out_image_9_V_address1 = tmp_62_cast_fu_749_p3;

assign out_image_9_V_d1 = 18'd0;

assign p_shl1_cast_fu_808_p1 = tmp_55_fu_800_p3;

assign p_shl_cast_fu_796_p1 = tmp_54_fu_788_p3;

assign tmp_13_fu_722_p1 = i_reg_647[0:0];

assign tmp_14_fu_784_p1 = i_1_reg_658[0:0];

assign tmp_35_fu_772_p2 = ((i_1_reg_658 == 5'd28) ? 1'b1 : 1'b0);

assign tmp_38_fu_836_p2 = ((j_reg_669 == 5'd28) ? 1'b1 : 1'b0);

assign tmp_39_cast_fu_848_p1 = j_6_fu_842_p2;

assign tmp_40_cast_fu_857_p1 = j_reg_669;

assign tmp_53_fu_701_p2 = (6'd30 + tmp_cast_fu_697_p1);

assign tmp_54_fu_788_p3 = {{i_1_reg_658}, {5'd0}};

assign tmp_55_fu_800_p3 = {{i_1_reg_658}, {2'd0}};

assign tmp_56_fu_812_p2 = (p_shl_cast_fu_796_p1 - p_shl1_cast_fu_808_p1);

assign tmp_57_fu_852_p2 = (tmp_39_cast_fu_848_p1 + tmp_66_cast_reg_928);

assign tmp_58_fu_861_p2 = (tmp_40_cast_fu_857_p1 + tmp_56_reg_919);

assign tmp_60_cast_fu_707_p1 = tmp_53_fu_701_p2;

assign tmp_61_cast_fu_726_p3 = ((tmp_13_fu_722_p1[0:0] === 1'b1) ? 64'd30 : 64'd0);

assign tmp_62_cast_fu_749_p3 = ((tmp_13_fu_722_p1[0:0] === 1'b1) ? 64'd59 : 64'd29);

assign tmp_66_cast_fu_828_p3 = ((tmp_14_fu_784_p1[0:0] === 1'b1) ? 6'd0 : 6'd30);

assign tmp_67_cast_fu_871_p1 = tmp_57_reg_941;

assign tmp_68_cast_fu_866_p1 = $signed(tmp_58_fu_861_p2);

assign tmp_cast_fu_697_p1 = i_reg_647;

assign tmp_fu_680_p2 = ((i_reg_647 == 5'd30) ? 1'b1 : 1'b0);

assign tmp_s_fu_692_p1 = i_reg_647;

always @ (posedge ap_clk) begin
    out_image_0_V_addr_4_reg_901[0] <= 1'b0;
    out_image_0_V_addr_4_reg_901[5] <= 1'b0;
    out_image_14_V_addr_2_reg_906[0] <= 1'b1;
    out_image_14_V_addr_2_reg_906[4:3] <= 2'b11;
    tmp_56_reg_919[1:0] <= 2'b00;
    tmp_66_cast_reg_928[0] <= 1'b0;
    tmp_66_cast_reg_928[5] <= 1'b0;
end

endmodule //efficient_pad_n_1cha
