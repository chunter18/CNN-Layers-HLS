// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module resample_for_conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        square_image_0_V_address0,
        square_image_0_V_ce0,
        square_image_0_V_q0,
        square_image_1_V_address0,
        square_image_1_V_ce0,
        square_image_1_V_q0,
        square_image_2_V_address0,
        square_image_2_V_ce0,
        square_image_2_V_q0,
        square_image_3_V_address0,
        square_image_3_V_ce0,
        square_image_3_V_q0,
        resampled_0_V_address0,
        resampled_0_V_ce0,
        resampled_0_V_we0,
        resampled_0_V_d0,
        resampled_1_V_address0,
        resampled_1_V_ce0,
        resampled_1_V_we0,
        resampled_1_V_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] square_image_0_V_address0;
output   square_image_0_V_ce0;
input  [24:0] square_image_0_V_q0;
output  [5:0] square_image_1_V_address0;
output   square_image_1_V_ce0;
input  [24:0] square_image_1_V_q0;
output  [5:0] square_image_2_V_address0;
output   square_image_2_V_ce0;
input  [24:0] square_image_2_V_q0;
output  [5:0] square_image_3_V_address0;
output   square_image_3_V_ce0;
input  [24:0] square_image_3_V_q0;
output  [9:0] resampled_0_V_address0;
output   resampled_0_V_ce0;
output   resampled_0_V_we0;
output  [24:0] resampled_0_V_d0;
output  [9:0] resampled_1_V_address0;
output   resampled_1_V_ce0;
output   resampled_1_V_we0;
output  [24:0] resampled_1_V_d0;

reg ap_done;
reg ap_idle;
reg square_image_0_V_ce0;
reg square_image_1_V_ce0;
reg square_image_2_V_ce0;
reg square_image_3_V_ce0;
reg resampled_0_V_ce0;
reg resampled_0_V_we0;
reg resampled_1_V_ce0;
reg resampled_1_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [0:0] exitcond_flatten2_reg_804;
reg   [0:0] exitcond_flatten2_reg_804_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten3_reg_166;
reg   [0:0] exitcond_flatten3_reg_166_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
reg   [0:0] exitcond_flatten3_reg_166_pp0_iter2_reg;
reg   [0:0] exitcond_flatten3_reg_166_pp0_iter3_reg;
reg   [0:0] exitcond_flatten3_reg_166_pp0_iter4_reg;
reg   [0:0] exitcond_flatten3_reg_166_pp0_iter5_reg;
reg   [0:0] exitcond_flatten3_reg_166_pp0_iter6_reg;
reg   [0:0] exitcond_flatten3_reg_166_pp0_iter7_reg;
reg   [0:0] exitcond_flatten4_reg_181;
reg   [0:0] tmp_1_reg_195;
reg   [1:0] m_cast_reg_209;
reg   [1:0] n_reg_223;
reg   [3:0] indvar_flatten_reg_237;
reg   [3:0] j_reg_251;
reg   [7:0] indvar_flatten1_reg_265;
reg   [3:0] i_reg_279;
reg   [10:0] indvar_flatten2_reg_293;
reg   [3:0] k_s_reg_307;
reg   [3:0] k_reg_321;
reg   [7:0] l_s_reg_335;
reg   [7:0] l_reg_349;
wire   [0:0] exitcond_flatten_mid_fu_389_p2;
reg   [0:0] exitcond_flatten_mid_reg_723;
reg   [0:0] exitcond_flatten_mid_reg_723_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_mid_reg_723_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_mid_reg_723_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_mid_reg_723_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_mid_reg_723_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_mid_reg_723_pp0_iter6_reg;
reg   [0:0] exitcond_flatten_mid_reg_723_pp0_iter7_reg;
wire   [3:0] i_mid2_fu_395_p3;
reg   [3:0] i_mid2_reg_728;
wire    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_fu_409_p2;
reg   [0:0] tmp_reg_734;
wire   [0:0] tmp_3_mid1_fu_435_p2;
reg   [0:0] tmp_3_mid1_reg_740;
wire   [3:0] j_mid2_fu_441_p3;
reg   [3:0] j_mid2_reg_746;
wire   [1:0] n_mid2_fu_467_p3;
reg   [1:0] n_mid2_reg_752;
wire   [1:0] m_cast_mid2_fu_475_p3;
reg   [1:0] m_cast_mid2_reg_757;
wire   [1:0] tmp_7_fu_483_p1;
reg   [1:0] tmp_7_reg_764;
wire   [10:0] indvar_flatten_next2_fu_487_p2;
reg   [10:0] indvar_flatten_next2_reg_769;
wire   [1:0] n_1_fu_493_p2;
reg   [1:0] n_1_reg_774;
wire   [3:0] indvar_flatten_next_fu_505_p3;
reg   [3:0] indvar_flatten_next_reg_779;
wire   [7:0] indvar_flatten_next1_fu_519_p3;
reg   [7:0] indvar_flatten_next1_reg_784;
wire   [0:0] tmp_3_fu_527_p2;
reg   [0:0] tmp_3_reg_789;
wire   [0:0] exitcond_flatten_fu_533_p2;
reg   [0:0] exitcond_flatten_reg_794;
wire   [0:0] exitcond_flatten1_fu_539_p2;
reg   [0:0] exitcond_flatten1_reg_799;
wire   [0:0] exitcond_flatten2_fu_545_p2;
reg   [0:0] exitcond_flatten2_reg_804_pp0_iter2_reg;
reg   [0:0] exitcond_flatten2_reg_804_pp0_iter3_reg;
reg   [0:0] exitcond_flatten2_reg_804_pp0_iter4_reg;
reg   [0:0] exitcond_flatten2_reg_804_pp0_iter5_reg;
reg   [0:0] exitcond_flatten2_reg_804_pp0_iter6_reg;
reg   [0:0] exitcond_flatten2_reg_804_pp0_iter7_reg;
reg   [0:0] exitcond_flatten2_reg_804_pp0_iter8_reg;
reg   [0:0] exitcond_flatten2_reg_804_pp0_iter9_reg;
wire   [3:0] k_1_mid2_fu_571_p3;
wire   [3:0] k_mid2_fu_581_p3;
reg   [3:0] k_mid2_reg_813;
reg    ap_enable_reg_pp0_iter1;
reg   [1:0] arrayNo_reg_818;
wire   [0:0] tmp_15_fu_637_p2;
reg   [0:0] tmp_15_reg_843;
reg   [0:0] tmp_15_reg_843_pp0_iter2_reg;
reg   [0:0] tmp_15_reg_843_pp0_iter3_reg;
reg   [0:0] tmp_15_reg_843_pp0_iter4_reg;
reg   [0:0] tmp_15_reg_843_pp0_iter5_reg;
reg   [0:0] tmp_15_reg_843_pp0_iter6_reg;
reg   [0:0] tmp_15_reg_843_pp0_iter7_reg;
reg   [0:0] tmp_15_reg_843_pp0_iter8_reg;
reg   [0:0] tmp_15_reg_843_pp0_iter9_reg;
wire   [3:0] tmp_10_fu_643_p2;
reg   [3:0] tmp_10_reg_847;
wire   [24:0] tmp_12_fu_652_p6;
reg   [24:0] tmp_12_reg_852;
reg   [24:0] tmp_12_reg_852_pp0_iter3_reg;
reg   [24:0] tmp_12_reg_852_pp0_iter4_reg;
reg   [24:0] tmp_12_reg_852_pp0_iter5_reg;
reg   [24:0] tmp_12_reg_852_pp0_iter6_reg;
reg   [24:0] tmp_12_reg_852_pp0_iter7_reg;
reg   [24:0] tmp_12_reg_852_pp0_iter8_reg;
reg   [24:0] tmp_12_reg_852_pp0_iter9_reg;
wire   [7:0] l_mid2_fu_680_p3;
reg   [7:0] l_mid2_reg_858;
reg    ap_enable_reg_pp0_iter8;
wire   [7:0] l_1_mid2_fu_694_p3;
reg   [7:0] l_1_mid2_reg_863;
wire   [10:0] grp_fu_715_p3;
reg   [10:0] tmp_14_reg_874;
reg    ap_enable_reg_pp0_iter9;
reg    rewind_ap_ready;
reg    rewind_ap_ready_reg;
reg    rewind_enable;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] ap_phi_mux_exitcond_flatten3_phi_fu_170_p6;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_exitcond_flatten4_phi_fu_185_p6;
reg   [0:0] ap_phi_mux_tmp_1_phi_fu_199_p6;
reg   [1:0] ap_phi_mux_m_cast_phi_fu_213_p6;
reg   [1:0] ap_phi_mux_n_phi_fu_227_p6;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_241_p6;
reg   [3:0] ap_phi_mux_j_phi_fu_255_p6;
reg   [7:0] ap_phi_mux_indvar_flatten1_phi_fu_269_p6;
reg   [3:0] ap_phi_mux_i_phi_fu_283_p6;
reg   [10:0] ap_phi_mux_indvar_flatten2_phi_fu_297_p6;
reg   [3:0] ap_phi_mux_k_s_phi_fu_311_p6;
reg   [3:0] ap_phi_mux_k_phi_fu_325_p6;
reg   [7:0] ap_phi_mux_l_s_phi_fu_339_p6;
reg   [7:0] ap_phi_mux_l_phi_fu_353_p6;
wire   [63:0] tmp_11_fu_623_p1;
wire  signed [63:0] tmp_17_cast_fu_708_p1;
wire   [0:0] not_exitcond_flatten_fu_377_p2;
wire   [3:0] i_1_fu_363_p2;
wire   [3:0] j_mid_fu_369_p3;
wire   [0:0] exitcond_flatten_not_fu_423_p2;
wire   [0:0] tmp_3_mid_fu_383_p2;
wire   [0:0] not_exitcond_flatten_1_fu_429_p2;
wire   [3:0] j_1_fu_403_p2;
wire   [1:0] m_mid_fu_415_p3;
wire   [0:0] tmp_4_fu_455_p2;
wire   [0:0] tmp_5_fu_461_p2;
wire   [1:0] m_fu_449_p2;
wire   [3:0] indvar_flatten_op_fu_499_p2;
wire   [7:0] indvar_flatten17_op_fu_513_p2;
wire   [3:0] k_mid_fu_551_p3;
wire   [3:0] k_2_dup_fu_565_p2;
wire   [3:0] k_1_mid_fu_558_p3;
wire   [3:0] n_cast_fu_588_p1;
wire   [3:0] m_cast_mid2_cast_fu_578_p1;
wire   [3:0] tmp_8_fu_596_p2;
wire   [1:0] newIndex_trunc_fu_611_p2;
wire   [3:0] tmp_6_fu_591_p2;
wire   [5:0] tmp_9_fu_615_p3;
wire   [31:0] tmp_12_fu_652_p5;
wire   [7:0] l_2_dup_fu_666_p2;
wire   [7:0] l_1_mid_fu_672_p3;
wire   [7:0] tmp_2_fu_688_p2;
wire   [3:0] grp_fu_631_p2;
wire   [8:0] grp_fu_715_p0;
wire   [3:0] grp_fu_715_p1;
wire   [7:0] grp_fu_715_p2;
reg    grp_fu_631_ce;
reg    grp_fu_715_ce;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to9;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] grp_fu_715_p10;
wire   [10:0] grp_fu_715_p20;
reg    ap_condition_275;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 rewind_ap_ready_reg = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

CNN_urem_4ns_4ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
CNN_urem_4ns_4ns_eOg_U140(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(k_1_mid2_fu_571_p3),
    .din1(4'd5),
    .ce(grp_fu_631_ce),
    .dout(grp_fu_631_p2)
);

CNN_mux_432_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .din2_WIDTH( 25 ),
    .din3_WIDTH( 25 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 25 ))
CNN_mux_432_25_1_1_U141(
    .din0(square_image_0_V_q0),
    .din1(square_image_1_V_q0),
    .din2(square_image_2_V_q0),
    .din3(square_image_3_V_q0),
    .din4(tmp_12_fu_652_p5),
    .dout(tmp_12_fu_652_p6)
);

CNN_mac_muladd_9nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
CNN_mac_muladd_9nfYi_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_715_p0),
    .din1(grp_fu_715_p1),
    .din2(grp_fu_715_p2),
    .ce(grp_fu_715_ce),
    .dout(grp_fu_715_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804_pp0_iter9_reg == 1'd1) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= rewind_enable;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rewind_ap_ready_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (ap_start == 1'b1))) begin
            rewind_ap_ready_reg <= rewind_ap_ready;
        end else begin
            rewind_ap_ready_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        exitcond_flatten3_reg_166 <= exitcond_flatten1_reg_799;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        exitcond_flatten3_reg_166 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        exitcond_flatten4_reg_181 <= exitcond_flatten_reg_794;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        exitcond_flatten4_reg_181 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_279 <= i_mid2_reg_728;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_reg_279 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten1_reg_265 <= indvar_flatten_next1_reg_784;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten1_reg_265 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten2_reg_293 <= indvar_flatten_next2_reg_769;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten2_reg_293 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_237 <= indvar_flatten_next_reg_779;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten_reg_237 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_251 <= j_mid2_reg_746;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        j_reg_251 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        k_reg_321 <= k_mid2_reg_813;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        k_reg_321 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        k_s_reg_307 <= tmp_10_reg_847;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        k_s_reg_307 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (exitcond_flatten2_reg_804_pp0_iter8_reg == 1'd0))) begin
        l_reg_349 <= l_mid2_reg_858;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804_pp0_iter8_reg == 1'd1) & (ap_enable_reg_pp0_iter9 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        l_reg_349 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (exitcond_flatten2_reg_804_pp0_iter8_reg == 1'd0))) begin
        l_s_reg_335 <= l_1_mid2_reg_863;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804_pp0_iter8_reg == 1'd1) & (ap_enable_reg_pp0_iter9 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        l_s_reg_335 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_cast_reg_209 <= m_cast_mid2_reg_757;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        m_cast_reg_209 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        n_reg_223 <= n_1_reg_774;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        n_reg_223 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp_1_reg_195 <= tmp_3_reg_789;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp_1_reg_195 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arrayNo_reg_818 <= {{tmp_8_fu_596_p2[3:2]}};
        exitcond_flatten2_reg_804 <= exitcond_flatten2_fu_545_p2;
        exitcond_flatten2_reg_804_pp0_iter1_reg <= exitcond_flatten2_reg_804;
        exitcond_flatten3_reg_166_pp0_iter1_reg <= exitcond_flatten3_reg_166;
        exitcond_flatten_mid_reg_723 <= exitcond_flatten_mid_fu_389_p2;
        exitcond_flatten_mid_reg_723_pp0_iter1_reg <= exitcond_flatten_mid_reg_723;
        n_mid2_reg_752 <= n_mid2_fu_467_p3;
        tmp_15_reg_843 <= tmp_15_fu_637_p2;
        tmp_3_mid1_reg_740 <= tmp_3_mid1_fu_435_p2;
        tmp_7_reg_764 <= tmp_7_fu_483_p1;
        tmp_reg_734 <= tmp_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exitcond_flatten1_reg_799 <= exitcond_flatten1_fu_539_p2;
        exitcond_flatten_reg_794 <= exitcond_flatten_fu_533_p2;
        i_mid2_reg_728 <= i_mid2_fu_395_p3;
        indvar_flatten_next1_reg_784 <= indvar_flatten_next1_fu_519_p3;
        indvar_flatten_next2_reg_769 <= indvar_flatten_next2_fu_487_p2;
        indvar_flatten_next_reg_779 <= indvar_flatten_next_fu_505_p3;
        j_mid2_reg_746 <= j_mid2_fu_441_p3;
        m_cast_mid2_reg_757 <= m_cast_mid2_fu_475_p3;
        n_1_reg_774 <= n_1_fu_493_p2;
        tmp_3_reg_789 <= tmp_3_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten2_reg_804_pp0_iter2_reg <= exitcond_flatten2_reg_804_pp0_iter1_reg;
        exitcond_flatten2_reg_804_pp0_iter3_reg <= exitcond_flatten2_reg_804_pp0_iter2_reg;
        exitcond_flatten2_reg_804_pp0_iter4_reg <= exitcond_flatten2_reg_804_pp0_iter3_reg;
        exitcond_flatten2_reg_804_pp0_iter5_reg <= exitcond_flatten2_reg_804_pp0_iter4_reg;
        exitcond_flatten2_reg_804_pp0_iter6_reg <= exitcond_flatten2_reg_804_pp0_iter5_reg;
        exitcond_flatten2_reg_804_pp0_iter7_reg <= exitcond_flatten2_reg_804_pp0_iter6_reg;
        exitcond_flatten2_reg_804_pp0_iter8_reg <= exitcond_flatten2_reg_804_pp0_iter7_reg;
        exitcond_flatten2_reg_804_pp0_iter9_reg <= exitcond_flatten2_reg_804_pp0_iter8_reg;
        exitcond_flatten3_reg_166_pp0_iter2_reg <= exitcond_flatten3_reg_166_pp0_iter1_reg;
        exitcond_flatten3_reg_166_pp0_iter3_reg <= exitcond_flatten3_reg_166_pp0_iter2_reg;
        exitcond_flatten3_reg_166_pp0_iter4_reg <= exitcond_flatten3_reg_166_pp0_iter3_reg;
        exitcond_flatten3_reg_166_pp0_iter5_reg <= exitcond_flatten3_reg_166_pp0_iter4_reg;
        exitcond_flatten3_reg_166_pp0_iter6_reg <= exitcond_flatten3_reg_166_pp0_iter5_reg;
        exitcond_flatten3_reg_166_pp0_iter7_reg <= exitcond_flatten3_reg_166_pp0_iter6_reg;
        exitcond_flatten_mid_reg_723_pp0_iter2_reg <= exitcond_flatten_mid_reg_723_pp0_iter1_reg;
        exitcond_flatten_mid_reg_723_pp0_iter3_reg <= exitcond_flatten_mid_reg_723_pp0_iter2_reg;
        exitcond_flatten_mid_reg_723_pp0_iter4_reg <= exitcond_flatten_mid_reg_723_pp0_iter3_reg;
        exitcond_flatten_mid_reg_723_pp0_iter5_reg <= exitcond_flatten_mid_reg_723_pp0_iter4_reg;
        exitcond_flatten_mid_reg_723_pp0_iter6_reg <= exitcond_flatten_mid_reg_723_pp0_iter5_reg;
        exitcond_flatten_mid_reg_723_pp0_iter7_reg <= exitcond_flatten_mid_reg_723_pp0_iter6_reg;
        tmp_12_reg_852 <= tmp_12_fu_652_p6;
        tmp_12_reg_852_pp0_iter3_reg <= tmp_12_reg_852;
        tmp_12_reg_852_pp0_iter4_reg <= tmp_12_reg_852_pp0_iter3_reg;
        tmp_12_reg_852_pp0_iter5_reg <= tmp_12_reg_852_pp0_iter4_reg;
        tmp_12_reg_852_pp0_iter6_reg <= tmp_12_reg_852_pp0_iter5_reg;
        tmp_12_reg_852_pp0_iter7_reg <= tmp_12_reg_852_pp0_iter6_reg;
        tmp_12_reg_852_pp0_iter8_reg <= tmp_12_reg_852_pp0_iter7_reg;
        tmp_12_reg_852_pp0_iter9_reg <= tmp_12_reg_852_pp0_iter8_reg;
        tmp_15_reg_843_pp0_iter2_reg <= tmp_15_reg_843;
        tmp_15_reg_843_pp0_iter3_reg <= tmp_15_reg_843_pp0_iter2_reg;
        tmp_15_reg_843_pp0_iter4_reg <= tmp_15_reg_843_pp0_iter3_reg;
        tmp_15_reg_843_pp0_iter5_reg <= tmp_15_reg_843_pp0_iter4_reg;
        tmp_15_reg_843_pp0_iter6_reg <= tmp_15_reg_843_pp0_iter5_reg;
        tmp_15_reg_843_pp0_iter7_reg <= tmp_15_reg_843_pp0_iter6_reg;
        tmp_15_reg_843_pp0_iter8_reg <= tmp_15_reg_843_pp0_iter7_reg;
        tmp_15_reg_843_pp0_iter9_reg <= tmp_15_reg_843_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        k_mid2_reg_813 <= k_mid2_fu_581_p3;
        tmp_10_reg_847 <= tmp_10_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        l_1_mid2_reg_863 <= l_1_mid2_fu_694_p3;
        l_mid2_reg_858 <= l_mid2_fu_680_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        tmp_14_reg_874 <= grp_fu_715_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804_pp0_iter9_reg == 1'd1) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to9 = 1'b1;
    end else begin
        ap_idle_pp0_0to9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_275)) begin
        if ((exitcond_flatten2_reg_804 == 1'd1)) begin
            ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 = 1'd0;
        end else if ((exitcond_flatten2_reg_804 == 1'd0)) begin
            ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 = exitcond_flatten1_reg_799;
        end else begin
            ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 = exitcond_flatten3_reg_166;
        end
    end else begin
        ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 = exitcond_flatten3_reg_166;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_275)) begin
        if ((exitcond_flatten2_reg_804 == 1'd1)) begin
            ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 = 1'd0;
        end else if ((exitcond_flatten2_reg_804 == 1'd0)) begin
            ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 = exitcond_flatten_reg_794;
        end else begin
            ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 = exitcond_flatten4_reg_181;
        end
    end else begin
        ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 = exitcond_flatten4_reg_181;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_275)) begin
        if ((exitcond_flatten2_reg_804 == 1'd1)) begin
            ap_phi_mux_i_phi_fu_283_p6 = 4'd0;
        end else if ((exitcond_flatten2_reg_804 == 1'd0)) begin
            ap_phi_mux_i_phi_fu_283_p6 = i_mid2_reg_728;
        end else begin
            ap_phi_mux_i_phi_fu_283_p6 = i_reg_279;
        end
    end else begin
        ap_phi_mux_i_phi_fu_283_p6 = i_reg_279;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_275)) begin
        if ((exitcond_flatten2_reg_804 == 1'd1)) begin
            ap_phi_mux_indvar_flatten1_phi_fu_269_p6 = 8'd0;
        end else if ((exitcond_flatten2_reg_804 == 1'd0)) begin
            ap_phi_mux_indvar_flatten1_phi_fu_269_p6 = indvar_flatten_next1_reg_784;
        end else begin
            ap_phi_mux_indvar_flatten1_phi_fu_269_p6 = indvar_flatten1_reg_265;
        end
    end else begin
        ap_phi_mux_indvar_flatten1_phi_fu_269_p6 = indvar_flatten1_reg_265;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_275)) begin
        if ((exitcond_flatten2_reg_804 == 1'd1)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_297_p6 = 11'd0;
        end else if ((exitcond_flatten2_reg_804 == 1'd0)) begin
            ap_phi_mux_indvar_flatten2_phi_fu_297_p6 = indvar_flatten_next2_reg_769;
        end else begin
            ap_phi_mux_indvar_flatten2_phi_fu_297_p6 = indvar_flatten2_reg_293;
        end
    end else begin
        ap_phi_mux_indvar_flatten2_phi_fu_297_p6 = indvar_flatten2_reg_293;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_275)) begin
        if ((exitcond_flatten2_reg_804 == 1'd1)) begin
            ap_phi_mux_indvar_flatten_phi_fu_241_p6 = 4'd0;
        end else if ((exitcond_flatten2_reg_804 == 1'd0)) begin
            ap_phi_mux_indvar_flatten_phi_fu_241_p6 = indvar_flatten_next_reg_779;
        end else begin
            ap_phi_mux_indvar_flatten_phi_fu_241_p6 = indvar_flatten_reg_237;
        end
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_241_p6 = indvar_flatten_reg_237;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_275)) begin
        if ((exitcond_flatten2_reg_804 == 1'd1)) begin
            ap_phi_mux_j_phi_fu_255_p6 = 4'd0;
        end else if ((exitcond_flatten2_reg_804 == 1'd0)) begin
            ap_phi_mux_j_phi_fu_255_p6 = j_mid2_reg_746;
        end else begin
            ap_phi_mux_j_phi_fu_255_p6 = j_reg_251;
        end
    end else begin
        ap_phi_mux_j_phi_fu_255_p6 = j_reg_251;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((exitcond_flatten2_reg_804_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_k_phi_fu_325_p6 = 4'd0;
        end else if ((exitcond_flatten2_reg_804_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_k_phi_fu_325_p6 = k_mid2_reg_813;
        end else begin
            ap_phi_mux_k_phi_fu_325_p6 = k_reg_321;
        end
    end else begin
        ap_phi_mux_k_phi_fu_325_p6 = k_reg_321;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((exitcond_flatten2_reg_804_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_k_s_phi_fu_311_p6 = 4'd0;
        end else if ((exitcond_flatten2_reg_804_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_k_s_phi_fu_311_p6 = tmp_10_reg_847;
        end else begin
            ap_phi_mux_k_s_phi_fu_311_p6 = k_s_reg_307;
        end
    end else begin
        ap_phi_mux_k_s_phi_fu_311_p6 = k_s_reg_307;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        if ((exitcond_flatten2_reg_804_pp0_iter8_reg == 1'd1)) begin
            ap_phi_mux_l_phi_fu_353_p6 = 8'd0;
        end else if ((exitcond_flatten2_reg_804_pp0_iter8_reg == 1'd0)) begin
            ap_phi_mux_l_phi_fu_353_p6 = l_mid2_reg_858;
        end else begin
            ap_phi_mux_l_phi_fu_353_p6 = l_reg_349;
        end
    end else begin
        ap_phi_mux_l_phi_fu_353_p6 = l_reg_349;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        if ((exitcond_flatten2_reg_804_pp0_iter8_reg == 1'd1)) begin
            ap_phi_mux_l_s_phi_fu_339_p6 = 8'd0;
        end else if ((exitcond_flatten2_reg_804_pp0_iter8_reg == 1'd0)) begin
            ap_phi_mux_l_s_phi_fu_339_p6 = l_1_mid2_reg_863;
        end else begin
            ap_phi_mux_l_s_phi_fu_339_p6 = l_s_reg_335;
        end
    end else begin
        ap_phi_mux_l_s_phi_fu_339_p6 = l_s_reg_335;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_275)) begin
        if ((exitcond_flatten2_reg_804 == 1'd1)) begin
            ap_phi_mux_m_cast_phi_fu_213_p6 = 2'd0;
        end else if ((exitcond_flatten2_reg_804 == 1'd0)) begin
            ap_phi_mux_m_cast_phi_fu_213_p6 = m_cast_mid2_reg_757;
        end else begin
            ap_phi_mux_m_cast_phi_fu_213_p6 = m_cast_reg_209;
        end
    end else begin
        ap_phi_mux_m_cast_phi_fu_213_p6 = m_cast_reg_209;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_275)) begin
        if ((exitcond_flatten2_reg_804 == 1'd1)) begin
            ap_phi_mux_n_phi_fu_227_p6 = 2'd0;
        end else if ((exitcond_flatten2_reg_804 == 1'd0)) begin
            ap_phi_mux_n_phi_fu_227_p6 = n_1_reg_774;
        end else begin
            ap_phi_mux_n_phi_fu_227_p6 = n_reg_223;
        end
    end else begin
        ap_phi_mux_n_phi_fu_227_p6 = n_reg_223;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_275)) begin
        if ((exitcond_flatten2_reg_804 == 1'd1)) begin
            ap_phi_mux_tmp_1_phi_fu_199_p6 = 1'd0;
        end else if ((exitcond_flatten2_reg_804 == 1'd0)) begin
            ap_phi_mux_tmp_1_phi_fu_199_p6 = tmp_3_reg_789;
        end else begin
            ap_phi_mux_tmp_1_phi_fu_199_p6 = tmp_1_reg_195;
        end
    end else begin
        ap_phi_mux_tmp_1_phi_fu_199_p6 = tmp_1_reg_195;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to9 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_631_ce = 1'b1;
    end else begin
        grp_fu_631_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_715_ce = 1'b1;
    end else begin
        grp_fu_715_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_804_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        resampled_0_V_ce0 = 1'b1;
    end else begin
        resampled_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_15_reg_843_pp0_iter9_reg == 1'd1) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        resampled_0_V_we0 = 1'b1;
    end else begin
        resampled_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        resampled_1_V_ce0 = 1'b1;
    end else begin
        resampled_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_15_reg_843_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        resampled_1_V_we0 = 1'b1;
    end else begin
        resampled_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((rewind_ap_ready_reg == 1'b1) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_fu_545_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        rewind_ap_ready = 1'b1;
    end else begin
        rewind_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((rewind_ap_ready_reg == 1'b0) & (ap_start == 1'b1))) begin
        rewind_enable = 1'b1;
    end else begin
        rewind_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        square_image_0_V_ce0 = 1'b1;
    end else begin
        square_image_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        square_image_1_V_ce0 = 1'b1;
    end else begin
        square_image_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        square_image_2_V_ce0 = 1'b1;
    end else begin
        square_image_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        square_image_3_V_ce0 = 1'b1;
    end else begin
        square_image_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_275 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = rewind_enable;

assign ap_ready = internal_ap_ready;

assign exitcond_flatten1_fu_539_p2 = ((indvar_flatten_next1_fu_519_p3 == 8'd126) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_545_p2 = ((ap_phi_mux_indvar_flatten2_phi_fu_297_p6 == 11'd1763) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_533_p2 = ((indvar_flatten_next_fu_505_p3 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_flatten_mid_fu_389_p2 = (not_exitcond_flatten_fu_377_p2 & ap_phi_mux_exitcond_flatten4_phi_fu_185_p6);

assign exitcond_flatten_not_fu_423_p2 = (ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 ^ 1'd1);

assign grp_fu_715_p0 = 11'd196;

assign grp_fu_715_p1 = grp_fu_715_p10;

assign grp_fu_715_p10 = grp_fu_631_p2;

assign grp_fu_715_p2 = grp_fu_715_p20;

assign grp_fu_715_p20 = l_1_mid2_reg_863;

assign i_1_fu_363_p2 = (4'd1 + ap_phi_mux_i_phi_fu_283_p6);

assign i_mid2_fu_395_p3 = ((ap_phi_mux_exitcond_flatten3_phi_fu_170_p6[0:0] === 1'b1) ? i_1_fu_363_p2 : ap_phi_mux_i_phi_fu_283_p6);

assign indvar_flatten17_op_fu_513_p2 = (ap_phi_mux_indvar_flatten1_phi_fu_269_p6 + 8'd1);

assign indvar_flatten_next1_fu_519_p3 = ((ap_phi_mux_exitcond_flatten3_phi_fu_170_p6[0:0] === 1'b1) ? 8'd1 : indvar_flatten17_op_fu_513_p2);

assign indvar_flatten_next2_fu_487_p2 = (11'd1 + ap_phi_mux_indvar_flatten2_phi_fu_297_p6);

assign indvar_flatten_next_fu_505_p3 = ((tmp_fu_409_p2[0:0] === 1'b1) ? 4'd1 : indvar_flatten_op_fu_499_p2);

assign indvar_flatten_op_fu_499_p2 = (ap_phi_mux_indvar_flatten_phi_fu_241_p6 + 4'd1);

assign j_1_fu_403_p2 = (4'd1 + j_mid_fu_369_p3);

assign j_mid2_fu_441_p3 = ((exitcond_flatten_mid_fu_389_p2[0:0] === 1'b1) ? j_1_fu_403_p2 : j_mid_fu_369_p3);

assign j_mid_fu_369_p3 = ((ap_phi_mux_exitcond_flatten3_phi_fu_170_p6[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_j_phi_fu_255_p6);

assign k_1_mid2_fu_571_p3 = ((tmp_3_mid1_reg_740[0:0] === 1'b1) ? k_2_dup_fu_565_p2 : k_1_mid_fu_558_p3);

assign k_1_mid_fu_558_p3 = ((tmp_reg_734[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_k_s_phi_fu_311_p6);

assign k_2_dup_fu_565_p2 = (4'd3 + k_mid_fu_551_p3);

assign k_mid2_fu_581_p3 = ((tmp_3_mid1_reg_740[0:0] === 1'b1) ? k_2_dup_fu_565_p2 : k_mid_fu_551_p3);

assign k_mid_fu_551_p3 = ((tmp_reg_734[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_k_phi_fu_325_p6);

assign l_1_mid2_fu_694_p3 = ((exitcond_flatten_mid_reg_723_pp0_iter7_reg[0:0] === 1'b1) ? tmp_2_fu_688_p2 : l_1_mid_fu_672_p3);

assign l_1_mid_fu_672_p3 = ((exitcond_flatten3_reg_166_pp0_iter7_reg[0:0] === 1'b1) ? l_2_dup_fu_666_p2 : ap_phi_mux_l_s_phi_fu_339_p6);

assign l_2_dup_fu_666_p2 = (8'd14 + ap_phi_mux_l_phi_fu_353_p6);

assign l_mid2_fu_680_p3 = ((exitcond_flatten3_reg_166_pp0_iter7_reg[0:0] === 1'b1) ? l_2_dup_fu_666_p2 : ap_phi_mux_l_phi_fu_353_p6);

assign m_cast_mid2_cast_fu_578_p1 = m_cast_mid2_reg_757;

assign m_cast_mid2_fu_475_p3 = ((tmp_3_mid1_fu_435_p2[0:0] === 1'b1) ? m_fu_449_p2 : m_mid_fu_415_p3);

assign m_fu_449_p2 = (2'd1 + m_mid_fu_415_p3);

assign m_mid_fu_415_p3 = ((tmp_fu_409_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_m_cast_phi_fu_213_p6);

assign n_1_fu_493_p2 = (n_mid2_fu_467_p3 + 2'd1);

assign n_cast_fu_588_p1 = n_mid2_reg_752;

assign n_mid2_fu_467_p3 = ((tmp_5_fu_461_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_n_phi_fu_227_p6);

assign newIndex_trunc_fu_611_p2 = (tmp_7_reg_764 + m_cast_mid2_reg_757);

assign not_exitcond_flatten_1_fu_429_p2 = (exitcond_flatten_not_fu_423_p2 | ap_phi_mux_exitcond_flatten3_phi_fu_170_p6);

assign not_exitcond_flatten_fu_377_p2 = (ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 ^ 1'd1);

assign resampled_0_V_address0 = tmp_17_cast_fu_708_p1;

assign resampled_0_V_d0 = tmp_12_reg_852_pp0_iter9_reg;

assign resampled_1_V_address0 = tmp_17_cast_fu_708_p1;

assign resampled_1_V_d0 = tmp_12_reg_852_pp0_iter9_reg;

assign square_image_0_V_address0 = tmp_11_fu_623_p1;

assign square_image_1_V_address0 = tmp_11_fu_623_p1;

assign square_image_2_V_address0 = tmp_11_fu_623_p1;

assign square_image_3_V_address0 = tmp_11_fu_623_p1;

assign tmp_10_fu_643_p2 = (k_1_mid2_fu_571_p3 + 4'd1);

assign tmp_11_fu_623_p1 = tmp_9_fu_615_p3;

assign tmp_12_fu_652_p5 = arrayNo_reg_818;

assign tmp_15_fu_637_p2 = ((k_1_mid2_fu_571_p3 < 4'd5) ? 1'b1 : 1'b0);

assign tmp_17_cast_fu_708_p1 = $signed(tmp_14_reg_874);

assign tmp_2_fu_688_p2 = (8'd1 + l_1_mid_fu_672_p3);

assign tmp_3_fu_527_p2 = ((n_1_fu_493_p2 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_3_mid1_fu_435_p2 = (tmp_3_mid_fu_383_p2 & not_exitcond_flatten_1_fu_429_p2);

assign tmp_3_mid_fu_383_p2 = (not_exitcond_flatten_fu_377_p2 & ap_phi_mux_tmp_1_phi_fu_199_p6);

assign tmp_4_fu_455_p2 = (tmp_3_mid1_fu_435_p2 | exitcond_flatten_mid_fu_389_p2);

assign tmp_5_fu_461_p2 = (tmp_4_fu_455_p2 | ap_phi_mux_exitcond_flatten3_phi_fu_170_p6);

assign tmp_6_fu_591_p2 = (n_cast_fu_588_p1 + j_mid2_reg_746);

assign tmp_7_fu_483_p1 = i_mid2_fu_395_p3[1:0];

assign tmp_8_fu_596_p2 = (m_cast_mid2_cast_fu_578_p1 + i_mid2_reg_728);

assign tmp_9_fu_615_p3 = {{newIndex_trunc_fu_611_p2}, {tmp_6_fu_591_p2}};

assign tmp_fu_409_p2 = (exitcond_flatten_mid_fu_389_p2 | ap_phi_mux_exitcond_flatten3_phi_fu_170_p6);

endmodule //resample_for_conv2
