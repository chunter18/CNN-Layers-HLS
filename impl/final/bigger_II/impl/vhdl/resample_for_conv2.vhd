-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resample_for_conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    square_image_0_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    square_image_0_V_ce0 : OUT STD_LOGIC;
    square_image_0_V_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    square_image_1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    square_image_1_V_ce0 : OUT STD_LOGIC;
    square_image_1_V_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    square_image_2_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    square_image_2_V_ce0 : OUT STD_LOGIC;
    square_image_2_V_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    square_image_3_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    square_image_3_V_ce0 : OUT STD_LOGIC;
    square_image_3_V_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    resampled_0_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    resampled_0_V_ce0 : OUT STD_LOGIC;
    resampled_0_V_we0 : OUT STD_LOGIC;
    resampled_0_V_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    resampled_1_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    resampled_1_V_ce0 : OUT STD_LOGIC;
    resampled_1_V_we0 : OUT STD_LOGIC;
    resampled_1_V_d0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of resample_for_conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv11_6E3 : STD_LOGIC_VECTOR (10 downto 0) := "11011100011";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal exitcond_flatten2_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_804_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten3_reg_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_166_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal exitcond_flatten3_reg_166_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_166_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_166_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_166_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_166_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_166_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_181 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_195 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_cast_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_reg_223 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_237 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_251 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten1_reg_265 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_279 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten2_reg_293 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_s_reg_307 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_321 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_s_reg_335 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_reg_349 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten_mid_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_723_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_723_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_723_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_723_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_723_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_723_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_723_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_mid2_fu_395_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_mid2_reg_728 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal tmp_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_mid1_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_mid1_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_441_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_746 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_mid2_fu_467_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_mid2_reg_752 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_cast_mid2_fu_475_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_cast_mid2_reg_757 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_483_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_reg_764 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_next2_fu_487_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_next2_reg_769 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_1_fu_493_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_774 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_next_fu_505_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_reg_779 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next1_fu_519_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next1_reg_784 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_794 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_804_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_804_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_804_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_804_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_804_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_804_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_804_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_804_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_mid2_fu_571_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_mid2_fu_581_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_mid2_reg_813 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal arrayNo_reg_818 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_843_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_843_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_843_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_843_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_843_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_843_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_843_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_843_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_643_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_reg_847 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_652_p6 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_reg_852 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_reg_852_pp0_iter3_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_reg_852_pp0_iter4_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_reg_852_pp0_iter5_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_reg_852_pp0_iter6_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_reg_852_pp0_iter7_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_reg_852_pp0_iter8_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_reg_852_pp0_iter9_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal l_mid2_fu_680_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_mid2_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal l_1_mid2_fu_694_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_1_mid2_reg_863 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_715_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_reg_874 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal rewind_ap_ready : STD_LOGIC;
    signal rewind_ap_ready_reg : STD_LOGIC := '0';
    signal rewind_enable : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_tmp_1_phi_fu_199_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_m_cast_phi_fu_213_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_n_phi_fu_227_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_241_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_j_phi_fu_255_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten1_phi_fu_269_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_phi_fu_283_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten2_phi_fu_297_p6 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_k_s_phi_fu_311_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_k_phi_fu_325_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_l_s_phi_fu_339_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_l_phi_fu_353_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal not_exitcond_flatten_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_363_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid_fu_369_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_not_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_mid_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_403_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mid_fu_415_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_449_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_op_fu_499_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten17_op_fu_513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_mid_fu_551_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_2_dup_fu_565_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_mid_fu_558_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_cast_fu_588_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_cast_mid2_cast_fu_578_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_596_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal newIndex_trunc_fu_611_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_591_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_615_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_652_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_2_dup_fu_666_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_1_mid_fu_672_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_688_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_631_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_715_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_715_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_715_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_631_ce : STD_LOGIC;
    signal grp_fu_715_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_715_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_715_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_condition_275 : BOOLEAN;

    component CNN_urem_4ns_4ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component CNN_mux_432_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        din3 : IN STD_LOGIC_VECTOR (24 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component CNN_mac_muladd_9nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    CNN_urem_4ns_4ns_eOg_U140 : component CNN_urem_4ns_4ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => k_1_mid2_fu_571_p3,
        din1 => ap_const_lv4_5,
        ce => grp_fu_631_ce,
        dout => grp_fu_631_p2);

    CNN_mux_432_25_1_1_U141 : component CNN_mux_432_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        din2_WIDTH => 25,
        din3_WIDTH => 25,
        din4_WIDTH => 32,
        dout_WIDTH => 25)
    port map (
        din0 => square_image_0_V_q0,
        din1 => square_image_1_V_q0,
        din2 => square_image_2_V_q0,
        din3 => square_image_3_V_q0,
        din4 => tmp_12_fu_652_p5,
        dout => tmp_12_fu_652_p6);

    CNN_mac_muladd_9nfYi_U142 : component CNN_mac_muladd_9nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 9,
        din1_WIDTH => 4,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_715_p0,
        din1 => grp_fu_715_p1,
        din2 => grp_fu_715_p2,
        ce => grp_fu_715_ce,
        dout => grp_fu_715_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804_pp0_iter9_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= rewind_enable;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    rewind_ap_ready_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                rewind_ap_ready_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (ap_start = ap_const_logic_1))) then 
                    rewind_ap_ready_reg <= rewind_ap_ready;
                else 
                    rewind_ap_ready_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    exitcond_flatten3_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                exitcond_flatten3_reg_166 <= exitcond_flatten1_reg_799;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                exitcond_flatten3_reg_166 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    exitcond_flatten4_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                exitcond_flatten4_reg_181 <= exitcond_flatten_reg_794;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                exitcond_flatten4_reg_181 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_279 <= i_mid2_reg_728;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i_reg_279 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten1_reg_265 <= indvar_flatten_next1_reg_784;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                indvar_flatten1_reg_265 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten2_reg_293 <= indvar_flatten_next2_reg_769;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                indvar_flatten2_reg_293 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_237 <= indvar_flatten_next_reg_779;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                indvar_flatten_reg_237 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_reg_251 <= j_mid2_reg_746;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                j_reg_251 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                k_reg_321 <= k_mid2_reg_813;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                k_reg_321 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_s_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                k_s_reg_307 <= tmp_10_reg_847;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                k_s_reg_307 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    l_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (exitcond_flatten2_reg_804_pp0_iter8_reg = ap_const_lv1_0))) then 
                l_reg_349 <= l_mid2_reg_858;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804_pp0_iter8_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                l_reg_349 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    l_s_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (exitcond_flatten2_reg_804_pp0_iter8_reg = ap_const_lv1_0))) then 
                l_s_reg_335 <= l_1_mid2_reg_863;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804_pp0_iter8_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                l_s_reg_335 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    m_cast_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                m_cast_reg_209 <= m_cast_mid2_reg_757;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                m_cast_reg_209 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                n_reg_223 <= n_1_reg_774;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                n_reg_223 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    tmp_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                tmp_1_reg_195 <= tmp_3_reg_789;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                tmp_1_reg_195 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                arrayNo_reg_818 <= tmp_8_fu_596_p2(3 downto 2);
                exitcond_flatten2_reg_804 <= exitcond_flatten2_fu_545_p2;
                exitcond_flatten2_reg_804_pp0_iter1_reg <= exitcond_flatten2_reg_804;
                exitcond_flatten3_reg_166_pp0_iter1_reg <= exitcond_flatten3_reg_166;
                exitcond_flatten_mid_reg_723 <= exitcond_flatten_mid_fu_389_p2;
                exitcond_flatten_mid_reg_723_pp0_iter1_reg <= exitcond_flatten_mid_reg_723;
                n_mid2_reg_752 <= n_mid2_fu_467_p3;
                tmp_15_reg_843 <= tmp_15_fu_637_p2;
                tmp_3_mid1_reg_740 <= tmp_3_mid1_fu_435_p2;
                tmp_7_reg_764 <= tmp_7_fu_483_p1;
                tmp_reg_734 <= tmp_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                exitcond_flatten1_reg_799 <= exitcond_flatten1_fu_539_p2;
                exitcond_flatten_reg_794 <= exitcond_flatten_fu_533_p2;
                i_mid2_reg_728 <= i_mid2_fu_395_p3;
                indvar_flatten_next1_reg_784 <= indvar_flatten_next1_fu_519_p3;
                indvar_flatten_next2_reg_769 <= indvar_flatten_next2_fu_487_p2;
                indvar_flatten_next_reg_779 <= indvar_flatten_next_fu_505_p3;
                j_mid2_reg_746 <= j_mid2_fu_441_p3;
                m_cast_mid2_reg_757 <= m_cast_mid2_fu_475_p3;
                n_1_reg_774 <= n_1_fu_493_p2;
                tmp_3_reg_789 <= tmp_3_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten2_reg_804_pp0_iter2_reg <= exitcond_flatten2_reg_804_pp0_iter1_reg;
                exitcond_flatten2_reg_804_pp0_iter3_reg <= exitcond_flatten2_reg_804_pp0_iter2_reg;
                exitcond_flatten2_reg_804_pp0_iter4_reg <= exitcond_flatten2_reg_804_pp0_iter3_reg;
                exitcond_flatten2_reg_804_pp0_iter5_reg <= exitcond_flatten2_reg_804_pp0_iter4_reg;
                exitcond_flatten2_reg_804_pp0_iter6_reg <= exitcond_flatten2_reg_804_pp0_iter5_reg;
                exitcond_flatten2_reg_804_pp0_iter7_reg <= exitcond_flatten2_reg_804_pp0_iter6_reg;
                exitcond_flatten2_reg_804_pp0_iter8_reg <= exitcond_flatten2_reg_804_pp0_iter7_reg;
                exitcond_flatten2_reg_804_pp0_iter9_reg <= exitcond_flatten2_reg_804_pp0_iter8_reg;
                exitcond_flatten3_reg_166_pp0_iter2_reg <= exitcond_flatten3_reg_166_pp0_iter1_reg;
                exitcond_flatten3_reg_166_pp0_iter3_reg <= exitcond_flatten3_reg_166_pp0_iter2_reg;
                exitcond_flatten3_reg_166_pp0_iter4_reg <= exitcond_flatten3_reg_166_pp0_iter3_reg;
                exitcond_flatten3_reg_166_pp0_iter5_reg <= exitcond_flatten3_reg_166_pp0_iter4_reg;
                exitcond_flatten3_reg_166_pp0_iter6_reg <= exitcond_flatten3_reg_166_pp0_iter5_reg;
                exitcond_flatten3_reg_166_pp0_iter7_reg <= exitcond_flatten3_reg_166_pp0_iter6_reg;
                exitcond_flatten_mid_reg_723_pp0_iter2_reg <= exitcond_flatten_mid_reg_723_pp0_iter1_reg;
                exitcond_flatten_mid_reg_723_pp0_iter3_reg <= exitcond_flatten_mid_reg_723_pp0_iter2_reg;
                exitcond_flatten_mid_reg_723_pp0_iter4_reg <= exitcond_flatten_mid_reg_723_pp0_iter3_reg;
                exitcond_flatten_mid_reg_723_pp0_iter5_reg <= exitcond_flatten_mid_reg_723_pp0_iter4_reg;
                exitcond_flatten_mid_reg_723_pp0_iter6_reg <= exitcond_flatten_mid_reg_723_pp0_iter5_reg;
                exitcond_flatten_mid_reg_723_pp0_iter7_reg <= exitcond_flatten_mid_reg_723_pp0_iter6_reg;
                tmp_12_reg_852 <= tmp_12_fu_652_p6;
                tmp_12_reg_852_pp0_iter3_reg <= tmp_12_reg_852;
                tmp_12_reg_852_pp0_iter4_reg <= tmp_12_reg_852_pp0_iter3_reg;
                tmp_12_reg_852_pp0_iter5_reg <= tmp_12_reg_852_pp0_iter4_reg;
                tmp_12_reg_852_pp0_iter6_reg <= tmp_12_reg_852_pp0_iter5_reg;
                tmp_12_reg_852_pp0_iter7_reg <= tmp_12_reg_852_pp0_iter6_reg;
                tmp_12_reg_852_pp0_iter8_reg <= tmp_12_reg_852_pp0_iter7_reg;
                tmp_12_reg_852_pp0_iter9_reg <= tmp_12_reg_852_pp0_iter8_reg;
                tmp_15_reg_843_pp0_iter2_reg <= tmp_15_reg_843;
                tmp_15_reg_843_pp0_iter3_reg <= tmp_15_reg_843_pp0_iter2_reg;
                tmp_15_reg_843_pp0_iter4_reg <= tmp_15_reg_843_pp0_iter3_reg;
                tmp_15_reg_843_pp0_iter5_reg <= tmp_15_reg_843_pp0_iter4_reg;
                tmp_15_reg_843_pp0_iter6_reg <= tmp_15_reg_843_pp0_iter5_reg;
                tmp_15_reg_843_pp0_iter7_reg <= tmp_15_reg_843_pp0_iter6_reg;
                tmp_15_reg_843_pp0_iter8_reg <= tmp_15_reg_843_pp0_iter7_reg;
                tmp_15_reg_843_pp0_iter9_reg <= tmp_15_reg_843_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                k_mid2_reg_813 <= k_mid2_fu_581_p3;
                tmp_10_reg_847 <= tmp_10_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                l_1_mid2_reg_863 <= l_1_mid2_fu_694_p3;
                l_mid2_reg_858 <= l_mid2_fu_680_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                tmp_14_reg_874 <= grp_fu_715_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_275_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_275 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_11001, exitcond_flatten2_reg_804_pp0_iter9_reg, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804_pp0_iter9_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= rewind_enable;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_exitcond_flatten3_phi_fu_170_p6_assign_proc : process(exitcond_flatten2_reg_804, exitcond_flatten3_reg_166, exitcond_flatten1_reg_799, ap_condition_275)
    begin
        if ((ap_const_boolean_1 = ap_condition_275)) then
            if ((exitcond_flatten2_reg_804 = ap_const_lv1_1)) then 
                ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 <= ap_const_lv1_0;
            elsif ((exitcond_flatten2_reg_804 = ap_const_lv1_0)) then 
                ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 <= exitcond_flatten1_reg_799;
            else 
                ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 <= exitcond_flatten3_reg_166;
            end if;
        else 
            ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 <= exitcond_flatten3_reg_166;
        end if; 
    end process;


    ap_phi_mux_exitcond_flatten4_phi_fu_185_p6_assign_proc : process(exitcond_flatten2_reg_804, exitcond_flatten4_reg_181, exitcond_flatten_reg_794, ap_condition_275)
    begin
        if ((ap_const_boolean_1 = ap_condition_275)) then
            if ((exitcond_flatten2_reg_804 = ap_const_lv1_1)) then 
                ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 <= ap_const_lv1_0;
            elsif ((exitcond_flatten2_reg_804 = ap_const_lv1_0)) then 
                ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 <= exitcond_flatten_reg_794;
            else 
                ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 <= exitcond_flatten4_reg_181;
            end if;
        else 
            ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 <= exitcond_flatten4_reg_181;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_283_p6_assign_proc : process(exitcond_flatten2_reg_804, i_reg_279, i_mid2_reg_728, ap_condition_275)
    begin
        if ((ap_const_boolean_1 = ap_condition_275)) then
            if ((exitcond_flatten2_reg_804 = ap_const_lv1_1)) then 
                ap_phi_mux_i_phi_fu_283_p6 <= ap_const_lv4_0;
            elsif ((exitcond_flatten2_reg_804 = ap_const_lv1_0)) then 
                ap_phi_mux_i_phi_fu_283_p6 <= i_mid2_reg_728;
            else 
                ap_phi_mux_i_phi_fu_283_p6 <= i_reg_279;
            end if;
        else 
            ap_phi_mux_i_phi_fu_283_p6 <= i_reg_279;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten1_phi_fu_269_p6_assign_proc : process(exitcond_flatten2_reg_804, indvar_flatten1_reg_265, indvar_flatten_next1_reg_784, ap_condition_275)
    begin
        if ((ap_const_boolean_1 = ap_condition_275)) then
            if ((exitcond_flatten2_reg_804 = ap_const_lv1_1)) then 
                ap_phi_mux_indvar_flatten1_phi_fu_269_p6 <= ap_const_lv8_0;
            elsif ((exitcond_flatten2_reg_804 = ap_const_lv1_0)) then 
                ap_phi_mux_indvar_flatten1_phi_fu_269_p6 <= indvar_flatten_next1_reg_784;
            else 
                ap_phi_mux_indvar_flatten1_phi_fu_269_p6 <= indvar_flatten1_reg_265;
            end if;
        else 
            ap_phi_mux_indvar_flatten1_phi_fu_269_p6 <= indvar_flatten1_reg_265;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten2_phi_fu_297_p6_assign_proc : process(exitcond_flatten2_reg_804, indvar_flatten2_reg_293, indvar_flatten_next2_reg_769, ap_condition_275)
    begin
        if ((ap_const_boolean_1 = ap_condition_275)) then
            if ((exitcond_flatten2_reg_804 = ap_const_lv1_1)) then 
                ap_phi_mux_indvar_flatten2_phi_fu_297_p6 <= ap_const_lv11_0;
            elsif ((exitcond_flatten2_reg_804 = ap_const_lv1_0)) then 
                ap_phi_mux_indvar_flatten2_phi_fu_297_p6 <= indvar_flatten_next2_reg_769;
            else 
                ap_phi_mux_indvar_flatten2_phi_fu_297_p6 <= indvar_flatten2_reg_293;
            end if;
        else 
            ap_phi_mux_indvar_flatten2_phi_fu_297_p6 <= indvar_flatten2_reg_293;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_241_p6_assign_proc : process(exitcond_flatten2_reg_804, indvar_flatten_reg_237, indvar_flatten_next_reg_779, ap_condition_275)
    begin
        if ((ap_const_boolean_1 = ap_condition_275)) then
            if ((exitcond_flatten2_reg_804 = ap_const_lv1_1)) then 
                ap_phi_mux_indvar_flatten_phi_fu_241_p6 <= ap_const_lv4_0;
            elsif ((exitcond_flatten2_reg_804 = ap_const_lv1_0)) then 
                ap_phi_mux_indvar_flatten_phi_fu_241_p6 <= indvar_flatten_next_reg_779;
            else 
                ap_phi_mux_indvar_flatten_phi_fu_241_p6 <= indvar_flatten_reg_237;
            end if;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_241_p6 <= indvar_flatten_reg_237;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_255_p6_assign_proc : process(exitcond_flatten2_reg_804, j_reg_251, j_mid2_reg_746, ap_condition_275)
    begin
        if ((ap_const_boolean_1 = ap_condition_275)) then
            if ((exitcond_flatten2_reg_804 = ap_const_lv1_1)) then 
                ap_phi_mux_j_phi_fu_255_p6 <= ap_const_lv4_0;
            elsif ((exitcond_flatten2_reg_804 = ap_const_lv1_0)) then 
                ap_phi_mux_j_phi_fu_255_p6 <= j_mid2_reg_746;
            else 
                ap_phi_mux_j_phi_fu_255_p6 <= j_reg_251;
            end if;
        else 
            ap_phi_mux_j_phi_fu_255_p6 <= j_reg_251;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_325_p6_assign_proc : process(exitcond_flatten2_reg_804_pp0_iter1_reg, ap_enable_reg_pp0_iter2, k_reg_321, k_mid2_reg_813, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            if ((exitcond_flatten2_reg_804_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_k_phi_fu_325_p6 <= ap_const_lv4_0;
            elsif ((exitcond_flatten2_reg_804_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_k_phi_fu_325_p6 <= k_mid2_reg_813;
            else 
                ap_phi_mux_k_phi_fu_325_p6 <= k_reg_321;
            end if;
        else 
            ap_phi_mux_k_phi_fu_325_p6 <= k_reg_321;
        end if; 
    end process;


    ap_phi_mux_k_s_phi_fu_311_p6_assign_proc : process(exitcond_flatten2_reg_804_pp0_iter1_reg, ap_enable_reg_pp0_iter2, k_s_reg_307, tmp_10_reg_847, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            if ((exitcond_flatten2_reg_804_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_k_s_phi_fu_311_p6 <= ap_const_lv4_0;
            elsif ((exitcond_flatten2_reg_804_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_k_s_phi_fu_311_p6 <= tmp_10_reg_847;
            else 
                ap_phi_mux_k_s_phi_fu_311_p6 <= k_s_reg_307;
            end if;
        else 
            ap_phi_mux_k_s_phi_fu_311_p6 <= k_s_reg_307;
        end if; 
    end process;


    ap_phi_mux_l_phi_fu_353_p6_assign_proc : process(l_reg_349, exitcond_flatten2_reg_804_pp0_iter8_reg, l_mid2_reg_858, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
            if ((exitcond_flatten2_reg_804_pp0_iter8_reg = ap_const_lv1_1)) then 
                ap_phi_mux_l_phi_fu_353_p6 <= ap_const_lv8_0;
            elsif ((exitcond_flatten2_reg_804_pp0_iter8_reg = ap_const_lv1_0)) then 
                ap_phi_mux_l_phi_fu_353_p6 <= l_mid2_reg_858;
            else 
                ap_phi_mux_l_phi_fu_353_p6 <= l_reg_349;
            end if;
        else 
            ap_phi_mux_l_phi_fu_353_p6 <= l_reg_349;
        end if; 
    end process;


    ap_phi_mux_l_s_phi_fu_339_p6_assign_proc : process(l_s_reg_335, exitcond_flatten2_reg_804_pp0_iter8_reg, l_1_mid2_reg_863, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
            if ((exitcond_flatten2_reg_804_pp0_iter8_reg = ap_const_lv1_1)) then 
                ap_phi_mux_l_s_phi_fu_339_p6 <= ap_const_lv8_0;
            elsif ((exitcond_flatten2_reg_804_pp0_iter8_reg = ap_const_lv1_0)) then 
                ap_phi_mux_l_s_phi_fu_339_p6 <= l_1_mid2_reg_863;
            else 
                ap_phi_mux_l_s_phi_fu_339_p6 <= l_s_reg_335;
            end if;
        else 
            ap_phi_mux_l_s_phi_fu_339_p6 <= l_s_reg_335;
        end if; 
    end process;


    ap_phi_mux_m_cast_phi_fu_213_p6_assign_proc : process(exitcond_flatten2_reg_804, m_cast_reg_209, m_cast_mid2_reg_757, ap_condition_275)
    begin
        if ((ap_const_boolean_1 = ap_condition_275)) then
            if ((exitcond_flatten2_reg_804 = ap_const_lv1_1)) then 
                ap_phi_mux_m_cast_phi_fu_213_p6 <= ap_const_lv2_0;
            elsif ((exitcond_flatten2_reg_804 = ap_const_lv1_0)) then 
                ap_phi_mux_m_cast_phi_fu_213_p6 <= m_cast_mid2_reg_757;
            else 
                ap_phi_mux_m_cast_phi_fu_213_p6 <= m_cast_reg_209;
            end if;
        else 
            ap_phi_mux_m_cast_phi_fu_213_p6 <= m_cast_reg_209;
        end if; 
    end process;


    ap_phi_mux_n_phi_fu_227_p6_assign_proc : process(exitcond_flatten2_reg_804, n_reg_223, n_1_reg_774, ap_condition_275)
    begin
        if ((ap_const_boolean_1 = ap_condition_275)) then
            if ((exitcond_flatten2_reg_804 = ap_const_lv1_1)) then 
                ap_phi_mux_n_phi_fu_227_p6 <= ap_const_lv2_0;
            elsif ((exitcond_flatten2_reg_804 = ap_const_lv1_0)) then 
                ap_phi_mux_n_phi_fu_227_p6 <= n_1_reg_774;
            else 
                ap_phi_mux_n_phi_fu_227_p6 <= n_reg_223;
            end if;
        else 
            ap_phi_mux_n_phi_fu_227_p6 <= n_reg_223;
        end if; 
    end process;


    ap_phi_mux_tmp_1_phi_fu_199_p6_assign_proc : process(exitcond_flatten2_reg_804, tmp_1_reg_195, tmp_3_reg_789, ap_condition_275)
    begin
        if ((ap_const_boolean_1 = ap_condition_275)) then
            if ((exitcond_flatten2_reg_804 = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_1_phi_fu_199_p6 <= ap_const_lv1_0;
            elsif ((exitcond_flatten2_reg_804 = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_1_phi_fu_199_p6 <= tmp_3_reg_789;
            else 
                ap_phi_mux_tmp_1_phi_fu_199_p6 <= tmp_1_reg_195;
            end if;
        else 
            ap_phi_mux_tmp_1_phi_fu_199_p6 <= tmp_1_reg_195;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten1_fu_539_p2 <= "1" when (indvar_flatten_next1_fu_519_p3 = ap_const_lv8_7E) else "0";
    exitcond_flatten2_fu_545_p2 <= "1" when (ap_phi_mux_indvar_flatten2_phi_fu_297_p6 = ap_const_lv11_6E3) else "0";
    exitcond_flatten_fu_533_p2 <= "1" when (indvar_flatten_next_fu_505_p3 = ap_const_lv4_9) else "0";
    exitcond_flatten_mid_fu_389_p2 <= (not_exitcond_flatten_fu_377_p2 and ap_phi_mux_exitcond_flatten4_phi_fu_185_p6);
    exitcond_flatten_not_fu_423_p2 <= (ap_phi_mux_exitcond_flatten4_phi_fu_185_p6 xor ap_const_lv1_1);

    grp_fu_631_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_631_ce <= ap_const_logic_1;
        else 
            grp_fu_631_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_715_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_715_ce <= ap_const_logic_1;
        else 
            grp_fu_715_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_715_p0 <= ap_const_lv11_C4(9 - 1 downto 0);
    grp_fu_715_p1 <= grp_fu_715_p10(4 - 1 downto 0);
    grp_fu_715_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_631_p2),11));
    grp_fu_715_p2 <= grp_fu_715_p20(8 - 1 downto 0);
    grp_fu_715_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_1_mid2_reg_863),11));
    i_1_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_i_phi_fu_283_p6));
    i_mid2_fu_395_p3 <= 
        i_1_fu_363_p2 when (ap_phi_mux_exitcond_flatten3_phi_fu_170_p6(0) = '1') else 
        ap_phi_mux_i_phi_fu_283_p6;
    indvar_flatten17_op_fu_513_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten1_phi_fu_269_p6) + unsigned(ap_const_lv8_1));
    indvar_flatten_next1_fu_519_p3 <= 
        ap_const_lv8_1 when (ap_phi_mux_exitcond_flatten3_phi_fu_170_p6(0) = '1') else 
        indvar_flatten17_op_fu_513_p2;
    indvar_flatten_next2_fu_487_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(ap_phi_mux_indvar_flatten2_phi_fu_297_p6));
    indvar_flatten_next_fu_505_p3 <= 
        ap_const_lv4_1 when (tmp_fu_409_p2(0) = '1') else 
        indvar_flatten_op_fu_499_p2;
    indvar_flatten_op_fu_499_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_241_p6) + unsigned(ap_const_lv4_1));

    internal_ap_ready_assign_proc : process(exitcond_flatten2_reg_804_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_804_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_403_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(j_mid_fu_369_p3));
    j_mid2_fu_441_p3 <= 
        j_1_fu_403_p2 when (exitcond_flatten_mid_fu_389_p2(0) = '1') else 
        j_mid_fu_369_p3;
    j_mid_fu_369_p3 <= 
        ap_const_lv4_0 when (ap_phi_mux_exitcond_flatten3_phi_fu_170_p6(0) = '1') else 
        ap_phi_mux_j_phi_fu_255_p6;
    k_1_mid2_fu_571_p3 <= 
        k_2_dup_fu_565_p2 when (tmp_3_mid1_reg_740(0) = '1') else 
        k_1_mid_fu_558_p3;
    k_1_mid_fu_558_p3 <= 
        ap_const_lv4_0 when (tmp_reg_734(0) = '1') else 
        ap_phi_mux_k_s_phi_fu_311_p6;
    k_2_dup_fu_565_p2 <= std_logic_vector(unsigned(ap_const_lv4_3) + unsigned(k_mid_fu_551_p3));
    k_mid2_fu_581_p3 <= 
        k_2_dup_fu_565_p2 when (tmp_3_mid1_reg_740(0) = '1') else 
        k_mid_fu_551_p3;
    k_mid_fu_551_p3 <= 
        ap_const_lv4_0 when (tmp_reg_734(0) = '1') else 
        ap_phi_mux_k_phi_fu_325_p6;
    l_1_mid2_fu_694_p3 <= 
        tmp_2_fu_688_p2 when (exitcond_flatten_mid_reg_723_pp0_iter7_reg(0) = '1') else 
        l_1_mid_fu_672_p3;
    l_1_mid_fu_672_p3 <= 
        l_2_dup_fu_666_p2 when (exitcond_flatten3_reg_166_pp0_iter7_reg(0) = '1') else 
        ap_phi_mux_l_s_phi_fu_339_p6;
    l_2_dup_fu_666_p2 <= std_logic_vector(unsigned(ap_const_lv8_E) + unsigned(ap_phi_mux_l_phi_fu_353_p6));
    l_mid2_fu_680_p3 <= 
        l_2_dup_fu_666_p2 when (exitcond_flatten3_reg_166_pp0_iter7_reg(0) = '1') else 
        ap_phi_mux_l_phi_fu_353_p6;
    m_cast_mid2_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_cast_mid2_reg_757),4));
    m_cast_mid2_fu_475_p3 <= 
        m_fu_449_p2 when (tmp_3_mid1_fu_435_p2(0) = '1') else 
        m_mid_fu_415_p3;
    m_fu_449_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_mid_fu_415_p3));
    m_mid_fu_415_p3 <= 
        ap_const_lv2_0 when (tmp_fu_409_p2(0) = '1') else 
        ap_phi_mux_m_cast_phi_fu_213_p6;
    n_1_fu_493_p2 <= std_logic_vector(unsigned(n_mid2_fu_467_p3) + unsigned(ap_const_lv2_1));
    n_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_mid2_reg_752),4));
    n_mid2_fu_467_p3 <= 
        ap_const_lv2_0 when (tmp_5_fu_461_p2(0) = '1') else 
        ap_phi_mux_n_phi_fu_227_p6;
    newIndex_trunc_fu_611_p2 <= std_logic_vector(unsigned(tmp_7_reg_764) + unsigned(m_cast_mid2_reg_757));
    not_exitcond_flatten_1_fu_429_p2 <= (exitcond_flatten_not_fu_423_p2 or ap_phi_mux_exitcond_flatten3_phi_fu_170_p6);
    not_exitcond_flatten_fu_377_p2 <= (ap_phi_mux_exitcond_flatten3_phi_fu_170_p6 xor ap_const_lv1_1);
    resampled_0_V_address0 <= tmp_17_cast_fu_708_p1(10 - 1 downto 0);

    resampled_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            resampled_0_V_ce0 <= ap_const_logic_1;
        else 
            resampled_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    resampled_0_V_d0 <= tmp_12_reg_852_pp0_iter9_reg;

    resampled_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_15_reg_843_pp0_iter9_reg, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_15_reg_843_pp0_iter9_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            resampled_0_V_we0 <= ap_const_logic_1;
        else 
            resampled_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    resampled_1_V_address0 <= tmp_17_cast_fu_708_p1(10 - 1 downto 0);

    resampled_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            resampled_1_V_ce0 <= ap_const_logic_1;
        else 
            resampled_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    resampled_1_V_d0 <= tmp_12_reg_852_pp0_iter9_reg;

    resampled_1_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_15_reg_843_pp0_iter9_reg, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_15_reg_843_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            resampled_1_V_we0 <= ap_const_logic_1;
        else 
            resampled_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rewind_ap_ready_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_flatten2_fu_545_p2, rewind_ap_ready_reg)
    begin
        if (((rewind_ap_ready_reg = ap_const_logic_1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            rewind_ap_ready <= ap_const_logic_1;
        else 
            rewind_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    rewind_enable_assign_proc : process(ap_start, rewind_ap_ready_reg)
    begin
        if (((rewind_ap_ready_reg = ap_const_logic_0) and (ap_start = ap_const_logic_1))) then 
            rewind_enable <= ap_const_logic_1;
        else 
            rewind_enable <= ap_const_logic_0;
        end if; 
    end process;

    square_image_0_V_address0 <= tmp_11_fu_623_p1(6 - 1 downto 0);

    square_image_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            square_image_0_V_ce0 <= ap_const_logic_1;
        else 
            square_image_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    square_image_1_V_address0 <= tmp_11_fu_623_p1(6 - 1 downto 0);

    square_image_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            square_image_1_V_ce0 <= ap_const_logic_1;
        else 
            square_image_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    square_image_2_V_address0 <= tmp_11_fu_623_p1(6 - 1 downto 0);

    square_image_2_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            square_image_2_V_ce0 <= ap_const_logic_1;
        else 
            square_image_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    square_image_3_V_address0 <= tmp_11_fu_623_p1(6 - 1 downto 0);

    square_image_3_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            square_image_3_V_ce0 <= ap_const_logic_1;
        else 
            square_image_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_643_p2 <= std_logic_vector(unsigned(k_1_mid2_fu_571_p3) + unsigned(ap_const_lv4_1));
    tmp_11_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_615_p3),64));
    tmp_12_fu_652_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_reg_818),32));
    tmp_15_fu_637_p2 <= "1" when (unsigned(k_1_mid2_fu_571_p3) < unsigned(ap_const_lv4_5)) else "0";
        tmp_17_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_reg_874),64));

    tmp_2_fu_688_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(l_1_mid_fu_672_p3));
    tmp_3_fu_527_p2 <= "1" when (n_1_fu_493_p2 = ap_const_lv2_3) else "0";
    tmp_3_mid1_fu_435_p2 <= (tmp_3_mid_fu_383_p2 and not_exitcond_flatten_1_fu_429_p2);
    tmp_3_mid_fu_383_p2 <= (not_exitcond_flatten_fu_377_p2 and ap_phi_mux_tmp_1_phi_fu_199_p6);
    tmp_4_fu_455_p2 <= (tmp_3_mid1_fu_435_p2 or exitcond_flatten_mid_fu_389_p2);
    tmp_5_fu_461_p2 <= (tmp_4_fu_455_p2 or ap_phi_mux_exitcond_flatten3_phi_fu_170_p6);
    tmp_6_fu_591_p2 <= std_logic_vector(unsigned(n_cast_fu_588_p1) + unsigned(j_mid2_reg_746));
    tmp_7_fu_483_p1 <= i_mid2_fu_395_p3(2 - 1 downto 0);
    tmp_8_fu_596_p2 <= std_logic_vector(unsigned(m_cast_mid2_cast_fu_578_p1) + unsigned(i_mid2_reg_728));
    tmp_9_fu_615_p3 <= (newIndex_trunc_fu_611_p2 & tmp_6_fu_591_p2);
    tmp_fu_409_p2 <= (exitcond_flatten_mid_fu_389_p2 or ap_phi_mux_exitcond_flatten3_phi_fu_170_p6);
end behav;
