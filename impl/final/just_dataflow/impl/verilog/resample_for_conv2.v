// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module resample_for_conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        square_image_V_address0,
        square_image_V_ce0,
        square_image_V_q0,
        resampled_V_address0,
        resampled_V_ce0,
        resampled_V_we0,
        resampled_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] square_image_V_address0;
output   square_image_V_ce0;
input  [24:0] square_image_V_q0;
output  [10:0] resampled_V_address0;
output   resampled_V_ce0;
output   resampled_V_we0;
output  [24:0] resampled_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg square_image_V_ce0;
reg resampled_V_ce0;
reg resampled_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_1_fu_173_p2;
reg   [3:0] i_1_reg_293;
wire    ap_CS_fsm_state2;
wire   [7:0] l_2_fu_179_p2;
reg   [7:0] l_2_reg_298;
wire   [0:0] tmp_fu_167_p2;
wire   [3:0] j_1_fu_191_p2;
reg   [3:0] j_1_reg_306;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp_1_cast_fu_197_p1;
reg   [10:0] tmp_1_cast_reg_311;
wire   [0:0] tmp_s_fu_185_p2;
wire   [1:0] m_1_fu_211_p2;
reg   [1:0] m_1_reg_319;
wire    ap_CS_fsm_state4;
wire   [3:0] k_2_fu_217_p2;
reg   [3:0] k_2_reg_324;
wire   [0:0] tmp_2_fu_205_p2;
wire   [3:0] tmp_4_fu_223_p2;
reg   [3:0] tmp_4_reg_329;
wire   [7:0] tmp_3_fu_229_p2;
wire   [1:0] n_1_fu_245_p2;
reg   [1:0] n_1_reg_342;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_6_fu_239_p2;
wire   [3:0] tmp_10_fu_273_p2;
reg   [3:0] tmp_10_reg_357;
wire   [10:0] grp_fu_283_p3;
reg   [10:0] tmp_11_reg_362;
wire    ap_CS_fsm_state6;
reg   [24:0] square_image_V_load_reg_367;
reg   [3:0] i_reg_76;
reg    ap_block_state1;
reg   [7:0] l_reg_88;
reg   [3:0] j_reg_100;
reg   [7:0] l_1_reg_112;
reg   [3:0] k_reg_123;
reg   [1:0] m_reg_135;
reg   [3:0] k_1_reg_146;
wire    ap_CS_fsm_state7;
reg   [1:0] n_reg_156;
wire   [63:0] tmp_13_fu_268_p1;
wire   [63:0] tmp_13_cast_fu_279_p1;
wire   [3:0] m_cast6_fu_201_p1;
wire   [3:0] n_cast5_fu_235_p1;
wire   [3:0] tmp_8_fu_255_p2;
wire   [7:0] tmp_12_fu_261_p3;
wire   [3:0] grp_fu_283_p0;
wire   [8:0] grp_fu_283_p1;
wire   [7:0] grp_fu_283_p2;
reg   [6:0] ap_NS_fsm;
wire   [10:0] grp_fu_283_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

CNN_mac_muladd_4neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
CNN_mac_muladd_4neOg_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_283_p0),
    .din1(grp_fu_283_p1),
    .din2(grp_fu_283_p2),
    .ce(1'b1),
    .dout(grp_fu_283_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_76 <= i_1_reg_293;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_76 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_100 <= j_1_reg_306;
    end else if (((tmp_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_100 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_1_reg_146 <= tmp_10_reg_357;
    end else if (((tmp_2_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_1_reg_146 <= k_reg_123;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_reg_123 <= k_2_reg_324;
    end else if (((tmp_s_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_123 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        l_1_reg_112 <= tmp_3_fu_229_p2;
    end else if (((tmp_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        l_1_reg_112 <= l_reg_88;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        l_reg_88 <= l_2_reg_298;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_reg_88 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_reg_135 <= m_1_reg_319;
    end else if (((tmp_s_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_reg_135 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_reg_156 <= n_1_reg_342;
    end else if (((tmp_2_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        n_reg_156 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_293 <= i_1_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_306 <= j_1_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_2_reg_324 <= k_2_fu_217_p2;
        tmp_4_reg_329 <= tmp_4_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        l_2_reg_298 <= l_2_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_1_reg_319 <= m_1_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        n_1_reg_342 <= n_1_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        square_image_V_load_reg_367 <= square_image_V_q0;
        tmp_11_reg_362 <= grp_fu_283_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_10_reg_357 <= tmp_10_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_1_cast_reg_311[7 : 0] <= tmp_1_cast_fu_197_p1[7 : 0];
    end
end

always @ (*) begin
    if (((tmp_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        resampled_V_ce0 = 1'b1;
    end else begin
        resampled_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        resampled_V_we0 = 1'b1;
    end else begin
        resampled_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        square_image_V_ce0 = 1'b1;
    end else begin
        square_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_s_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_2_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_6_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_fu_283_p0 = grp_fu_283_p00;

assign grp_fu_283_p00 = k_1_reg_146;

assign grp_fu_283_p1 = 11'd196;

assign grp_fu_283_p2 = tmp_1_cast_reg_311;

assign i_1_fu_173_p2 = (i_reg_76 + 4'd1);

assign j_1_fu_191_p2 = (j_reg_100 + 4'd1);

assign k_2_fu_217_p2 = (k_reg_123 + 4'd3);

assign l_2_fu_179_p2 = (l_reg_88 + 8'd14);

assign m_1_fu_211_p2 = (m_reg_135 + 2'd1);

assign m_cast6_fu_201_p1 = m_reg_135;

assign n_1_fu_245_p2 = (n_reg_156 + 2'd1);

assign n_cast5_fu_235_p1 = n_reg_156;

assign resampled_V_address0 = tmp_13_cast_fu_279_p1;

assign resampled_V_d0 = square_image_V_load_reg_367;

assign square_image_V_address0 = tmp_13_fu_268_p1;

assign tmp_10_fu_273_p2 = (k_1_reg_146 + 4'd1);

assign tmp_12_fu_261_p3 = {{tmp_4_reg_329}, {tmp_8_fu_255_p2}};

assign tmp_13_cast_fu_279_p1 = tmp_11_reg_362;

assign tmp_13_fu_268_p1 = tmp_12_fu_261_p3;

assign tmp_1_cast_fu_197_p1 = l_1_reg_112;

assign tmp_2_fu_205_p2 = ((m_reg_135 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_3_fu_229_p2 = (l_1_reg_112 + 8'd1);

assign tmp_4_fu_223_p2 = (m_cast6_fu_201_p1 + i_reg_76);

assign tmp_6_fu_239_p2 = ((n_reg_156 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_8_fu_255_p2 = (n_cast5_fu_235_p1 + j_reg_100);

assign tmp_fu_167_p2 = ((i_reg_76 == 4'd14) ? 1'b1 : 1'b0);

assign tmp_s_fu_185_p2 = ((j_reg_100 == 4'd14) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_311[10:8] <= 3'b000;
end

endmodule //resample_for_conv2
