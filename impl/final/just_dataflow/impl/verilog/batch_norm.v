// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module batch_norm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_image_V_address0,
        in_image_V_ce0,
        in_image_V_q0,
        A_V_dout,
        A_V_empty_n,
        A_V_read,
        B_V_dout,
        B_V_empty_n,
        B_V_read,
        out_image_V_address0,
        out_image_V_ce0,
        out_image_V_we0,
        out_image_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] in_image_V_address0;
output   in_image_V_ce0;
input  [24:0] in_image_V_q0;
input  [17:0] A_V_dout;
input   A_V_empty_n;
output   A_V_read;
input  [17:0] B_V_dout;
input   B_V_empty_n;
output   B_V_read;
output  [9:0] out_image_V_address0;
output   out_image_V_ce0;
output   out_image_V_we0;
output  [47:0] out_image_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_image_V_ce0;
reg A_V_read;
reg B_V_read;
reg out_image_V_ce0;
reg out_image_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    A_V_blk_n;
reg    B_V_blk_n;
wire  signed [36:0] OP2_V_i_fu_118_p1;
reg  signed [36:0] OP2_V_i_reg_219;
reg    ap_block_state1;
wire  signed [36:0] tmp_94_cast_i_fu_130_p1;
reg  signed [36:0] tmp_94_cast_i_reg_224;
wire   [4:0] j_fu_140_p2;
reg   [4:0] j_reg_232;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_80_fu_170_p2;
reg   [10:0] tmp_80_reg_237;
wire   [0:0] tmp_i_fu_134_p2;
wire   [4:0] k_fu_182_p2;
reg   [4:0] k_reg_245;
wire    ap_CS_fsm_state3;
wire  signed [63:0] tmp_99_cast_fu_197_p1;
reg  signed [63:0] tmp_99_cast_reg_250;
wire   [0:0] tmp_91_i_fu_176_p2;
reg  signed [24:0] in_image_V_load_reg_260;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire  signed [36:0] grp_fu_213_p3;
reg  signed [36:0] p_Val2_i_54_reg_270;
wire    ap_CS_fsm_state6;
reg   [4:0] j_i_reg_96;
reg   [4:0] k_i_reg_107;
wire    ap_CS_fsm_state7;
wire   [33:0] tmp_94_i_fu_122_p3;
wire   [9:0] tmp_fu_146_p3;
wire   [6:0] tmp_s_fu_158_p3;
wire   [10:0] p_shl_cast_fu_154_p1;
wire   [10:0] p_shl1_cast_fu_166_p1;
wire   [10:0] tmp_92_i_cast_fu_188_p1;
wire   [10:0] tmp_81_fu_192_p2;
wire  signed [17:0] grp_fu_213_p1;
wire  signed [33:0] grp_fu_213_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

CNN_mac_muladd_25dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 37 ))
CNN_mac_muladd_25dEe_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_image_V_load_reg_260),
    .din1(grp_fu_213_p1),
    .din2(grp_fu_213_p2),
    .ce(1'b1),
    .dout(grp_fu_213_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_i_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_91_i_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_i_reg_96 <= j_reg_232;
    end else if ((~((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_i_reg_96 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_i_reg_107 <= k_reg_245;
    end else if (((tmp_i_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_i_reg_107 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        OP2_V_i_reg_219 <= OP2_V_i_fu_118_p1;
        tmp_94_cast_i_reg_224[36 : 16] <= tmp_94_cast_i_fu_130_p1[36 : 16];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_image_V_load_reg_260 <= in_image_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_232 <= j_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_245 <= k_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_i_54_reg_270 <= grp_fu_213_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_80_reg_237[10 : 2] <= tmp_80_fu_170_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_91_i_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_99_cast_reg_250 <= tmp_99_cast_fu_197_p1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        A_V_blk_n = A_V_empty_n;
    end else begin
        A_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        A_V_read = 1'b1;
    end else begin
        A_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        B_V_blk_n = B_V_empty_n;
    end else begin
        B_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        B_V_read = 1'b1;
    end else begin
        B_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_V_ce0 = 1'b1;
    end else begin
        in_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_V_ce0 = 1'b1;
    end else begin
        out_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_V_we0 = 1'b1;
    end else begin
        out_image_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_i_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_91_i_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP2_V_i_fu_118_p1 = $signed(A_V_dout);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((1'b0 == B_V_empty_n) | (1'b0 == A_V_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_fu_213_p1 = OP2_V_i_reg_219;

assign grp_fu_213_p2 = tmp_94_cast_i_reg_224;

assign in_image_V_address0 = tmp_99_cast_fu_197_p1;

assign j_fu_140_p2 = (j_i_reg_96 + 5'd1);

assign k_fu_182_p2 = (k_i_reg_107 + 5'd1);

assign out_image_V_address0 = tmp_99_cast_reg_250;

assign out_image_V_d0 = {{p_Val2_i_54_reg_270}, {11'd0}};

assign p_shl1_cast_fu_166_p1 = tmp_s_fu_158_p3;

assign p_shl_cast_fu_154_p1 = tmp_fu_146_p3;

assign tmp_80_fu_170_p2 = (p_shl_cast_fu_154_p1 - p_shl1_cast_fu_166_p1);

assign tmp_81_fu_192_p2 = (tmp_92_i_cast_fu_188_p1 + tmp_80_reg_237);

assign tmp_91_i_fu_176_p2 = ((k_i_reg_107 == 5'd28) ? 1'b1 : 1'b0);

assign tmp_92_i_cast_fu_188_p1 = k_i_reg_107;

assign tmp_94_cast_i_fu_130_p1 = $signed(tmp_94_i_fu_122_p3);

assign tmp_94_i_fu_122_p3 = {{B_V_dout}, {16'd0}};

assign tmp_99_cast_fu_197_p1 = $signed(tmp_81_fu_192_p2);

assign tmp_fu_146_p3 = {{j_i_reg_96}, {5'd0}};

assign tmp_i_fu_134_p2 = ((j_i_reg_96 == 5'd28) ? 1'b1 : 1'b0);

assign tmp_s_fu_158_p3 = {{j_i_reg_96}, {2'd0}};

always @ (posedge ap_clk) begin
    tmp_94_cast_i_reg_224[15:0] <= 16'b0000000000000000;
    tmp_80_reg_237[1:0] <= 2'b00;
end

endmodule //batch_norm
