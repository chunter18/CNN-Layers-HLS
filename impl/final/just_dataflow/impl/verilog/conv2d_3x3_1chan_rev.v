// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2d_3x3_1chan_rev (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_image_V_address0,
        in_image_V_ce0,
        in_image_V_q0,
        kernel_V_address0,
        kernel_V_ce0,
        kernel_V_q0,
        bias_V_dout,
        bias_V_empty_n,
        bias_V_read,
        out_image_V_address0,
        out_image_V_ce0,
        out_image_V_we0,
        out_image_V_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [12:0] in_image_V_address0;
output   in_image_V_ce0;
input  [17:0] in_image_V_q0;
output  [3:0] kernel_V_address0;
output   kernel_V_ce0;
input  [17:0] kernel_V_q0;
input  [47:0] bias_V_dout;
input   bias_V_empty_n;
output   bias_V_read;
output  [9:0] out_image_V_address0;
output   out_image_V_ce0;
output   out_image_V_we0;
output  [24:0] out_image_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_image_V_ce0;
reg kernel_V_ce0;
reg bias_V_read;
reg out_image_V_ce0;
reg out_image_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    bias_V_blk_n;
wire  signed [55:0] tmp_86_cast_i_fu_180_p1;
reg  signed [55:0] tmp_86_cast_i_reg_450;
reg    ap_block_state1;
wire   [9:0] i_fu_200_p2;
reg   [9:0] i_reg_458;
wire    ap_CS_fsm_state2;
wire   [12:0] tmp_i_cast_fu_206_p1;
reg   [12:0] tmp_i_cast_reg_463;
wire   [0:0] tmp_i_fu_194_p2;
wire   [3:0] j_fu_216_p2;
reg   [3:0] j_reg_471;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_75_i_fu_222_p2;
reg   [0:0] tmp_75_i_reg_476;
wire   [0:0] tmp_74_i_fu_210_p2;
wire   [12:0] next_mul_fu_233_p2;
reg   [12:0] next_mul_reg_481;
wire   [0:0] tmp_81_i_fu_249_p2;
reg   [0:0] tmp_81_i_reg_496;
reg  signed [17:0] kernel_V_load_reg_500;
wire    ap_CS_fsm_state4;
reg  signed [17:0] in_image_V_load_reg_505;
wire    ap_CS_fsm_state5;
wire  signed [35:0] grp_fu_424_p2;
reg  signed [35:0] p_Val2_s_reg_520;
wire    ap_CS_fsm_state6;
wire   [24:0] acc_V_fu_292_p4;
reg   [24:0] acc_V_reg_525;
wire    ap_CS_fsm_state7;
reg   [24:0] tmp_88_i_reg_530;
reg   [9:0] i_i_reg_147;
reg   [3:0] j_i_reg_158;
wire    ap_CS_fsm_state8;
reg   [12:0] phi_mul_reg_169;
wire   [63:0] tmp_90_cast_fu_244_p1;
wire   [63:0] tmp_76_i_fu_228_p1;
wire  signed [63:0] tmp_95_cast_fu_371_p1;
reg   [31:0] y_i_fu_90;
wire   [31:0] p_i_fu_402_p3;
reg   [31:0] x_i_fu_94;
wire   [31:0] p_x_1_i_fu_394_p3;
reg   [24:0] p_Val2_16_fu_98;
wire   [12:0] tmp_s_fu_239_p2;
wire   [24:0] tmp_77_fu_264_p3;
wire   [34:0] tmp_78_i_fu_271_p3;
wire   [36:0] tmp_78_cast5_i_fu_279_p1;
wire   [36:0] tmp_79_i_fu_283_p1;
wire   [36:0] p_Val2_17_fu_286_p2;
wire   [55:0] tmp_85_i_fu_302_p3;
wire   [55:0] p_Val2_20_fu_310_p2;
wire   [5:0] tmp_7_fu_335_p1;
wire   [8:0] tmp_8_fu_347_p1;
wire   [10:0] p_shl_cast_fu_339_p3;
wire   [10:0] p_shl1_cast_fu_351_p3;
wire   [10:0] tmp_fu_331_p1;
wire   [10:0] tmp_78_fu_359_p2;
wire   [10:0] tmp_79_fu_365_p2;
wire   [31:0] y_fu_376_p2;
wire   [0:0] tmp_89_i_fu_382_p2;
wire   [31:0] x_fu_388_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

CNN_mul_mul_18s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
CNN_mul_mul_18s_1cud_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_V_load_reg_500),
    .din1(in_image_V_load_reg_505),
    .ce(1'b1),
    .dout(grp_fu_424_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_i_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_74_i_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_i_reg_147 <= i_reg_458;
    end else if ((~((bias_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_147 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_i_reg_158 <= j_reg_471;
    end else if (((tmp_i_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_158 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_169 <= next_mul_reg_481;
    end else if (((tmp_i_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_169 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_81_i_reg_496 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        x_i_fu_94 <= p_x_1_i_fu_394_p3;
    end else if ((~((bias_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_i_fu_94 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_81_i_reg_496 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        y_i_fu_90 <= p_i_fu_402_p3;
    end else if ((~((bias_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_i_fu_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_V_reg_525 <= {{p_Val2_17_fu_286_p2[34:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_458 <= i_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_image_V_load_reg_505 <= in_image_V_q0;
        kernel_V_load_reg_500 <= kernel_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_471 <= j_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_74_i_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        next_mul_reg_481 <= next_mul_fu_233_p2;
        tmp_75_i_reg_476 <= tmp_75_i_fu_222_p2;
        tmp_81_i_reg_496 <= tmp_81_i_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_16_fu_98 <= acc_V_reg_525;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_s_reg_520 <= grp_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((bias_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_86_cast_i_reg_450 <= tmp_86_cast_i_fu_180_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_81_i_reg_496 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_88_i_reg_530 <= {{p_Val2_20_fu_310_p2[55:31]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_i_cast_reg_463[9 : 0] <= tmp_i_cast_fu_206_p1[9 : 0];
    end
end

always @ (*) begin
    if (((tmp_i_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_V_blk_n = bias_V_empty_n;
    end else begin
        bias_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((bias_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_V_read = 1'b1;
    end else begin
        bias_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_V_ce0 = 1'b1;
    end else begin
        in_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_V_ce0 = 1'b1;
    end else begin
        kernel_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_image_V_ce0 = 1'b1;
    end else begin
        out_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_81_i_reg_496 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        out_image_V_we0 = 1'b1;
    end else begin
        out_image_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((bias_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_i_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_74_i_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_V_fu_292_p4 = {{p_Val2_17_fu_286_p2[34:10]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((bias_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign i_fu_200_p2 = (i_i_reg_147 + 10'd1);

assign in_image_V_address0 = tmp_90_cast_fu_244_p1;

assign j_fu_216_p2 = (j_i_reg_158 + 4'd1);

assign kernel_V_address0 = tmp_76_i_fu_228_p1;

assign next_mul_fu_233_p2 = (phi_mul_reg_169 + 13'd784);

assign out_image_V_address0 = tmp_95_cast_fu_371_p1;

assign out_image_V_d0 = tmp_88_i_reg_530;

assign p_Val2_17_fu_286_p2 = (tmp_78_cast5_i_fu_279_p1 + tmp_79_i_fu_283_p1);

assign p_Val2_20_fu_310_p2 = ($signed(tmp_85_i_fu_302_p3) + $signed(tmp_86_cast_i_reg_450));

assign p_i_fu_402_p3 = ((tmp_89_i_fu_382_p2[0:0] === 1'b1) ? 32'd0 : y_fu_376_p2);

assign p_shl1_cast_fu_351_p3 = {{tmp_8_fu_347_p1}, {2'd0}};

assign p_shl_cast_fu_339_p3 = {{tmp_7_fu_335_p1}, {5'd0}};

assign p_x_1_i_fu_394_p3 = ((tmp_89_i_fu_382_p2[0:0] === 1'b1) ? x_fu_388_p2 : x_i_fu_94);

assign tmp_74_i_fu_210_p2 = ((j_i_reg_158 == 4'd9) ? 1'b1 : 1'b0);

assign tmp_75_i_fu_222_p2 = ((j_i_reg_158 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_76_i_fu_228_p1 = j_i_reg_158;

assign tmp_77_fu_264_p3 = ((tmp_75_i_reg_476[0:0] === 1'b1) ? 25'd0 : p_Val2_16_fu_98);

assign tmp_78_cast5_i_fu_279_p1 = tmp_78_i_fu_271_p3;

assign tmp_78_fu_359_p2 = (p_shl_cast_fu_339_p3 - p_shl1_cast_fu_351_p3);

assign tmp_78_i_fu_271_p3 = {{tmp_77_fu_264_p3}, {10'd0}};

assign tmp_79_fu_365_p2 = (tmp_fu_331_p1 + tmp_78_fu_359_p2);

assign tmp_79_i_fu_283_p1 = $unsigned(p_Val2_s_reg_520);

assign tmp_7_fu_335_p1 = x_i_fu_94[5:0];

assign tmp_81_i_fu_249_p2 = ((j_i_reg_158 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_85_i_fu_302_p3 = {{acc_V_fu_292_p4}, {31'd0}};

assign tmp_86_cast_i_fu_180_p1 = $signed(bias_V_dout);

assign tmp_89_i_fu_382_p2 = ((y_fu_376_p2 == 32'd28) ? 1'b1 : 1'b0);

assign tmp_8_fu_347_p1 = x_i_fu_94[8:0];

assign tmp_90_cast_fu_244_p1 = tmp_s_fu_239_p2;

assign tmp_95_cast_fu_371_p1 = $signed(tmp_79_fu_365_p2);

assign tmp_fu_331_p1 = y_i_fu_90[10:0];

assign tmp_i_cast_fu_206_p1 = i_i_reg_147;

assign tmp_i_fu_194_p2 = ((i_i_reg_147 == 10'd784) ? 1'b1 : 1'b0);

assign tmp_s_fu_239_p2 = (phi_mul_reg_169 + tmp_i_cast_reg_463);

assign x_fu_388_p2 = (32'd1 + x_i_fu_94);

assign y_fu_376_p2 = (32'd1 + y_i_fu_90);

always @ (posedge ap_clk) begin
    tmp_i_cast_reg_463[12:10] <= 3'b000;
end

endmodule //conv2d_3x3_1chan_rev
