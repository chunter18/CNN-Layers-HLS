// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module resample (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        square_image_V_address0,
        square_image_V_ce0,
        square_image_V_q0,
        resampled_V_address0,
        resampled_V_ce0,
        resampled_V_we0,
        resampled_V_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] square_image_V_address0;
output   square_image_V_ce0;
input  [17:0] square_image_V_q0;
output  [12:0] resampled_V_address0;
output   resampled_V_ce0;
output   resampled_V_we0;
output  [17:0] resampled_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg square_image_V_ce0;
reg resampled_V_ce0;
reg resampled_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_2_fu_181_p2;
reg   [4:0] i_2_reg_332;
wire    ap_CS_fsm_state2;
wire   [9:0] l_3_fu_187_p2;
reg   [9:0] l_3_reg_337;
wire   [0:0] tmp_fu_175_p2;
wire   [4:0] j_2_fu_199_p2;
reg   [4:0] j_2_reg_345;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_11_cast_fu_205_p1;
reg   [12:0] tmp_11_cast_reg_350;
wire   [0:0] tmp_s_fu_193_p2;
wire   [1:0] m_2_fu_219_p2;
reg   [1:0] m_2_reg_358;
wire    ap_CS_fsm_state4;
wire   [3:0] k_3_fu_225_p2;
reg   [3:0] k_3_reg_363;
wire   [0:0] tmp_12_fu_213_p2;
wire   [10:0] tmp_23_fu_261_p2;
reg   [10:0] tmp_23_reg_368;
wire   [9:0] tmp_13_fu_267_p2;
wire   [1:0] n_2_fu_283_p2;
reg   [1:0] n_2_reg_381;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_16_fu_277_p2;
wire   [10:0] tmp_26_fu_303_p2;
reg   [10:0] tmp_26_reg_391;
wire   [3:0] tmp_20_fu_308_p2;
reg   [3:0] tmp_20_reg_396;
wire   [12:0] grp_fu_322_p3;
reg   [12:0] tmp_25_reg_401;
wire    ap_CS_fsm_state6;
reg   [17:0] square_image_V_load_reg_411;
wire    ap_CS_fsm_state7;
reg   [4:0] i_reg_84;
reg    ap_block_state1;
reg   [9:0] l_reg_96;
reg   [4:0] j_reg_108;
reg   [9:0] l_1_reg_120;
reg   [3:0] k_reg_131;
reg   [1:0] m_reg_143;
reg   [3:0] k_1_reg_154;
wire    ap_CS_fsm_state8;
reg   [1:0] n_reg_164;
wire  signed [63:0] tmp_28_cast_fu_314_p1;
wire   [63:0] tmp_27_cast_fu_318_p1;
wire   [4:0] m_cast6_fu_209_p1;
wire   [4:0] tmp_14_fu_231_p2;
wire   [9:0] tmp_21_fu_237_p3;
wire   [5:0] tmp_22_fu_249_p3;
wire   [10:0] p_shl_cast_fu_245_p1;
wire   [10:0] p_shl1_cast_fu_257_p1;
wire   [4:0] n_cast5_fu_273_p1;
wire   [4:0] tmp_18_fu_293_p2;
wire   [10:0] tmp_19_cast_fu_299_p1;
wire   [3:0] grp_fu_322_p0;
wire   [10:0] grp_fu_322_p1;
wire   [9:0] grp_fu_322_p2;
reg   [7:0] ap_NS_fsm;
wire   [12:0] grp_fu_322_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

CNN_mac_muladd_4nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 13 ))
CNN_mac_muladd_4nbkb_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_322_p0),
    .din1(grp_fu_322_p1),
    .din2(grp_fu_322_p2),
    .ce(1'b1),
    .dout(grp_fu_322_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_84 <= i_2_reg_332;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_84 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_12_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_108 <= j_2_reg_345;
    end else if (((tmp_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_108 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_1_reg_154 <= tmp_20_reg_396;
    end else if (((tmp_12_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_1_reg_154 <= k_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_16_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_reg_131 <= k_3_reg_363;
    end else if (((tmp_s_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_131 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_12_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        l_1_reg_120 <= tmp_13_fu_267_p2;
    end else if (((tmp_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        l_1_reg_120 <= l_reg_96;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        l_reg_96 <= l_3_reg_337;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        l_reg_96 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_16_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_reg_143 <= m_2_reg_358;
    end else if (((tmp_s_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_reg_143 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        n_reg_164 <= n_2_reg_381;
    end else if (((tmp_12_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        n_reg_164 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_332 <= i_2_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_reg_345 <= j_2_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_12_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_3_reg_363 <= k_3_fu_225_p2;
        tmp_23_reg_368[10 : 1] <= tmp_23_fu_261_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        l_3_reg_337 <= l_3_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_2_reg_358 <= m_2_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        n_2_reg_381 <= n_2_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        square_image_V_load_reg_411 <= square_image_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_11_cast_reg_350[9 : 0] <= tmp_11_cast_fu_205_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_16_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_20_reg_396 <= tmp_20_fu_308_p2;
        tmp_26_reg_391 <= tmp_26_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_25_reg_401 <= grp_fu_322_p3;
    end
end

always @ (*) begin
    if (((tmp_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        resampled_V_ce0 = 1'b1;
    end else begin
        resampled_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        resampled_V_we0 = 1'b1;
    end else begin
        resampled_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        square_image_V_ce0 = 1'b1;
    end else begin
        square_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_s_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_12_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_16_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_fu_322_p0 = grp_fu_322_p00;

assign grp_fu_322_p00 = k_1_reg_154;

assign grp_fu_322_p1 = 13'd784;

assign grp_fu_322_p2 = tmp_11_cast_reg_350;

assign i_2_fu_181_p2 = (i_reg_84 + 5'd1);

assign j_2_fu_199_p2 = (j_reg_108 + 5'd1);

assign k_3_fu_225_p2 = (k_reg_131 + 4'd3);

assign l_3_fu_187_p2 = (l_reg_96 + 10'd28);

assign m_2_fu_219_p2 = (m_reg_143 + 2'd1);

assign m_cast6_fu_209_p1 = m_reg_143;

assign n_2_fu_283_p2 = (n_reg_164 + 2'd1);

assign n_cast5_fu_273_p1 = n_reg_164;

assign p_shl1_cast_fu_257_p1 = tmp_22_fu_249_p3;

assign p_shl_cast_fu_245_p1 = tmp_21_fu_237_p3;

assign resampled_V_address0 = tmp_27_cast_fu_318_p1;

assign resampled_V_d0 = square_image_V_load_reg_411;

assign square_image_V_address0 = tmp_28_cast_fu_314_p1;

assign tmp_11_cast_fu_205_p1 = l_1_reg_120;

assign tmp_12_fu_213_p2 = ((m_reg_143 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_13_fu_267_p2 = (l_1_reg_120 + 10'd1);

assign tmp_14_fu_231_p2 = (m_cast6_fu_209_p1 + i_reg_84);

assign tmp_16_fu_277_p2 = ((n_reg_164 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_18_fu_293_p2 = (n_cast5_fu_273_p1 + j_reg_108);

assign tmp_19_cast_fu_299_p1 = tmp_18_fu_293_p2;

assign tmp_20_fu_308_p2 = (k_1_reg_154 + 4'd1);

assign tmp_21_fu_237_p3 = {{tmp_14_fu_231_p2}, {5'd0}};

assign tmp_22_fu_249_p3 = {{tmp_14_fu_231_p2}, {1'd0}};

assign tmp_23_fu_261_p2 = (p_shl_cast_fu_245_p1 - p_shl1_cast_fu_257_p1);

assign tmp_26_fu_303_p2 = (tmp_23_reg_368 + tmp_19_cast_fu_299_p1);

assign tmp_27_cast_fu_318_p1 = tmp_25_reg_401;

assign tmp_28_cast_fu_314_p1 = $signed(tmp_26_reg_391);

assign tmp_fu_175_p2 = ((i_reg_84 == 5'd28) ? 1'b1 : 1'b0);

assign tmp_s_fu_193_p2 = ((j_reg_108 == 5'd28) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_11_cast_reg_350[12:10] <= 3'b000;
    tmp_23_reg_368[0] <= 1'b0;
end

endmodule //resample
