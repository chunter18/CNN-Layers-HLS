// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pad_for_conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_image_V_address0,
        in_image_V_ce0,
        in_image_V_q0,
        out_image_V_address0,
        out_image_V_ce0,
        out_image_V_we0,
        out_image_V_d0,
        out_image_V_address1,
        out_image_V_ce1,
        out_image_V_we1,
        out_image_V_d1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] in_image_V_address0;
output   in_image_V_ce0;
input  [24:0] in_image_V_q0;
output  [7:0] out_image_V_address0;
output   out_image_V_ce0;
output   out_image_V_we0;
output  [24:0] out_image_V_d0;
output  [7:0] out_image_V_address1;
output   out_image_V_ce1;
output   out_image_V_we1;
output  [24:0] out_image_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_image_V_ce0;
reg[7:0] out_image_V_address0;
reg out_image_V_ce0;
reg out_image_V_we0;
reg[24:0] out_image_V_d0;
reg[7:0] out_image_V_address1;
reg out_image_V_ce1;
reg out_image_V_we1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_3_fu_156_p2;
reg   [4:0] i_3_reg_291;
wire    ap_CS_fsm_state2;
wire   [8:0] tmp_31_fu_167_p3;
reg   [8:0] tmp_31_reg_296;
wire   [0:0] tmp_fu_150_p2;
wire   [3:0] i_4_fu_215_p2;
reg   [3:0] i_4_reg_304;
wire    ap_CS_fsm_state4;
wire   [8:0] tmp_38_fu_245_p2;
reg   [8:0] tmp_38_reg_310;
wire   [0:0] tmp_24_fu_209_p2;
wire   [3:0] j_4_fu_257_p2;
reg   [3:0] j_4_reg_318;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_26_fu_251_p2;
reg   [24:0] in_image_V_load_reg_329;
wire    ap_CS_fsm_state6;
reg   [4:0] i_reg_116;
reg    ap_block_state1;
wire    ap_CS_fsm_state3;
reg   [3:0] i_1_reg_128;
reg   [3:0] j_reg_139;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_s_fu_162_p1;
wire   [63:0] tmp_32_fu_175_p1;
wire   [63:0] tmp_35_cast_fu_190_p1;
wire   [63:0] tmp_35_fu_200_p3;
wire  signed [63:0] tmp_43_cast_fu_272_p1;
wire   [63:0] tmp_40_fu_283_p1;
wire   [4:0] tmp_33_fu_180_p2;
wire  signed [7:0] tmp_35_cast1_fu_186_p1;
wire   [8:0] tmp_34_fu_195_p2;
wire   [7:0] tmp_36_fu_221_p3;
wire   [4:0] tmp_37_fu_233_p3;
wire   [8:0] p_shl_cast_fu_229_p1;
wire   [8:0] p_shl1_cast_fu_241_p1;
wire   [8:0] tmp_27_cast_fu_263_p1;
wire   [8:0] tmp_41_fu_267_p2;
wire   [7:0] tmp_39_fu_277_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_24_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_128 <= 4'd0;
    end else if (((tmp_26_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_128 <= i_4_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_116 <= i_3_reg_291;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_116 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_139 <= j_4_reg_318;
    end else if (((tmp_24_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_139 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_291 <= i_3_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_4_reg_304 <= i_4_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_image_V_load_reg_329 <= in_image_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_4_reg_318 <= j_4_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_31_reg_296[8 : 4] <= tmp_31_fu_167_p3[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_24_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_38_reg_310[8 : 1] <= tmp_38_fu_245_p2[8 : 1];
    end
end

always @ (*) begin
    if (((tmp_24_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_24_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_image_V_ce0 = 1'b1;
    end else begin
        in_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_V_address0 = tmp_40_fu_283_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_image_V_address0 = tmp_35_cast_fu_190_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_V_address0 = tmp_s_fu_162_p1;
    end else begin
        out_image_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_image_V_address1 = tmp_35_fu_200_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_V_address1 = tmp_32_fu_175_p1;
    end else begin
        out_image_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        out_image_V_ce0 = 1'b1;
    end else begin
        out_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        out_image_V_ce1 = 1'b1;
    end else begin
        out_image_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_V_d0 = in_image_V_load_reg_329;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        out_image_V_d0 = 25'd0;
    end else begin
        out_image_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((tmp_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_V_we0 = 1'b1;
    end else begin
        out_image_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_V_we1 = 1'b1;
    end else begin
        out_image_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_24_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_26_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign i_3_fu_156_p2 = (i_reg_116 + 5'd1);

assign i_4_fu_215_p2 = (i_1_reg_128 + 4'd1);

assign in_image_V_address0 = tmp_43_cast_fu_272_p1;

assign j_4_fu_257_p2 = (j_reg_139 + 4'd1);

assign out_image_V_d1 = 25'd0;

assign p_shl1_cast_fu_241_p1 = tmp_37_fu_233_p3;

assign p_shl_cast_fu_229_p1 = tmp_36_fu_221_p3;

assign tmp_24_fu_209_p2 = ((i_1_reg_128 == 4'd14) ? 1'b1 : 1'b0);

assign tmp_26_fu_251_p2 = ((j_reg_139 == 4'd14) ? 1'b1 : 1'b0);

assign tmp_27_cast_fu_263_p1 = j_reg_139;

assign tmp_31_fu_167_p3 = {{i_reg_116}, {4'd0}};

assign tmp_32_fu_175_p1 = tmp_31_fu_167_p3;

assign tmp_33_fu_180_p2 = (i_reg_116 ^ 5'd16);

assign tmp_34_fu_195_p2 = (tmp_31_reg_296 | 9'd15);

assign tmp_35_cast1_fu_186_p1 = $signed(tmp_33_fu_180_p2);

assign tmp_35_cast_fu_190_p1 = $unsigned(tmp_35_cast1_fu_186_p1);

assign tmp_35_fu_200_p3 = {{55'd0}, {tmp_34_fu_195_p2}};

assign tmp_36_fu_221_p3 = {{i_1_reg_128}, {4'd0}};

assign tmp_37_fu_233_p3 = {{i_1_reg_128}, {1'd0}};

assign tmp_38_fu_245_p2 = (p_shl_cast_fu_229_p1 - p_shl1_cast_fu_241_p1);

assign tmp_39_fu_277_p3 = {{i_4_reg_304}, {j_4_reg_318}};

assign tmp_40_fu_283_p1 = tmp_39_fu_277_p3;

assign tmp_41_fu_267_p2 = (tmp_38_reg_310 + tmp_27_cast_fu_263_p1);

assign tmp_43_cast_fu_272_p1 = $signed(tmp_41_fu_267_p2);

assign tmp_fu_150_p2 = ((i_reg_116 == 5'd16) ? 1'b1 : 1'b0);

assign tmp_s_fu_162_p1 = i_reg_116;

always @ (posedge ap_clk) begin
    tmp_31_reg_296[3:0] <= 4'b0000;
    tmp_38_reg_310[0] <= 1'b0;
end

endmodule //pad_for_conv2
