-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity batch_norm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_image_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_image_V_ce0 : OUT STD_LOGIC;
    in_image_V_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    A_V_dout : IN STD_LOGIC_VECTOR (17 downto 0);
    A_V_empty_n : IN STD_LOGIC;
    A_V_read : OUT STD_LOGIC;
    B_V_dout : IN STD_LOGIC_VECTOR (17 downto 0);
    B_V_empty_n : IN STD_LOGIC;
    B_V_read : OUT STD_LOGIC;
    out_image_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_image_V_ce0 : OUT STD_LOGIC;
    out_image_V_we0 : OUT STD_LOGIC;
    out_image_V_d0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
end;


architecture behav of batch_norm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_V_blk_n : STD_LOGIC;
    signal B_V_blk_n : STD_LOGIC;
    signal OP2_V_i_fu_118_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal OP2_V_i_reg_219 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_94_cast_i_fu_130_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_94_cast_i_reg_224 : STD_LOGIC_VECTOR (36 downto 0);
    signal j_fu_140_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_232 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_80_fu_170_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_80_reg_237 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_182_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_99_cast_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_cast_reg_250 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_i_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_image_V_load_reg_260 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_213_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_i_54_reg_270 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_i_reg_96 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_i_reg_107 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_94_i_fu_122_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_fu_146_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_158_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_154_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_166_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_92_i_cast_fu_188_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_81_fu_192_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component CNN_mac_muladd_25dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;



begin
    CNN_mac_muladd_25dEe_U22 : component CNN_mac_muladd_25dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 25,
        din1_WIDTH => 18,
        din2_WIDTH => 34,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_image_V_load_reg_260,
        din1 => grp_fu_213_p1,
        din2 => grp_fu_213_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_i_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_i_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_91_i_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_i_reg_96 <= j_reg_232;
            elsif ((not(((ap_const_logic_0 = B_V_empty_n) or (ap_const_logic_0 = A_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_i_reg_96 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k_i_reg_107 <= k_reg_245;
            elsif (((tmp_i_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_i_reg_107 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = B_V_empty_n) or (ap_const_logic_0 = A_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                OP2_V_i_reg_219 <= OP2_V_i_fu_118_p1;
                    tmp_94_cast_i_reg_224(36 downto 16) <= tmp_94_cast_i_fu_130_p1(36 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                in_image_V_load_reg_260 <= in_image_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_232 <= j_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_245 <= k_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_Val2_i_54_reg_270 <= grp_fu_213_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_80_reg_237(10 downto 2) <= tmp_80_fu_170_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_91_i_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_99_cast_reg_250 <= tmp_99_cast_fu_197_p1;
            end if;
        end if;
    end process;
    tmp_94_cast_i_reg_224(15 downto 0) <= "0000000000000000";
    tmp_80_reg_237(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, A_V_empty_n, B_V_empty_n, ap_CS_fsm_state2, tmp_i_fu_134_p2, ap_CS_fsm_state3, tmp_91_i_fu_176_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = B_V_empty_n) or (ap_const_logic_0 = A_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_i_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_91_i_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    A_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, A_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_V_blk_n <= A_V_empty_n;
        else 
            A_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, A_V_empty_n, B_V_empty_n)
    begin
        if ((not(((ap_const_logic_0 = B_V_empty_n) or (ap_const_logic_0 = A_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_V_read <= ap_const_logic_1;
        else 
            A_V_read <= ap_const_logic_0;
        end if; 
    end process;


    B_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, B_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            B_V_blk_n <= B_V_empty_n;
        else 
            B_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    B_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, A_V_empty_n, B_V_empty_n)
    begin
        if ((not(((ap_const_logic_0 = B_V_empty_n) or (ap_const_logic_0 = A_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            B_V_read <= ap_const_logic_1;
        else 
            B_V_read <= ap_const_logic_0;
        end if; 
    end process;

        OP2_V_i_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_V_dout),37));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, A_V_empty_n, B_V_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = B_V_empty_n) or (ap_const_logic_0 = A_V_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_i_fu_134_p2)
    begin
        if (((tmp_i_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_i_fu_134_p2)
    begin
        if (((tmp_i_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_213_p1 <= OP2_V_i_reg_219(18 - 1 downto 0);
    grp_fu_213_p2 <= tmp_94_cast_i_reg_224(34 - 1 downto 0);
    in_image_V_address0 <= tmp_99_cast_fu_197_p1(10 - 1 downto 0);

    in_image_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_image_V_ce0 <= ap_const_logic_1;
        else 
            in_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_140_p2 <= std_logic_vector(unsigned(j_i_reg_96) + unsigned(ap_const_lv5_1));
    k_fu_182_p2 <= std_logic_vector(unsigned(k_i_reg_107) + unsigned(ap_const_lv5_1));
    out_image_V_address0 <= tmp_99_cast_reg_250(10 - 1 downto 0);

    out_image_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_image_V_ce0 <= ap_const_logic_1;
        else 
            out_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_image_V_d0 <= (p_Val2_i_54_reg_270 & ap_const_lv11_0);

    out_image_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_image_V_we0 <= ap_const_logic_1;
        else 
            out_image_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_158_p3),11));
    p_shl_cast_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_146_p3),11));
    tmp_80_fu_170_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_154_p1) - unsigned(p_shl1_cast_fu_166_p1));
    tmp_81_fu_192_p2 <= std_logic_vector(unsigned(tmp_92_i_cast_fu_188_p1) + unsigned(tmp_80_reg_237));
    tmp_91_i_fu_176_p2 <= "1" when (k_i_reg_107 = ap_const_lv5_1C) else "0";
    tmp_92_i_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i_reg_107),11));
        tmp_94_cast_i_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_94_i_fu_122_p3),37));

    tmp_94_i_fu_122_p3 <= (B_V_dout & ap_const_lv16_0);
        tmp_99_cast_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_81_fu_192_p2),64));

    tmp_fu_146_p3 <= (j_i_reg_96 & ap_const_lv5_0);
    tmp_i_fu_134_p2 <= "1" when (j_i_reg_96 = ap_const_lv5_1C) else "0";
    tmp_s_fu_158_p3 <= (j_i_reg_96 & ap_const_lv2_0);
end behav;
