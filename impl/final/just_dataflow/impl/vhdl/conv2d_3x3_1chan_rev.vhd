-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_3x3_1chan_rev is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_image_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_image_V_ce0 : OUT STD_LOGIC;
    in_image_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    kernel_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_V_ce0 : OUT STD_LOGIC;
    kernel_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    bias_V_dout : IN STD_LOGIC_VECTOR (47 downto 0);
    bias_V_empty_n : IN STD_LOGIC;
    bias_V_read : OUT STD_LOGIC;
    out_image_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_image_V_ce0 : OUT STD_LOGIC;
    out_image_V_we0 : OUT STD_LOGIC;
    out_image_V_d0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of conv2d_3x3_1chan_rev is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv13_310 : STD_LOGIC_VECTOR (12 downto 0) := "0001100010000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias_V_blk_n : STD_LOGIC;
    signal tmp_86_cast_i_fu_180_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_86_cast_i_reg_450 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_200_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_458 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_cast_fu_206_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_cast_reg_463 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_216_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_471 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_75_i_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_i_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_i_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_233_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_481 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_81_i_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_i_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_V_load_reg_500 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal in_image_V_load_reg_505 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_424_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_s_reg_520 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal acc_V_fu_292_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal acc_V_reg_525 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_88_i_reg_530 : STD_LOGIC_VECTOR (24 downto 0);
    signal i_i_reg_147 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_i_reg_158 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal phi_mul_reg_169 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_90_cast_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_i_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_95_cast_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_i_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i_fu_402_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_i_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_1_i_fu_394_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_16_fu_98 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_s_fu_239_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_77_fu_264_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_78_i_fu_271_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_78_cast5_i_fu_279_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_79_i_fu_283_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Val2_17_fu_286_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_85_i_fu_302_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_20_fu_310_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_7_fu_335_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_347_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_339_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_351_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_331_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_78_fu_359_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_79_fu_365_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_i_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component CNN_mul_mul_18s_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    CNN_mul_mul_18s_1cud_U16 : component CNN_mul_mul_18s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_V_load_reg_500,
        din1 => in_image_V_load_reg_505,
        ce => ap_const_logic_1,
        dout => grp_fu_424_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_74_i_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_i_reg_147 <= i_reg_458;
            elsif ((not(((bias_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_147 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_i_reg_158 <= j_reg_471;
            elsif (((tmp_i_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_i_reg_158 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_mul_reg_169 <= next_mul_reg_481;
            elsif (((tmp_i_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_169 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    x_i_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_81_i_reg_496 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                x_i_fu_94 <= p_x_1_i_fu_394_p3;
            elsif ((not(((bias_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_i_fu_94 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_81_i_reg_496 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                y_i_fu_90 <= p_i_fu_402_p3;
            elsif ((not(((bias_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_i_fu_90 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                acc_V_reg_525 <= p_Val2_17_fu_286_p2(34 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_458 <= i_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                in_image_V_load_reg_505 <= in_image_V_q0;
                kernel_V_load_reg_500 <= kernel_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_471 <= j_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_74_i_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                next_mul_reg_481 <= next_mul_fu_233_p2;
                tmp_75_i_reg_476 <= tmp_75_i_fu_222_p2;
                tmp_81_i_reg_496 <= tmp_81_i_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_16_fu_98 <= acc_V_reg_525;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_Val2_s_reg_520 <= grp_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((bias_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_86_cast_i_reg_450 <= tmp_86_cast_i_fu_180_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_81_i_reg_496 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_88_i_reg_530 <= p_Val2_20_fu_310_p2(55 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_i_cast_reg_463(9 downto 0) <= tmp_i_cast_fu_206_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_i_cast_reg_463(12 downto 10) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, bias_V_empty_n, ap_CS_fsm_state2, tmp_i_fu_194_p2, ap_CS_fsm_state3, tmp_74_i_fu_210_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((bias_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_74_i_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    acc_V_fu_292_p4 <= p_Val2_17_fu_286_p2(34 downto 10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, bias_V_empty_n)
    begin
                ap_block_state1 <= ((bias_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_i_fu_194_p2)
    begin
        if (((tmp_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_i_fu_194_p2)
    begin
        if (((tmp_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bias_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, bias_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bias_V_blk_n <= bias_V_empty_n;
        else 
            bias_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bias_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, bias_V_empty_n)
    begin
        if ((not(((bias_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bias_V_read <= ap_const_logic_1;
        else 
            bias_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_200_p2 <= std_logic_vector(unsigned(i_i_reg_147) + unsigned(ap_const_lv10_1));
    in_image_V_address0 <= tmp_90_cast_fu_244_p1(13 - 1 downto 0);

    in_image_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_image_V_ce0 <= ap_const_logic_1;
        else 
            in_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_216_p2 <= std_logic_vector(unsigned(j_i_reg_158) + unsigned(ap_const_lv4_1));
    kernel_V_address0 <= tmp_76_i_fu_228_p1(4 - 1 downto 0);

    kernel_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_V_ce0 <= ap_const_logic_1;
        else 
            kernel_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_233_p2 <= std_logic_vector(unsigned(phi_mul_reg_169) + unsigned(ap_const_lv13_310));
    out_image_V_address0 <= tmp_95_cast_fu_371_p1(10 - 1 downto 0);

    out_image_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_image_V_ce0 <= ap_const_logic_1;
        else 
            out_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_image_V_d0 <= tmp_88_i_reg_530;

    out_image_V_we0_assign_proc : process(tmp_81_i_reg_496, ap_CS_fsm_state8)
    begin
        if (((tmp_81_i_reg_496 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_image_V_we0 <= ap_const_logic_1;
        else 
            out_image_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_17_fu_286_p2 <= std_logic_vector(unsigned(tmp_78_cast5_i_fu_279_p1) + unsigned(tmp_79_i_fu_283_p1));
    p_Val2_20_fu_310_p2 <= std_logic_vector(unsigned(tmp_85_i_fu_302_p3) + unsigned(tmp_86_cast_i_reg_450));
    p_i_fu_402_p3 <= 
        ap_const_lv32_0 when (tmp_89_i_fu_382_p2(0) = '1') else 
        y_fu_376_p2;
    p_shl1_cast_fu_351_p3 <= (tmp_8_fu_347_p1 & ap_const_lv2_0);
    p_shl_cast_fu_339_p3 <= (tmp_7_fu_335_p1 & ap_const_lv5_0);
    p_x_1_i_fu_394_p3 <= 
        x_fu_388_p2 when (tmp_89_i_fu_382_p2(0) = '1') else 
        x_i_fu_94;
    tmp_74_i_fu_210_p2 <= "1" when (j_i_reg_158 = ap_const_lv4_9) else "0";
    tmp_75_i_fu_222_p2 <= "1" when (j_i_reg_158 = ap_const_lv4_0) else "0";
    tmp_76_i_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_158),64));
    tmp_77_fu_264_p3 <= 
        ap_const_lv25_0 when (tmp_75_i_reg_476(0) = '1') else 
        p_Val2_16_fu_98;
    tmp_78_cast5_i_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_i_fu_271_p3),37));
    tmp_78_fu_359_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_339_p3) - unsigned(p_shl1_cast_fu_351_p3));
    tmp_78_i_fu_271_p3 <= (tmp_77_fu_264_p3 & ap_const_lv10_0);
    tmp_79_fu_365_p2 <= std_logic_vector(unsigned(tmp_fu_331_p1) + unsigned(tmp_78_fu_359_p2));
    tmp_79_i_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_520),37));
    tmp_7_fu_335_p1 <= x_i_fu_94(6 - 1 downto 0);
    tmp_81_i_fu_249_p2 <= "1" when (j_i_reg_158 = ap_const_lv4_8) else "0";
    tmp_85_i_fu_302_p3 <= (acc_V_fu_292_p4 & ap_const_lv31_0);
        tmp_86_cast_i_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_dout),56));

    tmp_89_i_fu_382_p2 <= "1" when (y_fu_376_p2 = ap_const_lv32_1C) else "0";
    tmp_8_fu_347_p1 <= x_i_fu_94(9 - 1 downto 0);
    tmp_90_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_239_p2),64));
        tmp_95_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_79_fu_365_p2),64));

    tmp_fu_331_p1 <= y_i_fu_90(11 - 1 downto 0);
    tmp_i_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_147),13));
    tmp_i_fu_194_p2 <= "1" when (i_i_reg_147 = ap_const_lv10_310) else "0";
    tmp_s_fu_239_p2 <= std_logic_vector(unsigned(phi_mul_reg_169) + unsigned(tmp_i_cast_reg_463));
    x_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(x_i_fu_94));
    y_fu_376_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(y_i_fu_90));
end behav;
