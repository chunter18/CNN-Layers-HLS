-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resample is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    square_image_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    square_image_V_ce0 : OUT STD_LOGIC;
    square_image_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    resampled_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    resampled_V_ce0 : OUT STD_LOGIC;
    resampled_V_we0 : OUT STD_LOGIC;
    resampled_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of resample is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv13_310 : STD_LOGIC_VECTOR (12 downto 0) := "0001100010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_fu_181_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_332 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal l_3_fu_187_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal l_3_reg_337 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_199_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_345 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_11_cast_fu_205_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_cast_reg_350 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_2_fu_219_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_2_reg_358 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_3_fu_225_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_3_reg_363 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_261_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_reg_368 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_267_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_2_fu_283_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_2_reg_381 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_16_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_303_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_26_reg_391 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_308_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_reg_396 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_322_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_reg_401 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal square_image_V_load_reg_411 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_reg_84 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal l_reg_96 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_108 : STD_LOGIC_VECTOR (4 downto 0);
    signal l_1_reg_120 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_131 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_reg_143 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal n_reg_164 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_cast_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_cast6_fu_209_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_237_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_249_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_245_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_257_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_cast5_fu_273_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_293_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_cast_fu_299_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_322_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_322_p00 : STD_LOGIC_VECTOR (12 downto 0);

    component CNN_mac_muladd_4nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    CNN_mac_muladd_4nbkb_U12 : component CNN_mac_muladd_4nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 4,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_322_p0,
        din1 => grp_fu_322_p1,
        din2 => grp_fu_322_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_322_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_84 <= i_2_reg_332;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_84 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_108 <= j_2_reg_345;
            elsif (((tmp_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_108 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_1_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_1_reg_154 <= tmp_20_reg_396;
            elsif (((tmp_12_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_1_reg_154 <= k_reg_131;
            end if; 
        end if;
    end process;

    k_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_reg_131 <= k_3_reg_363;
            elsif (((tmp_s_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_131 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    l_1_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                l_1_reg_120 <= tmp_13_fu_267_p2;
            elsif (((tmp_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                l_1_reg_120 <= l_reg_96;
            end if; 
        end if;
    end process;

    l_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                l_reg_96 <= l_3_reg_337;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l_reg_96 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    m_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                m_reg_143 <= m_2_reg_358;
            elsif (((tmp_s_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_reg_143 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_reg_164 <= n_2_reg_381;
            elsif (((tmp_12_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                n_reg_164 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_332 <= i_2_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_2_reg_345 <= j_2_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                k_3_reg_363 <= k_3_fu_225_p2;
                    tmp_23_reg_368(10 downto 1) <= tmp_23_fu_261_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                l_3_reg_337 <= l_3_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                m_2_reg_358 <= m_2_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                n_2_reg_381 <= n_2_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                square_image_V_load_reg_411 <= square_image_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_11_cast_reg_350(9 downto 0) <= tmp_11_cast_fu_205_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_20_reg_396 <= tmp_20_fu_308_p2;
                tmp_26_reg_391 <= tmp_26_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_25_reg_401 <= grp_fu_322_p3;
            end if;
        end if;
    end process;
    tmp_11_cast_reg_350(12 downto 10) <= "000";
    tmp_23_reg_368(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_175_p2, ap_CS_fsm_state3, tmp_s_fu_193_p2, ap_CS_fsm_state4, tmp_12_fu_213_p2, ap_CS_fsm_state5, tmp_16_fu_277_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_s_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_12_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_16_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_175_p2)
    begin
        if (((tmp_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_175_p2)
    begin
        if (((tmp_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_322_p0 <= grp_fu_322_p00(4 - 1 downto 0);
    grp_fu_322_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_154),13));
    grp_fu_322_p1 <= ap_const_lv13_310(11 - 1 downto 0);
    grp_fu_322_p2 <= tmp_11_cast_reg_350(10 - 1 downto 0);
    i_2_fu_181_p2 <= std_logic_vector(unsigned(i_reg_84) + unsigned(ap_const_lv5_1));
    j_2_fu_199_p2 <= std_logic_vector(unsigned(j_reg_108) + unsigned(ap_const_lv5_1));
    k_3_fu_225_p2 <= std_logic_vector(unsigned(k_reg_131) + unsigned(ap_const_lv4_3));
    l_3_fu_187_p2 <= std_logic_vector(unsigned(l_reg_96) + unsigned(ap_const_lv10_1C));
    m_2_fu_219_p2 <= std_logic_vector(unsigned(m_reg_143) + unsigned(ap_const_lv2_1));
    m_cast6_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_143),5));
    n_2_fu_283_p2 <= std_logic_vector(unsigned(n_reg_164) + unsigned(ap_const_lv2_1));
    n_cast5_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_164),5));
    p_shl1_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_249_p3),11));
    p_shl_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_237_p3),11));
    resampled_V_address0 <= tmp_27_cast_fu_318_p1(13 - 1 downto 0);

    resampled_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            resampled_V_ce0 <= ap_const_logic_1;
        else 
            resampled_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    resampled_V_d0 <= square_image_V_load_reg_411;

    resampled_V_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            resampled_V_we0 <= ap_const_logic_1;
        else 
            resampled_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    square_image_V_address0 <= tmp_28_cast_fu_314_p1(10 - 1 downto 0);

    square_image_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            square_image_V_ce0 <= ap_const_logic_1;
        else 
            square_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_1_reg_120),13));
    tmp_12_fu_213_p2 <= "1" when (m_reg_143 = ap_const_lv2_3) else "0";
    tmp_13_fu_267_p2 <= std_logic_vector(unsigned(l_1_reg_120) + unsigned(ap_const_lv10_1));
    tmp_14_fu_231_p2 <= std_logic_vector(unsigned(m_cast6_fu_209_p1) + unsigned(i_reg_84));
    tmp_16_fu_277_p2 <= "1" when (n_reg_164 = ap_const_lv2_3) else "0";
    tmp_18_fu_293_p2 <= std_logic_vector(unsigned(n_cast5_fu_273_p1) + unsigned(j_reg_108));
    tmp_19_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_293_p2),11));
    tmp_20_fu_308_p2 <= std_logic_vector(unsigned(k_1_reg_154) + unsigned(ap_const_lv4_1));
    tmp_21_fu_237_p3 <= (tmp_14_fu_231_p2 & ap_const_lv5_0);
    tmp_22_fu_249_p3 <= (tmp_14_fu_231_p2 & ap_const_lv1_0);
    tmp_23_fu_261_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_245_p1) - unsigned(p_shl1_cast_fu_257_p1));
    tmp_26_fu_303_p2 <= std_logic_vector(unsigned(tmp_23_reg_368) + unsigned(tmp_19_cast_fu_299_p1));
    tmp_27_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_401),64));
        tmp_28_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_reg_391),64));

    tmp_fu_175_p2 <= "1" when (i_reg_84 = ap_const_lv5_1C) else "0";
    tmp_s_fu_193_p2 <= "1" when (j_reg_108 = ap_const_lv5_1C) else "0";
end behav;
