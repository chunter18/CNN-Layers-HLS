-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resample_for_conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    square_image_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    square_image_V_ce0 : OUT STD_LOGIC;
    square_image_V_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    resampled_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    resampled_V_ce0 : OUT STD_LOGIC;
    resampled_V_we0 : OUT STD_LOGIC;
    resampled_V_d0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of resample_for_conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_173_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_293 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal l_2_fu_179_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_2_reg_298 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_191_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_306 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_cast_fu_197_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_cast_reg_311 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_211_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_319 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_2_fu_217_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_2_reg_324 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_223_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_reg_329 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_1_fu_245_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_342 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_6_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_273_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_reg_357 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_283_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_reg_362 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal square_image_V_load_reg_367 : STD_LOGIC_VECTOR (24 downto 0);
    signal i_reg_76 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal l_reg_88 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_100 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_1_reg_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_reg_135 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal n_reg_156 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_cast6_fu_201_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_cast5_fu_235_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_261_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_283_p00 : STD_LOGIC_VECTOR (10 downto 0);

    component CNN_mac_muladd_4neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    CNN_mac_muladd_4neOg_U34 : component CNN_mac_muladd_4neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 4,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_283_p0,
        din1 => grp_fu_283_p1,
        din2 => grp_fu_283_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_76 <= i_1_reg_293;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_76 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_100 <= j_1_reg_306;
            elsif (((tmp_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_100 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_1_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k_1_reg_146 <= tmp_10_reg_357;
            elsif (((tmp_2_fu_205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_1_reg_146 <= k_reg_123;
            end if; 
        end if;
    end process;

    k_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_reg_123 <= k_2_reg_324;
            elsif (((tmp_s_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_123 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    l_1_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                l_1_reg_112 <= tmp_3_fu_229_p2;
            elsif (((tmp_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                l_1_reg_112 <= l_reg_88;
            end if; 
        end if;
    end process;

    l_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                l_reg_88 <= l_2_reg_298;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                l_reg_88 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    m_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                m_reg_135 <= m_1_reg_319;
            elsif (((tmp_s_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_reg_135 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                n_reg_156 <= n_1_reg_342;
            elsif (((tmp_2_fu_205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                n_reg_156 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_293 <= i_1_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_306 <= j_1_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                k_2_reg_324 <= k_2_fu_217_p2;
                tmp_4_reg_329 <= tmp_4_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                l_2_reg_298 <= l_2_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                m_1_reg_319 <= m_1_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                n_1_reg_342 <= n_1_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                square_image_V_load_reg_367 <= square_image_V_q0;
                tmp_11_reg_362 <= grp_fu_283_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_10_reg_357 <= tmp_10_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_1_cast_reg_311(7 downto 0) <= tmp_1_cast_fu_197_p1(7 downto 0);
            end if;
        end if;
    end process;
    tmp_1_cast_reg_311(10 downto 8) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_167_p2, ap_CS_fsm_state3, tmp_s_fu_185_p2, ap_CS_fsm_state4, tmp_2_fu_205_p2, ap_CS_fsm_state5, tmp_6_fu_239_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_s_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_2_fu_205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_6_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_167_p2)
    begin
        if (((tmp_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_167_p2)
    begin
        if (((tmp_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_283_p0 <= grp_fu_283_p00(4 - 1 downto 0);
    grp_fu_283_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_146),11));
    grp_fu_283_p1 <= ap_const_lv11_C4(9 - 1 downto 0);
    grp_fu_283_p2 <= tmp_1_cast_reg_311(8 - 1 downto 0);
    i_1_fu_173_p2 <= std_logic_vector(unsigned(i_reg_76) + unsigned(ap_const_lv4_1));
    j_1_fu_191_p2 <= std_logic_vector(unsigned(j_reg_100) + unsigned(ap_const_lv4_1));
    k_2_fu_217_p2 <= std_logic_vector(unsigned(k_reg_123) + unsigned(ap_const_lv4_3));
    l_2_fu_179_p2 <= std_logic_vector(unsigned(l_reg_88) + unsigned(ap_const_lv8_E));
    m_1_fu_211_p2 <= std_logic_vector(unsigned(m_reg_135) + unsigned(ap_const_lv2_1));
    m_cast6_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_135),4));
    n_1_fu_245_p2 <= std_logic_vector(unsigned(n_reg_156) + unsigned(ap_const_lv2_1));
    n_cast5_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_156),4));
    resampled_V_address0 <= tmp_13_cast_fu_279_p1(11 - 1 downto 0);

    resampled_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            resampled_V_ce0 <= ap_const_logic_1;
        else 
            resampled_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    resampled_V_d0 <= square_image_V_load_reg_367;

    resampled_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            resampled_V_we0 <= ap_const_logic_1;
        else 
            resampled_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    square_image_V_address0 <= tmp_13_fu_268_p1(8 - 1 downto 0);

    square_image_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            square_image_V_ce0 <= ap_const_logic_1;
        else 
            square_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_273_p2 <= std_logic_vector(unsigned(k_1_reg_146) + unsigned(ap_const_lv4_1));
    tmp_12_fu_261_p3 <= (tmp_4_reg_329 & tmp_8_fu_255_p2);
    tmp_13_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_362),64));
    tmp_13_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_261_p3),64));
    tmp_1_cast_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_1_reg_112),11));
    tmp_2_fu_205_p2 <= "1" when (m_reg_135 = ap_const_lv2_3) else "0";
    tmp_3_fu_229_p2 <= std_logic_vector(unsigned(l_1_reg_112) + unsigned(ap_const_lv8_1));
    tmp_4_fu_223_p2 <= std_logic_vector(unsigned(m_cast6_fu_201_p1) + unsigned(i_reg_76));
    tmp_6_fu_239_p2 <= "1" when (n_reg_156 = ap_const_lv2_3) else "0";
    tmp_8_fu_255_p2 <= std_logic_vector(unsigned(n_cast5_fu_235_p1) + unsigned(j_reg_100));
    tmp_fu_167_p2 <= "1" when (i_reg_76 = ap_const_lv4_E) else "0";
    tmp_s_fu_185_p2 <= "1" when (j_reg_100 = ap_const_lv4_E) else "0";
end behav;
