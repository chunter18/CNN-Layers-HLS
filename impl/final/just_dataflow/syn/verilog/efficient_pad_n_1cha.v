// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module efficient_pad_n_1cha (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_image_V_address0,
        in_image_V_ce0,
        in_image_V_q0,
        out_image_V_address0,
        out_image_V_ce0,
        out_image_V_we0,
        out_image_V_d0,
        out_image_V_address1,
        out_image_V_ce1,
        out_image_V_we1,
        out_image_V_d1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] in_image_V_address0;
output   in_image_V_ce0;
input  [17:0] in_image_V_q0;
output  [9:0] out_image_V_address0;
output   out_image_V_ce0;
output   out_image_V_we0;
output  [17:0] out_image_V_d0;
output  [9:0] out_image_V_address1;
output   out_image_V_ce1;
output   out_image_V_we1;
output  [17:0] out_image_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_image_V_ce0;
reg[9:0] out_image_V_address0;
reg out_image_V_ce0;
reg out_image_V_we0;
reg[17:0] out_image_V_d0;
reg[9:0] out_image_V_address1;
reg out_image_V_ce1;
reg out_image_V_we1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_6_fu_151_p2;
reg   [4:0] i_6_reg_339;
wire    ap_CS_fsm_state2;
wire  signed [10:0] tmp_56_fu_190_p2;
reg  signed [10:0] tmp_56_reg_344;
wire   [0:0] tmp_fu_145_p2;
wire   [4:0] i_7_fu_231_p2;
reg   [4:0] i_7_reg_353;
wire    ap_CS_fsm_state4;
wire   [10:0] tmp_61_fu_261_p2;
reg   [10:0] tmp_61_reg_358;
wire   [0:0] tmp_41_fu_225_p2;
wire   [10:0] tmp_64_fu_291_p2;
reg   [10:0] tmp_64_reg_363;
wire   [4:0] j_6_fu_303_p2;
reg   [4:0] j_6_reg_371;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_65_fu_313_p2;
reg   [10:0] tmp_65_reg_376;
wire   [0:0] tmp_43_fu_297_p2;
reg   [17:0] in_image_V_load_reg_386;
wire    ap_CS_fsm_state6;
reg   [4:0] i_reg_112;
reg    ap_block_state1;
wire    ap_CS_fsm_state3;
reg   [4:0] i_1_reg_123;
reg   [4:0] j_reg_134;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_s_fu_157_p1;
wire   [63:0] tmp_67_cast_fu_206_p1;
wire  signed [63:0] tmp_66_cast_fu_211_p1;
wire  signed [63:0] tmp_68_cast_fu_220_p1;
wire  signed [63:0] tmp_76_cast_fu_327_p1;
wire  signed [63:0] tmp_75_cast_fu_332_p1;
wire   [9:0] tmp_54_fu_166_p3;
wire   [5:0] tmp_55_fu_178_p3;
wire   [10:0] p_shl_cast_fu_174_p1;
wire   [10:0] p_shl1_cast_fu_186_p1;
wire   [8:0] tmp_cast_cast_fu_162_p1;
wire   [8:0] tmp_57_fu_196_p2;
wire  signed [9:0] tmp_67_cast1_fu_202_p1;
wire   [10:0] tmp_58_fu_215_p2;
wire   [9:0] tmp_59_fu_237_p3;
wire   [5:0] tmp_60_fu_249_p3;
wire   [10:0] p_shl4_cast_fu_245_p1;
wire   [10:0] p_shl5_cast_fu_257_p1;
wire   [9:0] tmp_62_fu_267_p3;
wire   [6:0] tmp_63_fu_279_p3;
wire   [10:0] p_shl2_cast_fu_275_p1;
wire   [10:0] p_shl3_cast_fu_287_p1;
wire   [10:0] tmp_44_cast_fu_309_p1;
wire   [10:0] tmp_45_cast_fu_318_p1;
wire   [10:0] tmp_66_fu_322_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_41_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_123 <= 5'd0;
    end else if (((tmp_43_fu_297_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_123 <= i_7_reg_353;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_112 <= i_6_reg_339;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_112 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_134 <= j_6_reg_371;
    end else if (((tmp_41_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_134 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_6_reg_339 <= i_6_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_7_reg_353 <= i_7_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_image_V_load_reg_386 <= in_image_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_6_reg_371 <= j_6_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_56_reg_344[10 : 1] <= tmp_56_fu_190_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_41_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_61_reg_358[10 : 1] <= tmp_61_fu_261_p2[10 : 1];
        tmp_64_reg_363[10 : 2] <= tmp_64_fu_291_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_43_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_65_reg_376 <= tmp_65_fu_313_p2;
    end
end

always @ (*) begin
    if (((tmp_41_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_41_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_image_V_ce0 = 1'b1;
    end else begin
        in_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_V_address0 = tmp_75_cast_fu_332_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_image_V_address0 = tmp_66_cast_fu_211_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_V_address0 = tmp_s_fu_157_p1;
    end else begin
        out_image_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_image_V_address1 = tmp_68_cast_fu_220_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_image_V_address1 = tmp_67_cast_fu_206_p1;
    end else begin
        out_image_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        out_image_V_ce0 = 1'b1;
    end else begin
        out_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        out_image_V_ce1 = 1'b1;
    end else begin
        out_image_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_V_d0 = in_image_V_load_reg_386;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        out_image_V_d0 = 18'd0;
    end else begin
        out_image_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((tmp_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_V_we0 = 1'b1;
    end else begin
        out_image_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_image_V_we1 = 1'b1;
    end else begin
        out_image_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_41_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_43_fu_297_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign i_6_fu_151_p2 = (i_reg_112 + 5'd1);

assign i_7_fu_231_p2 = (i_1_reg_123 + 5'd1);

assign in_image_V_address0 = tmp_76_cast_fu_327_p1;

assign j_6_fu_303_p2 = (j_reg_134 + 5'd1);

assign out_image_V_d1 = 18'd0;

assign p_shl1_cast_fu_186_p1 = tmp_55_fu_178_p3;

assign p_shl2_cast_fu_275_p1 = tmp_62_fu_267_p3;

assign p_shl3_cast_fu_287_p1 = tmp_63_fu_279_p3;

assign p_shl4_cast_fu_245_p1 = tmp_59_fu_237_p3;

assign p_shl5_cast_fu_257_p1 = tmp_60_fu_249_p3;

assign p_shl_cast_fu_174_p1 = tmp_54_fu_166_p3;

assign tmp_41_fu_225_p2 = ((i_1_reg_123 == 5'd28) ? 1'b1 : 1'b0);

assign tmp_43_fu_297_p2 = ((j_reg_134 == 5'd28) ? 1'b1 : 1'b0);

assign tmp_44_cast_fu_309_p1 = j_6_fu_303_p2;

assign tmp_45_cast_fu_318_p1 = j_reg_134;

assign tmp_54_fu_166_p3 = {{i_reg_112}, {5'd0}};

assign tmp_55_fu_178_p3 = {{i_reg_112}, {1'd0}};

assign tmp_56_fu_190_p2 = (p_shl_cast_fu_174_p1 - p_shl1_cast_fu_186_p1);

assign tmp_57_fu_196_p2 = ($signed(tmp_cast_cast_fu_162_p1) + $signed(9'd358));

assign tmp_58_fu_215_p2 = ($signed(tmp_56_reg_344) + $signed(11'd29));

assign tmp_59_fu_237_p3 = {{i_7_fu_231_p2}, {5'd0}};

assign tmp_60_fu_249_p3 = {{i_7_fu_231_p2}, {1'd0}};

assign tmp_61_fu_261_p2 = (p_shl4_cast_fu_245_p1 - p_shl5_cast_fu_257_p1);

assign tmp_62_fu_267_p3 = {{i_1_reg_123}, {5'd0}};

assign tmp_63_fu_279_p3 = {{i_1_reg_123}, {2'd0}};

assign tmp_64_fu_291_p2 = (p_shl2_cast_fu_275_p1 - p_shl3_cast_fu_287_p1);

assign tmp_65_fu_313_p2 = (tmp_61_reg_358 + tmp_44_cast_fu_309_p1);

assign tmp_66_cast_fu_211_p1 = tmp_56_reg_344;

assign tmp_66_fu_322_p2 = (tmp_64_reg_363 + tmp_45_cast_fu_318_p1);

assign tmp_67_cast1_fu_202_p1 = $signed(tmp_57_fu_196_p2);

assign tmp_67_cast_fu_206_p1 = $unsigned(tmp_67_cast1_fu_202_p1);

assign tmp_68_cast_fu_220_p1 = $signed(tmp_58_fu_215_p2);

assign tmp_75_cast_fu_332_p1 = $signed(tmp_65_reg_376);

assign tmp_76_cast_fu_327_p1 = $signed(tmp_66_fu_322_p2);

assign tmp_cast_cast_fu_162_p1 = i_reg_112;

assign tmp_fu_145_p2 = ((i_reg_112 == 5'd30) ? 1'b1 : 1'b0);

assign tmp_s_fu_157_p1 = i_reg_112;

always @ (posedge ap_clk) begin
    tmp_56_reg_344[0] <= 1'b0;
    tmp_61_reg_358[0] <= 1'b0;
    tmp_64_reg_363[1:0] <= 2'b00;
end

endmodule //efficient_pad_n_1cha
