// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2d_3x3_4chan_rev (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_image_V_address0,
        in_image_V_ce0,
        in_image_V_q0,
        kernel_V_address0,
        kernel_V_ce0,
        kernel_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        out_image_V_address0,
        out_image_V_ce0,
        out_image_V_we0,
        out_image_V_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [10:0] in_image_V_address0;
output   in_image_V_ce0;
input  [24:0] in_image_V_q0;
output  [5:0] kernel_V_address0;
output   kernel_V_ce0;
input  [17:0] kernel_V_q0;
output  [1:0] bias_V_address0;
output   bias_V_ce0;
input  [47:0] bias_V_q0;
output  [9:0] out_image_V_address0;
output   out_image_V_ce0;
output   out_image_V_we0;
output  [47:0] out_image_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_image_V_ce0;
reg kernel_V_ce0;
reg bias_V_ce0;
reg out_image_V_ce0;
reg out_image_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] k_5_fu_265_p2;
reg   [2:0] k_5_reg_566;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_68_fu_292_p2;
reg   [6:0] tmp_68_reg_571;
wire   [0:0] tmp_fu_259_p2;
wire  signed [33:0] tmp_81_cast_fu_328_p1;
reg  signed [33:0] tmp_81_cast_reg_576;
reg   [1:0] bias_V_addr_reg_581;
wire   [8:0] i_8_fu_338_p2;
reg   [8:0] i_8_reg_589;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp_47_cast_fu_344_p1;
reg   [10:0] tmp_47_cast_reg_594;
wire   [0:0] tmp_46_fu_332_p2;
wire   [3:0] j_7_fu_354_p2;
reg   [3:0] j_7_reg_602;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_49_fu_360_p2;
reg   [0:0] tmp_49_reg_607;
wire   [0:0] tmp_48_fu_348_p2;
wire   [10:0] next_mul_fu_370_p2;
reg   [10:0] next_mul_reg_612;
wire   [0:0] tmp_52_fu_396_p2;
reg   [0:0] tmp_52_reg_627;
reg  signed [17:0] kernel_V_load_reg_631;
wire    ap_CS_fsm_state5;
reg  signed [24:0] in_image_V_load_reg_636;
wire    ap_CS_fsm_state6;
wire  signed [40:0] grp_fu_551_p2;
reg  signed [40:0] p_Val2_9_reg_651;
wire    ap_CS_fsm_state7;
wire   [47:0] acc_V_fu_425_p2;
reg   [47:0] acc_V_reg_656;
wire    ap_CS_fsm_state8;
wire   [10:0] tmp_76_fu_474_p2;
reg   [10:0] tmp_76_reg_662;
reg   [47:0] p_Val2_13_reg_667;
wire    ap_CS_fsm_state9;
reg   [2:0] k_reg_143;
reg    ap_block_state1;
reg   [8:0] i_reg_154;
reg   [31:0] x_reg_165;
reg   [31:0] y_reg_177;
reg   [3:0] j_reg_189;
wire    ap_CS_fsm_state10;
reg   [31:0] x_1_reg_200;
reg   [31:0] ap_phi_mux_x_1_be_phi_fu_239_p4;
reg   [31:0] y_1_reg_212;
reg   [31:0] ap_phi_mux_y_1_be_phi_fu_251_p4;
reg   [10:0] phi_mul_reg_224;
wire   [31:0] p_x_1_fu_529_p3;
reg   [31:0] x_1_be_reg_235;
wire   [31:0] p_s_fu_538_p3;
reg   [31:0] y_1_be_reg_247;
wire   [63:0] tmp_s_fu_271_p1;
wire   [63:0] tmp_83_cast_fu_381_p1;
wire   [63:0] tmp_84_cast_fu_391_p1;
wire   [63:0] tmp_89_cast_fu_480_p1;
reg   [47:0] p_Val2_10_fu_88;
wire   [5:0] tmp_67_fu_280_p3;
wire   [6:0] tmp_cast_fu_276_p1;
wire   [6:0] p_shl2_cast_fu_288_p1;
wire   [6:0] tmp_69_fu_298_p3;
wire   [3:0] tmp_70_fu_310_p3;
wire   [7:0] p_shl_cast_fu_306_p1;
wire   [7:0] p_shl1_cast_fu_318_p1;
wire   [7:0] tmp_71_fu_322_p2;
wire   [10:0] tmp_72_fu_376_p2;
wire   [6:0] tmp_50_cast_fu_366_p1;
wire   [6:0] tmp_73_fu_386_p2;
wire   [47:0] p_Val2_s_fu_411_p3;
wire   [47:0] tmp_51_fu_418_p3;
wire   [33:0] tmp_54_cast_fu_435_p1;
wire   [33:0] tmp_74_fu_439_p2;
wire   [6:0] tmp_5_fu_444_p1;
wire   [9:0] tmp_6_fu_456_p1;
wire   [10:0] p_shl3_cast_fu_448_p3;
wire   [10:0] p_shl4_cast_fu_460_p3;
wire   [10:0] tmp_75_fu_468_p2;
wire   [10:0] tmp_4_fu_431_p1;
wire  signed [49:0] tmp_70_cast_fu_491_p1;
wire   [49:0] tmp_55_fu_484_p3;
wire   [49:0] p_Val2_2_fu_494_p2;
wire   [31:0] y_2_fu_511_p2;
wire   [0:0] tmp_57_fu_517_p2;
wire   [31:0] x_2_fu_523_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
end

CNN_mul_mul_25s_1fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_25s_1fYi_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_image_V_load_reg_636),
    .din1(kernel_V_load_reg_631),
    .ce(1'b1),
    .dout(grp_fu_551_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_48_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_154 <= i_8_reg_589;
    end else if (((tmp_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_154 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_reg_189 <= j_7_reg_602;
    end else if (((tmp_46_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_189 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_46_fu_332_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_143 <= k_5_reg_566;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_143 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        phi_mul_reg_224 <= next_mul_reg_612;
    end else if (((tmp_46_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_224 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_52_reg_627 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        x_1_be_reg_235 <= x_1_reg_200;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_52_reg_627 == 1'd1))) begin
        x_1_be_reg_235 <= p_x_1_fu_529_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        x_1_reg_200 <= ap_phi_mux_x_1_be_phi_fu_239_p4;
    end else if (((tmp_46_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x_1_reg_200 <= x_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_48_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_reg_165 <= x_1_reg_200;
    end else if (((tmp_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_reg_165 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_52_reg_627 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        y_1_be_reg_247 <= y_1_reg_212;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_52_reg_627 == 1'd1))) begin
        y_1_be_reg_247 <= p_s_fu_538_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        y_1_reg_212 <= ap_phi_mux_y_1_be_phi_fu_251_p4;
    end else if (((tmp_46_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_1_reg_212 <= y_reg_177;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_48_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_reg_177 <= y_1_reg_212;
    end else if (((tmp_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_177 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        acc_V_reg_656 <= acc_V_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bias_V_addr_reg_581 <= tmp_s_fu_271_p1;
        tmp_68_reg_571 <= tmp_68_fu_292_p2;
        tmp_81_cast_reg_576[33 : 1] <= tmp_81_cast_fu_328_p1[33 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_8_reg_589 <= i_8_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_image_V_load_reg_636 <= in_image_V_q0;
        kernel_V_load_reg_631 <= kernel_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_7_reg_602 <= j_7_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_5_reg_566 <= k_5_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_48_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        next_mul_reg_612 <= next_mul_fu_370_p2;
        tmp_49_reg_607 <= tmp_49_fu_360_p2;
        tmp_52_reg_627 <= tmp_52_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_10_fu_88 <= acc_V_reg_656;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_13_reg_667 <= bias_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_9_reg_651 <= grp_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_46_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_47_cast_reg_594[8 : 0] <= tmp_47_cast_fu_344_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_52_reg_627 == 1'd1))) begin
        tmp_76_reg_662 <= tmp_76_fu_474_p2;
    end
end

always @ (*) begin
    if (((tmp_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_52_reg_627 == 1'd1))) begin
        ap_phi_mux_x_1_be_phi_fu_239_p4 = p_x_1_fu_529_p3;
    end else begin
        ap_phi_mux_x_1_be_phi_fu_239_p4 = x_1_be_reg_235;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_52_reg_627 == 1'd1))) begin
        ap_phi_mux_y_1_be_phi_fu_251_p4 = p_s_fu_538_p3;
    end else begin
        ap_phi_mux_y_1_be_phi_fu_251_p4 = y_1_be_reg_247;
    end
end

always @ (*) begin
    if (((tmp_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_image_V_ce0 = 1'b1;
    end else begin
        in_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_V_ce0 = 1'b1;
    end else begin
        kernel_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_image_V_ce0 = 1'b1;
    end else begin
        out_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_52_reg_627 == 1'd1))) begin
        out_image_V_we0 = 1'b1;
    end else begin
        out_image_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_46_fu_332_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_48_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_52_reg_627 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_V_fu_425_p2 = (p_Val2_s_fu_411_p3 + tmp_51_fu_418_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign bias_V_address0 = bias_V_addr_reg_581;

assign i_8_fu_338_p2 = (i_reg_154 + 9'd1);

assign in_image_V_address0 = tmp_83_cast_fu_381_p1;

assign j_7_fu_354_p2 = (j_reg_189 + 4'd1);

assign k_5_fu_265_p2 = (k_reg_143 + 3'd1);

assign kernel_V_address0 = tmp_84_cast_fu_391_p1;

assign next_mul_fu_370_p2 = (phi_mul_reg_224 + 11'd196);

assign out_image_V_address0 = tmp_89_cast_fu_480_p1;

assign out_image_V_d0 = {{p_Val2_2_fu_494_p2[49:2]}};

assign p_Val2_2_fu_494_p2 = ($signed(tmp_70_cast_fu_491_p1) + $signed(tmp_55_fu_484_p3));

assign p_Val2_s_fu_411_p3 = ((tmp_49_reg_607[0:0] === 1'b1) ? 48'd0 : p_Val2_10_fu_88);

assign p_s_fu_538_p3 = ((tmp_57_fu_517_p2[0:0] === 1'b1) ? 32'd0 : y_2_fu_511_p2);

assign p_shl1_cast_fu_318_p1 = tmp_70_fu_310_p3;

assign p_shl2_cast_fu_288_p1 = tmp_67_fu_280_p3;

assign p_shl3_cast_fu_448_p3 = {{tmp_5_fu_444_p1}, {4'd0}};

assign p_shl4_cast_fu_460_p3 = {{tmp_6_fu_456_p1}, {1'd0}};

assign p_shl_cast_fu_306_p1 = tmp_69_fu_298_p3;

assign p_x_1_fu_529_p3 = ((tmp_57_fu_517_p2[0:0] === 1'b1) ? x_2_fu_523_p2 : x_1_reg_200);

assign tmp_46_fu_332_p2 = ((i_reg_154 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_47_cast_fu_344_p1 = i_reg_154;

assign tmp_48_fu_348_p2 = ((j_reg_189 == 4'd9) ? 1'b1 : 1'b0);

assign tmp_49_fu_360_p2 = ((j_reg_189 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_4_fu_431_p1 = y_1_reg_212[10:0];

assign tmp_50_cast_fu_366_p1 = j_reg_189;

assign tmp_51_fu_418_p3 = {{p_Val2_9_reg_651}, {7'd0}};

assign tmp_52_fu_396_p2 = ((j_reg_189 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_54_cast_fu_435_p1 = x_1_reg_200;

assign tmp_55_fu_484_p3 = {{acc_V_reg_656}, {2'd0}};

assign tmp_57_fu_517_p2 = ((y_2_fu_511_p2 == 32'd14) ? 1'b1 : 1'b0);

assign tmp_5_fu_444_p1 = tmp_74_fu_439_p2[6:0];

assign tmp_67_fu_280_p3 = {{k_reg_143}, {3'd0}};

assign tmp_68_fu_292_p2 = (tmp_cast_fu_276_p1 + p_shl2_cast_fu_288_p1);

assign tmp_69_fu_298_p3 = {{k_reg_143}, {4'd0}};

assign tmp_6_fu_456_p1 = tmp_74_fu_439_p2[9:0];

assign tmp_70_cast_fu_491_p1 = $signed(p_Val2_13_reg_667);

assign tmp_70_fu_310_p3 = {{k_reg_143}, {1'd0}};

assign tmp_71_fu_322_p2 = (p_shl_cast_fu_306_p1 - p_shl1_cast_fu_318_p1);

assign tmp_72_fu_376_p2 = (tmp_47_cast_reg_594 + phi_mul_reg_224);

assign tmp_73_fu_386_p2 = (tmp_50_cast_fu_366_p1 + tmp_68_reg_571);

assign tmp_74_fu_439_p2 = ($signed(tmp_81_cast_reg_576) + $signed(tmp_54_cast_fu_435_p1));

assign tmp_75_fu_468_p2 = (p_shl3_cast_fu_448_p3 - p_shl4_cast_fu_460_p3);

assign tmp_76_fu_474_p2 = (tmp_75_fu_468_p2 + tmp_4_fu_431_p1);

assign tmp_81_cast_fu_328_p1 = $signed(tmp_71_fu_322_p2);

assign tmp_83_cast_fu_381_p1 = tmp_72_fu_376_p2;

assign tmp_84_cast_fu_391_p1 = tmp_73_fu_386_p2;

assign tmp_89_cast_fu_480_p1 = tmp_76_reg_662;

assign tmp_cast_fu_276_p1 = k_reg_143;

assign tmp_fu_259_p2 = ((k_reg_143 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_s_fu_271_p1 = k_reg_143;

assign x_2_fu_523_p2 = (32'd1 + x_1_reg_200);

assign y_2_fu_511_p2 = (32'd1 + y_1_reg_212);

always @ (posedge ap_clk) begin
    tmp_81_cast_reg_576[0] <= 1'b0;
    tmp_47_cast_reg_594[10:9] <= 2'b00;
end

endmodule //conv2d_3x3_4chan_rev
