// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1chan (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_image_V_address0,
        in_image_V_ce0,
        in_image_V_q0,
        in_image_V_address1,
        in_image_V_ce1,
        in_image_V_q1,
        out_image_V_address0,
        out_image_V_ce0,
        out_image_V_we0,
        out_image_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] in_image_V_address0;
output   in_image_V_ce0;
input  [47:0] in_image_V_q0;
output  [9:0] in_image_V_address1;
output   in_image_V_ce1;
input  [47:0] in_image_V_q1;
output  [7:0] out_image_V_address0;
output   out_image_V_ce0;
output   out_image_V_we0;
output  [24:0] out_image_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] in_image_V_address0;
reg in_image_V_ce0;
reg[9:0] in_image_V_address1;
reg in_image_V_ce1;
reg out_image_V_ce0;
reg out_image_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [24:0] grp_fu_143_p4;
reg   [24:0] reg_163;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [24:0] reg_167;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_44_fu_211_p2;
reg   [10:0] tmp_44_reg_497;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_181_p2;
wire   [10:0] tmp_47_fu_247_p2;
reg   [10:0] tmp_47_reg_503;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_29_fu_253_p2;
wire   [10:0] tmp_49_fu_273_p2;
reg   [10:0] tmp_49_reg_517;
wire   [10:0] tmp_51_fu_298_p2;
reg   [10:0] tmp_51_reg_527;
wire   [4:0] j_5_fu_303_p2;
reg   [4:0] j_5_reg_532;
wire   [4:0] i_5_fu_309_p2;
wire   [0:0] tmp_34_fu_327_p2;
reg   [0:0] tmp_34_reg_547;
wire   [24:0] max_V_8_fu_337_p3;
reg   [24:0] max_V_8_reg_557;
wire   [0:0] tmp_36_fu_352_p2;
reg   [0:0] tmp_36_reg_562;
wire   [24:0] max_V_9_fu_358_p3;
reg   [24:0] max_V_9_reg_567;
wire   [0:0] tmp_38_fu_372_p2;
reg   [0:0] tmp_38_reg_572;
reg   [4:0] i_reg_120;
reg    ap_block_state1;
reg   [4:0] j_reg_132;
wire    ap_CS_fsm_state7;
wire  signed [63:0] tmp_55_cast_fu_268_p1;
wire  signed [63:0] tmp_57_cast_fu_293_p1;
wire  signed [63:0] tmp_56_cast_fu_315_p1;
wire  signed [63:0] tmp_58_cast_fu_333_p1;
wire  signed [63:0] tmp_63_cast_fu_431_p1;
reg   [31:0] y_fu_58;
wire   [31:0] p_s_fu_462_p3;
reg   [31:0] x_fu_62;
wire   [31:0] p_x_1_fu_454_p3;
wire   [9:0] tmp_42_fu_187_p3;
wire   [6:0] tmp_43_fu_199_p3;
wire   [10:0] p_shl2_cast_fu_195_p1;
wire   [10:0] p_shl3_cast_fu_207_p1;
wire   [4:0] tmp_28_fu_217_p2;
wire   [9:0] tmp_45_fu_223_p3;
wire   [6:0] tmp_46_fu_235_p3;
wire   [10:0] p_shl_cast_fu_231_p1;
wire   [10:0] p_shl1_cast_fu_243_p1;
wire   [10:0] tmp_30_cast_fu_259_p1;
wire   [10:0] tmp_48_fu_263_p2;
wire   [4:0] tmp_31_fu_278_p2;
wire   [10:0] tmp_32_cast_fu_284_p1;
wire   [10:0] tmp_50_fu_288_p2;
wire   [47:0] tmp_33_fu_319_p3;
wire   [47:0] tmp_35_fu_344_p3;
wire   [47:0] tmp_37_fu_364_p3;
wire   [4:0] tmp_2_fu_395_p1;
wire   [7:0] tmp_3_fu_407_p1;
wire   [8:0] p_shl4_cast_fu_399_p3;
wire   [8:0] p_shl5_cast_fu_411_p3;
wire   [8:0] tmp_1_fu_391_p1;
wire   [8:0] tmp_52_fu_419_p2;
wire   [8:0] tmp_53_fu_425_p2;
wire   [31:0] y_1_fu_436_p2;
wire   [0:0] tmp_40_fu_442_p2;
wire   [31:0] x_1_fu_448_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_120 <= i_5_fu_309_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_120 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_132 <= j_5_reg_532;
    end else if (((tmp_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_132 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_fu_62 <= p_x_1_fu_454_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_fu_62 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_fu_58 <= p_s_fu_462_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_58 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_5_reg_532 <= j_5_fu_303_p2;
        tmp_49_reg_517 <= tmp_49_fu_273_p2;
        tmp_51_reg_527[10 : 1] <= tmp_51_fu_298_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_V_8_reg_557 <= max_V_8_fu_337_p3;
        tmp_36_reg_562 <= tmp_36_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_V_9_reg_567 <= max_V_9_fu_358_p3;
        tmp_38_reg_572 <= tmp_38_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_163 <= {{in_image_V_q0[47:23]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_167 <= {{in_image_V_q1[47:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_34_reg_547 <= tmp_34_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_44_reg_497[10 : 2] <= tmp_44_fu_211_p2[10 : 2];
        tmp_47_reg_503[10 : 3] <= tmp_47_fu_247_p2[10 : 3];
    end
end

always @ (*) begin
    if (((tmp_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_image_V_address0 = tmp_56_cast_fu_315_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_V_address0 = tmp_55_cast_fu_268_p1;
    end else begin
        in_image_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_image_V_address1 = tmp_58_cast_fu_333_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_image_V_address1 = tmp_57_cast_fu_293_p1;
    end else begin
        in_image_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        in_image_V_ce0 = 1'b1;
    end else begin
        in_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        in_image_V_ce1 = 1'b1;
    end else begin
        in_image_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_V_ce0 = 1'b1;
    end else begin
        out_image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_image_V_we0 = 1'b1;
    end else begin
        out_image_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_29_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_fu_143_p4 = {{in_image_V_q0[47:23]}};

assign i_5_fu_309_p2 = (i_reg_120 + 5'd2);

assign j_5_fu_303_p2 = (5'd2 + j_reg_132);

assign max_V_8_fu_337_p3 = ((tmp_34_reg_547[0:0] === 1'b1) ? reg_167 : reg_163);

assign max_V_9_fu_358_p3 = ((tmp_36_reg_562[0:0] === 1'b1) ? reg_163 : max_V_8_reg_557);

assign out_image_V_address0 = tmp_63_cast_fu_431_p1;

assign out_image_V_d0 = ((tmp_38_reg_572[0:0] === 1'b1) ? reg_167 : max_V_9_reg_567);

assign p_s_fu_462_p3 = ((tmp_40_fu_442_p2[0:0] === 1'b1) ? 32'd0 : y_1_fu_436_p2);

assign p_shl1_cast_fu_243_p1 = tmp_46_fu_235_p3;

assign p_shl2_cast_fu_195_p1 = tmp_42_fu_187_p3;

assign p_shl3_cast_fu_207_p1 = tmp_43_fu_199_p3;

assign p_shl4_cast_fu_399_p3 = {{tmp_2_fu_395_p1}, {4'd0}};

assign p_shl5_cast_fu_411_p3 = {{tmp_3_fu_407_p1}, {1'd0}};

assign p_shl_cast_fu_231_p1 = tmp_45_fu_223_p3;

assign p_x_1_fu_454_p3 = ((tmp_40_fu_442_p2[0:0] === 1'b1) ? x_1_fu_448_p2 : x_fu_62);

assign tmp_1_fu_391_p1 = y_fu_58[8:0];

assign tmp_28_fu_217_p2 = (i_reg_120 | 5'd1);

assign tmp_29_fu_253_p2 = ((j_reg_132 < 5'd28) ? 1'b1 : 1'b0);

assign tmp_2_fu_395_p1 = x_fu_62[4:0];

assign tmp_30_cast_fu_259_p1 = j_reg_132;

assign tmp_31_fu_278_p2 = (j_reg_132 | 5'd1);

assign tmp_32_cast_fu_284_p1 = tmp_31_fu_278_p2;

assign tmp_33_fu_319_p3 = {{grp_fu_143_p4}, {23'd0}};

assign tmp_34_fu_327_p2 = (($signed(in_image_V_q1) > $signed(tmp_33_fu_319_p3)) ? 1'b1 : 1'b0);

assign tmp_35_fu_344_p3 = {{max_V_8_fu_337_p3}, {23'd0}};

assign tmp_36_fu_352_p2 = (($signed(in_image_V_q0) > $signed(tmp_35_fu_344_p3)) ? 1'b1 : 1'b0);

assign tmp_37_fu_364_p3 = {{max_V_9_fu_358_p3}, {23'd0}};

assign tmp_38_fu_372_p2 = (($signed(in_image_V_q1) > $signed(tmp_37_fu_364_p3)) ? 1'b1 : 1'b0);

assign tmp_3_fu_407_p1 = x_fu_62[7:0];

assign tmp_40_fu_442_p2 = ((y_1_fu_436_p2 == 32'd14) ? 1'b1 : 1'b0);

assign tmp_42_fu_187_p3 = {{i_reg_120}, {5'd0}};

assign tmp_43_fu_199_p3 = {{i_reg_120}, {2'd0}};

assign tmp_44_fu_211_p2 = (p_shl2_cast_fu_195_p1 - p_shl3_cast_fu_207_p1);

assign tmp_45_fu_223_p3 = {{tmp_28_fu_217_p2}, {5'd0}};

assign tmp_46_fu_235_p3 = {{tmp_28_fu_217_p2}, {2'd0}};

assign tmp_47_fu_247_p2 = (p_shl_cast_fu_231_p1 - p_shl1_cast_fu_243_p1);

assign tmp_48_fu_263_p2 = (tmp_30_cast_fu_259_p1 + tmp_44_reg_497);

assign tmp_49_fu_273_p2 = (tmp_30_cast_fu_259_p1 + tmp_47_reg_503);

assign tmp_50_fu_288_p2 = (tmp_32_cast_fu_284_p1 + tmp_44_reg_497);

assign tmp_51_fu_298_p2 = (tmp_32_cast_fu_284_p1 + tmp_47_reg_503);

assign tmp_52_fu_419_p2 = (p_shl4_cast_fu_399_p3 - p_shl5_cast_fu_411_p3);

assign tmp_53_fu_425_p2 = (tmp_1_fu_391_p1 + tmp_52_fu_419_p2);

assign tmp_55_cast_fu_268_p1 = $signed(tmp_48_fu_263_p2);

assign tmp_56_cast_fu_315_p1 = $signed(tmp_49_reg_517);

assign tmp_57_cast_fu_293_p1 = $signed(tmp_50_fu_288_p2);

assign tmp_58_cast_fu_333_p1 = $signed(tmp_51_reg_527);

assign tmp_63_cast_fu_431_p1 = $signed(tmp_53_fu_425_p2);

assign tmp_fu_181_p2 = ((i_reg_120 < 5'd28) ? 1'b1 : 1'b0);

assign x_1_fu_448_p2 = (32'd1 + x_fu_62);

assign y_1_fu_436_p2 = (32'd1 + y_fu_58);

always @ (posedge ap_clk) begin
    tmp_44_reg_497[1:0] <= 2'b00;
    tmp_47_reg_503[2:0] <= 3'b100;
    tmp_51_reg_527[0] <= 1'b1;
end

endmodule //max_pool_1chan
