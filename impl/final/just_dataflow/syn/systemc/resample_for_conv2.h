// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _resample_for_conv2_HH_
#define _resample_for_conv2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "CNN_mac_muladd_4neOg.h"

namespace ap_rtl {

struct resample_for_conv2 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > square_image_V_address0;
    sc_out< sc_logic > square_image_V_ce0;
    sc_in< sc_lv<25> > square_image_V_q0;
    sc_out< sc_lv<11> > resampled_V_address0;
    sc_out< sc_logic > resampled_V_ce0;
    sc_out< sc_logic > resampled_V_we0;
    sc_out< sc_lv<25> > resampled_V_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    resample_for_conv2(sc_module_name name);
    SC_HAS_PROCESS(resample_for_conv2);

    ~resample_for_conv2();

    sc_trace_file* mVcdFile;

    CNN_mac_muladd_4neOg<1,2,4,9,8,11>* CNN_mac_muladd_4neOg_U34;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > i_1_fu_173_p2;
    sc_signal< sc_lv<4> > i_1_reg_293;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > l_2_fu_179_p2;
    sc_signal< sc_lv<8> > l_2_reg_298;
    sc_signal< sc_lv<1> > tmp_fu_167_p2;
    sc_signal< sc_lv<4> > j_1_fu_191_p2;
    sc_signal< sc_lv<4> > j_1_reg_306;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<11> > tmp_1_cast_fu_197_p1;
    sc_signal< sc_lv<11> > tmp_1_cast_reg_311;
    sc_signal< sc_lv<1> > tmp_s_fu_185_p2;
    sc_signal< sc_lv<2> > m_1_fu_211_p2;
    sc_signal< sc_lv<2> > m_1_reg_319;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > k_2_fu_217_p2;
    sc_signal< sc_lv<4> > k_2_reg_324;
    sc_signal< sc_lv<1> > tmp_2_fu_205_p2;
    sc_signal< sc_lv<4> > tmp_4_fu_223_p2;
    sc_signal< sc_lv<4> > tmp_4_reg_329;
    sc_signal< sc_lv<8> > tmp_3_fu_229_p2;
    sc_signal< sc_lv<2> > n_1_fu_245_p2;
    sc_signal< sc_lv<2> > n_1_reg_342;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_6_fu_239_p2;
    sc_signal< sc_lv<4> > tmp_10_fu_273_p2;
    sc_signal< sc_lv<4> > tmp_10_reg_357;
    sc_signal< sc_lv<11> > grp_fu_283_p3;
    sc_signal< sc_lv<11> > tmp_11_reg_362;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<25> > square_image_V_load_reg_367;
    sc_signal< sc_lv<4> > i_reg_76;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<8> > l_reg_88;
    sc_signal< sc_lv<4> > j_reg_100;
    sc_signal< sc_lv<8> > l_1_reg_112;
    sc_signal< sc_lv<4> > k_reg_123;
    sc_signal< sc_lv<2> > m_reg_135;
    sc_signal< sc_lv<4> > k_1_reg_146;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<2> > n_reg_156;
    sc_signal< sc_lv<64> > tmp_13_fu_268_p1;
    sc_signal< sc_lv<64> > tmp_13_cast_fu_279_p1;
    sc_signal< sc_lv<4> > m_cast6_fu_201_p1;
    sc_signal< sc_lv<4> > n_cast5_fu_235_p1;
    sc_signal< sc_lv<4> > tmp_8_fu_255_p2;
    sc_signal< sc_lv<8> > tmp_12_fu_261_p3;
    sc_signal< sc_lv<4> > grp_fu_283_p0;
    sc_signal< sc_lv<9> > grp_fu_283_p1;
    sc_signal< sc_lv<8> > grp_fu_283_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_lv<11> > grp_fu_283_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_E;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<11> ap_const_lv11_C4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_283_p0();
    void thread_grp_fu_283_p00();
    void thread_grp_fu_283_p1();
    void thread_grp_fu_283_p2();
    void thread_i_1_fu_173_p2();
    void thread_j_1_fu_191_p2();
    void thread_k_2_fu_217_p2();
    void thread_l_2_fu_179_p2();
    void thread_m_1_fu_211_p2();
    void thread_m_cast6_fu_201_p1();
    void thread_n_1_fu_245_p2();
    void thread_n_cast5_fu_235_p1();
    void thread_resampled_V_address0();
    void thread_resampled_V_ce0();
    void thread_resampled_V_d0();
    void thread_resampled_V_we0();
    void thread_square_image_V_address0();
    void thread_square_image_V_ce0();
    void thread_tmp_10_fu_273_p2();
    void thread_tmp_12_fu_261_p3();
    void thread_tmp_13_cast_fu_279_p1();
    void thread_tmp_13_fu_268_p1();
    void thread_tmp_1_cast_fu_197_p1();
    void thread_tmp_2_fu_205_p2();
    void thread_tmp_3_fu_229_p2();
    void thread_tmp_4_fu_223_p2();
    void thread_tmp_6_fu_239_p2();
    void thread_tmp_8_fu_255_p2();
    void thread_tmp_fu_167_p2();
    void thread_tmp_s_fu_185_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
