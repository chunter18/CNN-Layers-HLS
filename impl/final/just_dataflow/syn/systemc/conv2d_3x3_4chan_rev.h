// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _conv2d_3x3_4chan_rev_HH_
#define _conv2d_3x3_4chan_rev_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "CNN_mul_mul_25s_1fYi.h"

namespace ap_rtl {

struct conv2d_3x3_4chan_rev : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > in_image_V_address0;
    sc_out< sc_logic > in_image_V_ce0;
    sc_in< sc_lv<25> > in_image_V_q0;
    sc_out< sc_lv<6> > kernel_V_address0;
    sc_out< sc_logic > kernel_V_ce0;
    sc_in< sc_lv<18> > kernel_V_q0;
    sc_out< sc_lv<2> > bias_V_address0;
    sc_out< sc_logic > bias_V_ce0;
    sc_in< sc_lv<48> > bias_V_q0;
    sc_out< sc_lv<10> > out_image_V_address0;
    sc_out< sc_logic > out_image_V_ce0;
    sc_out< sc_logic > out_image_V_we0;
    sc_out< sc_lv<48> > out_image_V_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    conv2d_3x3_4chan_rev(sc_module_name name);
    SC_HAS_PROCESS(conv2d_3x3_4chan_rev);

    ~conv2d_3x3_4chan_rev();

    sc_trace_file* mVcdFile;

    CNN_mul_mul_25s_1fYi<1,2,25,18,41>* CNN_mul_mul_25s_1fYi_U38;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > k_5_fu_265_p2;
    sc_signal< sc_lv<3> > k_5_reg_566;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > tmp_68_fu_292_p2;
    sc_signal< sc_lv<7> > tmp_68_reg_571;
    sc_signal< sc_lv<1> > tmp_fu_259_p2;
    sc_signal< sc_lv<34> > tmp_81_cast_fu_328_p1;
    sc_signal< sc_lv<34> > tmp_81_cast_reg_576;
    sc_signal< sc_lv<2> > bias_V_addr_reg_581;
    sc_signal< sc_lv<9> > i_8_fu_338_p2;
    sc_signal< sc_lv<9> > i_8_reg_589;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<11> > tmp_47_cast_fu_344_p1;
    sc_signal< sc_lv<11> > tmp_47_cast_reg_594;
    sc_signal< sc_lv<1> > tmp_46_fu_332_p2;
    sc_signal< sc_lv<4> > j_7_fu_354_p2;
    sc_signal< sc_lv<4> > j_7_reg_602;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_49_fu_360_p2;
    sc_signal< sc_lv<1> > tmp_49_reg_607;
    sc_signal< sc_lv<1> > tmp_48_fu_348_p2;
    sc_signal< sc_lv<11> > next_mul_fu_370_p2;
    sc_signal< sc_lv<11> > next_mul_reg_612;
    sc_signal< sc_lv<1> > tmp_52_fu_396_p2;
    sc_signal< sc_lv<1> > tmp_52_reg_627;
    sc_signal< sc_lv<18> > kernel_V_load_reg_631;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<25> > in_image_V_load_reg_636;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<41> > grp_fu_551_p2;
    sc_signal< sc_lv<41> > p_Val2_9_reg_651;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<48> > acc_V_fu_425_p2;
    sc_signal< sc_lv<48> > acc_V_reg_656;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<11> > tmp_76_fu_474_p2;
    sc_signal< sc_lv<11> > tmp_76_reg_662;
    sc_signal< sc_lv<48> > p_Val2_13_reg_667;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<3> > k_reg_143;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<9> > i_reg_154;
    sc_signal< sc_lv<32> > x_reg_165;
    sc_signal< sc_lv<32> > y_reg_177;
    sc_signal< sc_lv<4> > j_reg_189;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > x_1_reg_200;
    sc_signal< sc_lv<32> > ap_phi_mux_x_1_be_phi_fu_239_p4;
    sc_signal< sc_lv<32> > y_1_reg_212;
    sc_signal< sc_lv<32> > ap_phi_mux_y_1_be_phi_fu_251_p4;
    sc_signal< sc_lv<11> > phi_mul_reg_224;
    sc_signal< sc_lv<32> > p_x_1_fu_529_p3;
    sc_signal< sc_lv<32> > x_1_be_reg_235;
    sc_signal< sc_lv<32> > p_s_fu_538_p3;
    sc_signal< sc_lv<32> > y_1_be_reg_247;
    sc_signal< sc_lv<64> > tmp_s_fu_271_p1;
    sc_signal< sc_lv<64> > tmp_83_cast_fu_381_p1;
    sc_signal< sc_lv<64> > tmp_84_cast_fu_391_p1;
    sc_signal< sc_lv<64> > tmp_89_cast_fu_480_p1;
    sc_signal< sc_lv<48> > p_Val2_10_fu_88;
    sc_signal< sc_lv<6> > tmp_67_fu_280_p3;
    sc_signal< sc_lv<7> > tmp_cast_fu_276_p1;
    sc_signal< sc_lv<7> > p_shl2_cast_fu_288_p1;
    sc_signal< sc_lv<7> > tmp_69_fu_298_p3;
    sc_signal< sc_lv<4> > tmp_70_fu_310_p3;
    sc_signal< sc_lv<8> > p_shl_cast_fu_306_p1;
    sc_signal< sc_lv<8> > p_shl1_cast_fu_318_p1;
    sc_signal< sc_lv<8> > tmp_71_fu_322_p2;
    sc_signal< sc_lv<11> > tmp_72_fu_376_p2;
    sc_signal< sc_lv<7> > tmp_50_cast_fu_366_p1;
    sc_signal< sc_lv<7> > tmp_73_fu_386_p2;
    sc_signal< sc_lv<48> > p_Val2_s_fu_411_p3;
    sc_signal< sc_lv<48> > tmp_51_fu_418_p3;
    sc_signal< sc_lv<34> > tmp_54_cast_fu_435_p1;
    sc_signal< sc_lv<34> > tmp_74_fu_439_p2;
    sc_signal< sc_lv<7> > tmp_5_fu_444_p1;
    sc_signal< sc_lv<10> > tmp_6_fu_456_p1;
    sc_signal< sc_lv<11> > p_shl3_cast_fu_448_p3;
    sc_signal< sc_lv<11> > p_shl4_cast_fu_460_p3;
    sc_signal< sc_lv<11> > tmp_75_fu_468_p2;
    sc_signal< sc_lv<11> > tmp_4_fu_431_p1;
    sc_signal< sc_lv<50> > tmp_70_cast_fu_491_p1;
    sc_signal< sc_lv<50> > tmp_55_fu_484_p3;
    sc_signal< sc_lv<50> > p_Val2_2_fu_494_p2;
    sc_signal< sc_lv<32> > y_2_fu_511_p2;
    sc_signal< sc_lv<1> > tmp_57_fu_517_p2;
    sc_signal< sc_lv<32> > x_2_fu_523_p2;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<11> ap_const_lv11_C4;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_31;
    static const sc_lv<32> ap_const_lv32_E;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_acc_V_fu_425_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_x_1_be_phi_fu_239_p4();
    void thread_ap_phi_mux_y_1_be_phi_fu_251_p4();
    void thread_ap_ready();
    void thread_bias_V_address0();
    void thread_bias_V_ce0();
    void thread_i_8_fu_338_p2();
    void thread_in_image_V_address0();
    void thread_in_image_V_ce0();
    void thread_j_7_fu_354_p2();
    void thread_k_5_fu_265_p2();
    void thread_kernel_V_address0();
    void thread_kernel_V_ce0();
    void thread_next_mul_fu_370_p2();
    void thread_out_image_V_address0();
    void thread_out_image_V_ce0();
    void thread_out_image_V_d0();
    void thread_out_image_V_we0();
    void thread_p_Val2_2_fu_494_p2();
    void thread_p_Val2_s_fu_411_p3();
    void thread_p_s_fu_538_p3();
    void thread_p_shl1_cast_fu_318_p1();
    void thread_p_shl2_cast_fu_288_p1();
    void thread_p_shl3_cast_fu_448_p3();
    void thread_p_shl4_cast_fu_460_p3();
    void thread_p_shl_cast_fu_306_p1();
    void thread_p_x_1_fu_529_p3();
    void thread_tmp_46_fu_332_p2();
    void thread_tmp_47_cast_fu_344_p1();
    void thread_tmp_48_fu_348_p2();
    void thread_tmp_49_fu_360_p2();
    void thread_tmp_4_fu_431_p1();
    void thread_tmp_50_cast_fu_366_p1();
    void thread_tmp_51_fu_418_p3();
    void thread_tmp_52_fu_396_p2();
    void thread_tmp_54_cast_fu_435_p1();
    void thread_tmp_55_fu_484_p3();
    void thread_tmp_57_fu_517_p2();
    void thread_tmp_5_fu_444_p1();
    void thread_tmp_67_fu_280_p3();
    void thread_tmp_68_fu_292_p2();
    void thread_tmp_69_fu_298_p3();
    void thread_tmp_6_fu_456_p1();
    void thread_tmp_70_cast_fu_491_p1();
    void thread_tmp_70_fu_310_p3();
    void thread_tmp_71_fu_322_p2();
    void thread_tmp_72_fu_376_p2();
    void thread_tmp_73_fu_386_p2();
    void thread_tmp_74_fu_439_p2();
    void thread_tmp_75_fu_468_p2();
    void thread_tmp_76_fu_474_p2();
    void thread_tmp_81_cast_fu_328_p1();
    void thread_tmp_83_cast_fu_381_p1();
    void thread_tmp_84_cast_fu_391_p1();
    void thread_tmp_89_cast_fu_480_p1();
    void thread_tmp_cast_fu_276_p1();
    void thread_tmp_fu_259_p2();
    void thread_tmp_s_fu_271_p1();
    void thread_x_2_fu_523_p2();
    void thread_y_2_fu_511_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
