// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _efficient_pad_n_1cha_HH_
#define _efficient_pad_n_1cha_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct efficient_pad_n_1cha : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > in_image_V_address0;
    sc_out< sc_logic > in_image_V_ce0;
    sc_in< sc_lv<18> > in_image_V_q0;
    sc_out< sc_lv<10> > out_image_V_address0;
    sc_out< sc_logic > out_image_V_ce0;
    sc_out< sc_logic > out_image_V_we0;
    sc_out< sc_lv<18> > out_image_V_d0;
    sc_out< sc_lv<10> > out_image_V_address1;
    sc_out< sc_logic > out_image_V_ce1;
    sc_out< sc_logic > out_image_V_we1;
    sc_out< sc_lv<18> > out_image_V_d1;


    // Module declarations
    efficient_pad_n_1cha(sc_module_name name);
    SC_HAS_PROCESS(efficient_pad_n_1cha);

    ~efficient_pad_n_1cha();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_6_fu_151_p2;
    sc_signal< sc_lv<5> > i_6_reg_339;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<11> > tmp_56_fu_190_p2;
    sc_signal< sc_lv<11> > tmp_56_reg_344;
    sc_signal< sc_lv<1> > tmp_fu_145_p2;
    sc_signal< sc_lv<5> > i_7_fu_231_p2;
    sc_signal< sc_lv<5> > i_7_reg_353;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<11> > tmp_61_fu_261_p2;
    sc_signal< sc_lv<11> > tmp_61_reg_358;
    sc_signal< sc_lv<1> > tmp_41_fu_225_p2;
    sc_signal< sc_lv<11> > tmp_64_fu_291_p2;
    sc_signal< sc_lv<11> > tmp_64_reg_363;
    sc_signal< sc_lv<5> > j_6_fu_303_p2;
    sc_signal< sc_lv<5> > j_6_reg_371;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<11> > tmp_65_fu_313_p2;
    sc_signal< sc_lv<11> > tmp_65_reg_376;
    sc_signal< sc_lv<1> > tmp_43_fu_297_p2;
    sc_signal< sc_lv<18> > in_image_V_load_reg_386;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > i_reg_112;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<5> > i_1_reg_123;
    sc_signal< sc_lv<5> > j_reg_134;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > tmp_s_fu_157_p1;
    sc_signal< sc_lv<64> > tmp_67_cast_fu_206_p1;
    sc_signal< sc_lv<64> > tmp_66_cast_fu_211_p1;
    sc_signal< sc_lv<64> > tmp_68_cast_fu_220_p1;
    sc_signal< sc_lv<64> > tmp_76_cast_fu_327_p1;
    sc_signal< sc_lv<64> > tmp_75_cast_fu_332_p1;
    sc_signal< sc_lv<10> > tmp_54_fu_166_p3;
    sc_signal< sc_lv<6> > tmp_55_fu_178_p3;
    sc_signal< sc_lv<11> > p_shl_cast_fu_174_p1;
    sc_signal< sc_lv<11> > p_shl1_cast_fu_186_p1;
    sc_signal< sc_lv<9> > tmp_cast_cast_fu_162_p1;
    sc_signal< sc_lv<9> > tmp_57_fu_196_p2;
    sc_signal< sc_lv<10> > tmp_67_cast1_fu_202_p1;
    sc_signal< sc_lv<11> > tmp_58_fu_215_p2;
    sc_signal< sc_lv<10> > tmp_59_fu_237_p3;
    sc_signal< sc_lv<6> > tmp_60_fu_249_p3;
    sc_signal< sc_lv<11> > p_shl4_cast_fu_245_p1;
    sc_signal< sc_lv<11> > p_shl5_cast_fu_257_p1;
    sc_signal< sc_lv<10> > tmp_62_fu_267_p3;
    sc_signal< sc_lv<7> > tmp_63_fu_279_p3;
    sc_signal< sc_lv<11> > p_shl2_cast_fu_275_p1;
    sc_signal< sc_lv<11> > p_shl3_cast_fu_287_p1;
    sc_signal< sc_lv<11> > tmp_44_cast_fu_309_p1;
    sc_signal< sc_lv<11> > tmp_45_cast_fu_318_p1;
    sc_signal< sc_lv<11> > tmp_66_fu_322_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<18> ap_const_lv18_0;
    static const sc_lv<5> ap_const_lv5_1E;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<9> ap_const_lv9_166;
    static const sc_lv<11> ap_const_lv11_1D;
    static const sc_lv<5> ap_const_lv5_1C;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_6_fu_151_p2();
    void thread_i_7_fu_231_p2();
    void thread_in_image_V_address0();
    void thread_in_image_V_ce0();
    void thread_j_6_fu_303_p2();
    void thread_out_image_V_address0();
    void thread_out_image_V_address1();
    void thread_out_image_V_ce0();
    void thread_out_image_V_ce1();
    void thread_out_image_V_d0();
    void thread_out_image_V_d1();
    void thread_out_image_V_we0();
    void thread_out_image_V_we1();
    void thread_p_shl1_cast_fu_186_p1();
    void thread_p_shl2_cast_fu_275_p1();
    void thread_p_shl3_cast_fu_287_p1();
    void thread_p_shl4_cast_fu_245_p1();
    void thread_p_shl5_cast_fu_257_p1();
    void thread_p_shl_cast_fu_174_p1();
    void thread_tmp_41_fu_225_p2();
    void thread_tmp_43_fu_297_p2();
    void thread_tmp_44_cast_fu_309_p1();
    void thread_tmp_45_cast_fu_318_p1();
    void thread_tmp_54_fu_166_p3();
    void thread_tmp_55_fu_178_p3();
    void thread_tmp_56_fu_190_p2();
    void thread_tmp_57_fu_196_p2();
    void thread_tmp_58_fu_215_p2();
    void thread_tmp_59_fu_237_p3();
    void thread_tmp_60_fu_249_p3();
    void thread_tmp_61_fu_261_p2();
    void thread_tmp_62_fu_267_p3();
    void thread_tmp_63_fu_279_p3();
    void thread_tmp_64_fu_291_p2();
    void thread_tmp_65_fu_313_p2();
    void thread_tmp_66_cast_fu_211_p1();
    void thread_tmp_66_fu_322_p2();
    void thread_tmp_67_cast1_fu_202_p1();
    void thread_tmp_67_cast_fu_206_p1();
    void thread_tmp_68_cast_fu_220_p1();
    void thread_tmp_75_cast_fu_332_p1();
    void thread_tmp_76_cast_fu_327_p1();
    void thread_tmp_cast_cast_fu_162_p1();
    void thread_tmp_fu_145_p2();
    void thread_tmp_s_fu_157_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
