// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pad_for_conv2_HH_
#define _pad_for_conv2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct pad_for_conv2 : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > in_image_V_address0;
    sc_out< sc_logic > in_image_V_ce0;
    sc_in< sc_lv<25> > in_image_V_q0;
    sc_out< sc_lv<8> > out_image_V_address0;
    sc_out< sc_logic > out_image_V_ce0;
    sc_out< sc_logic > out_image_V_we0;
    sc_out< sc_lv<25> > out_image_V_d0;
    sc_out< sc_lv<8> > out_image_V_address1;
    sc_out< sc_logic > out_image_V_ce1;
    sc_out< sc_logic > out_image_V_we1;
    sc_out< sc_lv<25> > out_image_V_d1;


    // Module declarations
    pad_for_conv2(sc_module_name name);
    SC_HAS_PROCESS(pad_for_conv2);

    ~pad_for_conv2();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_3_fu_156_p2;
    sc_signal< sc_lv<5> > i_3_reg_291;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > tmp_31_fu_167_p3;
    sc_signal< sc_lv<9> > tmp_31_reg_296;
    sc_signal< sc_lv<1> > tmp_fu_150_p2;
    sc_signal< sc_lv<4> > i_4_fu_215_p2;
    sc_signal< sc_lv<4> > i_4_reg_304;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<9> > tmp_38_fu_245_p2;
    sc_signal< sc_lv<9> > tmp_38_reg_310;
    sc_signal< sc_lv<1> > tmp_24_fu_209_p2;
    sc_signal< sc_lv<4> > j_4_fu_257_p2;
    sc_signal< sc_lv<4> > j_4_reg_318;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_26_fu_251_p2;
    sc_signal< sc_lv<25> > in_image_V_load_reg_329;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > i_reg_116;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > i_1_reg_128;
    sc_signal< sc_lv<4> > j_reg_139;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > tmp_s_fu_162_p1;
    sc_signal< sc_lv<64> > tmp_32_fu_175_p1;
    sc_signal< sc_lv<64> > tmp_35_cast_fu_190_p1;
    sc_signal< sc_lv<64> > tmp_35_fu_200_p3;
    sc_signal< sc_lv<64> > tmp_43_cast_fu_272_p1;
    sc_signal< sc_lv<64> > tmp_40_fu_283_p1;
    sc_signal< sc_lv<5> > tmp_33_fu_180_p2;
    sc_signal< sc_lv<8> > tmp_35_cast1_fu_186_p1;
    sc_signal< sc_lv<9> > tmp_34_fu_195_p2;
    sc_signal< sc_lv<8> > tmp_36_fu_221_p3;
    sc_signal< sc_lv<5> > tmp_37_fu_233_p3;
    sc_signal< sc_lv<9> > p_shl_cast_fu_229_p1;
    sc_signal< sc_lv<9> > p_shl1_cast_fu_241_p1;
    sc_signal< sc_lv<9> > tmp_27_cast_fu_263_p1;
    sc_signal< sc_lv<9> > tmp_41_fu_267_p2;
    sc_signal< sc_lv<8> > tmp_39_fu_277_p3;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<25> ap_const_lv25_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<9> ap_const_lv9_F;
    static const sc_lv<55> ap_const_lv55_0;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_3_fu_156_p2();
    void thread_i_4_fu_215_p2();
    void thread_in_image_V_address0();
    void thread_in_image_V_ce0();
    void thread_j_4_fu_257_p2();
    void thread_out_image_V_address0();
    void thread_out_image_V_address1();
    void thread_out_image_V_ce0();
    void thread_out_image_V_ce1();
    void thread_out_image_V_d0();
    void thread_out_image_V_d1();
    void thread_out_image_V_we0();
    void thread_out_image_V_we1();
    void thread_p_shl1_cast_fu_241_p1();
    void thread_p_shl_cast_fu_229_p1();
    void thread_tmp_24_fu_209_p2();
    void thread_tmp_26_fu_251_p2();
    void thread_tmp_27_cast_fu_263_p1();
    void thread_tmp_31_fu_167_p3();
    void thread_tmp_32_fu_175_p1();
    void thread_tmp_33_fu_180_p2();
    void thread_tmp_34_fu_195_p2();
    void thread_tmp_35_cast1_fu_186_p1();
    void thread_tmp_35_cast_fu_190_p1();
    void thread_tmp_35_fu_200_p3();
    void thread_tmp_36_fu_221_p3();
    void thread_tmp_37_fu_233_p3();
    void thread_tmp_38_fu_245_p2();
    void thread_tmp_39_fu_277_p3();
    void thread_tmp_40_fu_283_p1();
    void thread_tmp_41_fu_267_p2();
    void thread_tmp_43_cast_fu_272_p1();
    void thread_tmp_fu_150_p2();
    void thread_tmp_s_fu_162_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
