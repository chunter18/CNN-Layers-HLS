// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "batch_norm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic batch_norm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic batch_norm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> batch_norm::ap_ST_fsm_state1 = "1";
const sc_lv<7> batch_norm::ap_ST_fsm_state2 = "10";
const sc_lv<7> batch_norm::ap_ST_fsm_state3 = "100";
const sc_lv<7> batch_norm::ap_ST_fsm_state4 = "1000";
const sc_lv<7> batch_norm::ap_ST_fsm_state5 = "10000";
const sc_lv<7> batch_norm::ap_ST_fsm_state6 = "100000";
const sc_lv<7> batch_norm::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> batch_norm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> batch_norm::ap_const_lv32_1 = "1";
const sc_lv<1> batch_norm::ap_const_lv1_0 = "0";
const sc_lv<32> batch_norm::ap_const_lv32_2 = "10";
const sc_lv<32> batch_norm::ap_const_lv32_3 = "11";
const sc_lv<32> batch_norm::ap_const_lv32_4 = "100";
const sc_lv<32> batch_norm::ap_const_lv32_5 = "101";
const sc_lv<5> batch_norm::ap_const_lv5_0 = "00000";
const sc_lv<1> batch_norm::ap_const_lv1_1 = "1";
const sc_lv<32> batch_norm::ap_const_lv32_6 = "110";
const sc_lv<16> batch_norm::ap_const_lv16_0 = "0000000000000000";
const sc_lv<5> batch_norm::ap_const_lv5_1C = "11100";
const sc_lv<5> batch_norm::ap_const_lv5_1 = "1";
const sc_lv<2> batch_norm::ap_const_lv2_0 = "00";
const sc_lv<11> batch_norm::ap_const_lv11_0 = "00000000000";
const bool batch_norm::ap_const_boolean_1 = true;

batch_norm::batch_norm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    CNN_mac_muladd_25dEe_U22 = new CNN_mac_muladd_25dEe<1,2,25,18,34,37>("CNN_mac_muladd_25dEe_U22");
    CNN_mac_muladd_25dEe_U22->clk(ap_clk);
    CNN_mac_muladd_25dEe_U22->reset(ap_rst);
    CNN_mac_muladd_25dEe_U22->din0(in_image_V_load_reg_260);
    CNN_mac_muladd_25dEe_U22->din1(grp_fu_213_p1);
    CNN_mac_muladd_25dEe_U22->din2(grp_fu_213_p2);
    CNN_mac_muladd_25dEe_U22->ce(ap_var_for_const0);
    CNN_mac_muladd_25dEe_U22->dout(grp_fu_213_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( A_V_empty_n );

    SC_METHOD(thread_A_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( A_V_empty_n );
    sensitive << ( B_V_empty_n );

    SC_METHOD(thread_B_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( B_V_empty_n );

    SC_METHOD(thread_B_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( A_V_empty_n );
    sensitive << ( B_V_empty_n );

    SC_METHOD(thread_OP2_V_i_fu_118_p1);
    sensitive << ( A_V_dout );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( A_V_empty_n );
    sensitive << ( B_V_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_134_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_134_p2 );

    SC_METHOD(thread_grp_fu_213_p1);
    sensitive << ( OP2_V_i_reg_219 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_213_p2);
    sensitive << ( tmp_94_cast_i_reg_224 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_in_image_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_99_cast_fu_197_p1 );

    SC_METHOD(thread_in_image_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_fu_140_p2);
    sensitive << ( j_i_reg_96 );

    SC_METHOD(thread_k_fu_182_p2);
    sensitive << ( k_i_reg_107 );

    SC_METHOD(thread_out_image_V_address0);
    sensitive << ( tmp_99_cast_reg_250 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_out_image_V_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_out_image_V_d0);
    sensitive << ( p_Val2_i_54_reg_270 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_out_image_V_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_p_shl1_cast_fu_166_p1);
    sensitive << ( tmp_s_fu_158_p3 );

    SC_METHOD(thread_p_shl_cast_fu_154_p1);
    sensitive << ( tmp_fu_146_p3 );

    SC_METHOD(thread_tmp_80_fu_170_p2);
    sensitive << ( p_shl_cast_fu_154_p1 );
    sensitive << ( p_shl1_cast_fu_166_p1 );

    SC_METHOD(thread_tmp_81_fu_192_p2);
    sensitive << ( tmp_80_reg_237 );
    sensitive << ( tmp_92_i_cast_fu_188_p1 );

    SC_METHOD(thread_tmp_91_i_fu_176_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( k_i_reg_107 );

    SC_METHOD(thread_tmp_92_i_cast_fu_188_p1);
    sensitive << ( k_i_reg_107 );

    SC_METHOD(thread_tmp_94_cast_i_fu_130_p1);
    sensitive << ( tmp_94_i_fu_122_p3 );

    SC_METHOD(thread_tmp_94_i_fu_122_p3);
    sensitive << ( B_V_dout );

    SC_METHOD(thread_tmp_99_cast_fu_197_p1);
    sensitive << ( tmp_81_fu_192_p2 );

    SC_METHOD(thread_tmp_fu_146_p3);
    sensitive << ( j_i_reg_96 );

    SC_METHOD(thread_tmp_i_fu_134_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_i_reg_96 );

    SC_METHOD(thread_tmp_s_fu_158_p3);
    sensitive << ( j_i_reg_96 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( A_V_empty_n );
    sensitive << ( B_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_134_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_91_i_fu_176_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "batch_norm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_image_V_address0, "(port)in_image_V_address0");
    sc_trace(mVcdFile, in_image_V_ce0, "(port)in_image_V_ce0");
    sc_trace(mVcdFile, in_image_V_q0, "(port)in_image_V_q0");
    sc_trace(mVcdFile, A_V_dout, "(port)A_V_dout");
    sc_trace(mVcdFile, A_V_empty_n, "(port)A_V_empty_n");
    sc_trace(mVcdFile, A_V_read, "(port)A_V_read");
    sc_trace(mVcdFile, B_V_dout, "(port)B_V_dout");
    sc_trace(mVcdFile, B_V_empty_n, "(port)B_V_empty_n");
    sc_trace(mVcdFile, B_V_read, "(port)B_V_read");
    sc_trace(mVcdFile, out_image_V_address0, "(port)out_image_V_address0");
    sc_trace(mVcdFile, out_image_V_ce0, "(port)out_image_V_ce0");
    sc_trace(mVcdFile, out_image_V_we0, "(port)out_image_V_we0");
    sc_trace(mVcdFile, out_image_V_d0, "(port)out_image_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, A_V_blk_n, "A_V_blk_n");
    sc_trace(mVcdFile, B_V_blk_n, "B_V_blk_n");
    sc_trace(mVcdFile, OP2_V_i_fu_118_p1, "OP2_V_i_fu_118_p1");
    sc_trace(mVcdFile, OP2_V_i_reg_219, "OP2_V_i_reg_219");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_94_cast_i_fu_130_p1, "tmp_94_cast_i_fu_130_p1");
    sc_trace(mVcdFile, tmp_94_cast_i_reg_224, "tmp_94_cast_i_reg_224");
    sc_trace(mVcdFile, j_fu_140_p2, "j_fu_140_p2");
    sc_trace(mVcdFile, j_reg_232, "j_reg_232");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_80_fu_170_p2, "tmp_80_fu_170_p2");
    sc_trace(mVcdFile, tmp_80_reg_237, "tmp_80_reg_237");
    sc_trace(mVcdFile, tmp_i_fu_134_p2, "tmp_i_fu_134_p2");
    sc_trace(mVcdFile, k_fu_182_p2, "k_fu_182_p2");
    sc_trace(mVcdFile, k_reg_245, "k_reg_245");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_99_cast_fu_197_p1, "tmp_99_cast_fu_197_p1");
    sc_trace(mVcdFile, tmp_99_cast_reg_250, "tmp_99_cast_reg_250");
    sc_trace(mVcdFile, tmp_91_i_fu_176_p2, "tmp_91_i_fu_176_p2");
    sc_trace(mVcdFile, in_image_V_load_reg_260, "in_image_V_load_reg_260");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_213_p3, "grp_fu_213_p3");
    sc_trace(mVcdFile, p_Val2_i_54_reg_270, "p_Val2_i_54_reg_270");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, j_i_reg_96, "j_i_reg_96");
    sc_trace(mVcdFile, k_i_reg_107, "k_i_reg_107");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_94_i_fu_122_p3, "tmp_94_i_fu_122_p3");
    sc_trace(mVcdFile, tmp_fu_146_p3, "tmp_fu_146_p3");
    sc_trace(mVcdFile, tmp_s_fu_158_p3, "tmp_s_fu_158_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_154_p1, "p_shl_cast_fu_154_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_166_p1, "p_shl1_cast_fu_166_p1");
    sc_trace(mVcdFile, tmp_92_i_cast_fu_188_p1, "tmp_92_i_cast_fu_188_p1");
    sc_trace(mVcdFile, tmp_81_fu_192_p2, "tmp_81_fu_192_p2");
    sc_trace(mVcdFile, grp_fu_213_p1, "grp_fu_213_p1");
    sc_trace(mVcdFile, grp_fu_213_p2, "grp_fu_213_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

batch_norm::~batch_norm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete CNN_mac_muladd_25dEe_U22;
}

void batch_norm::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void batch_norm::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(tmp_i_fu_134_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(tmp_91_i_fu_176_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        j_i_reg_96 = j_reg_232.read();
    } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, B_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, A_V_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        j_i_reg_96 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        k_i_reg_107 = k_reg_245.read();
    } else if ((esl_seteq<1,1,1>(tmp_i_fu_134_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        k_i_reg_107 = ap_const_lv5_0;
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, B_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, A_V_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        OP2_V_i_reg_219 = OP2_V_i_fu_118_p1.read();
        tmp_94_cast_i_reg_224 = tmp_94_cast_i_fu_130_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_image_V_load_reg_260 = in_image_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        j_reg_232 = j_fu_140_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_reg_245 = k_fu_182_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        p_Val2_i_54_reg_270 = grp_fu_213_p3.read();
    }
    if ((esl_seteq<1,1,1>(tmp_i_fu_134_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_80_reg_237 = tmp_80_fu_170_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_91_i_fu_176_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_99_cast_reg_250 = tmp_99_cast_fu_197_p1.read();
    }
}

void batch_norm::thread_A_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        A_V_blk_n = A_V_empty_n.read();
    } else {
        A_V_blk_n = ap_const_logic_1;
    }
}

void batch_norm::thread_A_V_read() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, B_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, A_V_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        A_V_read = ap_const_logic_1;
    } else {
        A_V_read = ap_const_logic_0;
    }
}

void batch_norm::thread_B_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        B_V_blk_n = B_V_empty_n.read();
    } else {
        B_V_blk_n = ap_const_logic_1;
    }
}

void batch_norm::thread_B_V_read() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, B_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, A_V_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        B_V_read = ap_const_logic_1;
    } else {
        B_V_read = ap_const_logic_0;
    }
}

void batch_norm::thread_OP2_V_i_fu_118_p1() {
    OP2_V_i_fu_118_p1 = esl_sext<37,18>(A_V_dout.read());
}

void batch_norm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void batch_norm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void batch_norm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void batch_norm::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void batch_norm::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void batch_norm::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void batch_norm::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void batch_norm::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, B_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, A_V_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void batch_norm::thread_ap_done() {
    if ((esl_seteq<1,1,1>(tmp_i_fu_134_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void batch_norm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void batch_norm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_i_fu_134_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void batch_norm::thread_grp_fu_213_p1() {
    grp_fu_213_p1 =  (sc_lv<18>) (OP2_V_i_reg_219.read());
}

void batch_norm::thread_grp_fu_213_p2() {
    grp_fu_213_p2 =  (sc_lv<34>) (tmp_94_cast_i_reg_224.read());
}

void batch_norm::thread_in_image_V_address0() {
    in_image_V_address0 =  (sc_lv<10>) (tmp_99_cast_fu_197_p1.read());
}

void batch_norm::thread_in_image_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_image_V_ce0 = ap_const_logic_1;
    } else {
        in_image_V_ce0 = ap_const_logic_0;
    }
}

void batch_norm::thread_j_fu_140_p2() {
    j_fu_140_p2 = (!j_i_reg_96.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_i_reg_96.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void batch_norm::thread_k_fu_182_p2() {
    k_fu_182_p2 = (!k_i_reg_107.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(k_i_reg_107.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void batch_norm::thread_out_image_V_address0() {
    out_image_V_address0 =  (sc_lv<10>) (tmp_99_cast_reg_250.read());
}

void batch_norm::thread_out_image_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        out_image_V_ce0 = ap_const_logic_1;
    } else {
        out_image_V_ce0 = ap_const_logic_0;
    }
}

void batch_norm::thread_out_image_V_d0() {
    out_image_V_d0 = esl_concat<37,11>(p_Val2_i_54_reg_270.read(), ap_const_lv11_0);
}

void batch_norm::thread_out_image_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        out_image_V_we0 = ap_const_logic_1;
    } else {
        out_image_V_we0 = ap_const_logic_0;
    }
}

void batch_norm::thread_p_shl1_cast_fu_166_p1() {
    p_shl1_cast_fu_166_p1 = esl_zext<11,7>(tmp_s_fu_158_p3.read());
}

void batch_norm::thread_p_shl_cast_fu_154_p1() {
    p_shl_cast_fu_154_p1 = esl_zext<11,10>(tmp_fu_146_p3.read());
}

void batch_norm::thread_tmp_80_fu_170_p2() {
    tmp_80_fu_170_p2 = (!p_shl_cast_fu_154_p1.read().is_01() || !p_shl1_cast_fu_166_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl_cast_fu_154_p1.read()) - sc_biguint<11>(p_shl1_cast_fu_166_p1.read()));
}

void batch_norm::thread_tmp_81_fu_192_p2() {
    tmp_81_fu_192_p2 = (!tmp_92_i_cast_fu_188_p1.read().is_01() || !tmp_80_reg_237.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_92_i_cast_fu_188_p1.read()) + sc_biguint<11>(tmp_80_reg_237.read()));
}

void batch_norm::thread_tmp_91_i_fu_176_p2() {
    tmp_91_i_fu_176_p2 = (!k_i_reg_107.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(k_i_reg_107.read() == ap_const_lv5_1C);
}

void batch_norm::thread_tmp_92_i_cast_fu_188_p1() {
    tmp_92_i_cast_fu_188_p1 = esl_zext<11,5>(k_i_reg_107.read());
}

void batch_norm::thread_tmp_94_cast_i_fu_130_p1() {
    tmp_94_cast_i_fu_130_p1 = esl_sext<37,34>(tmp_94_i_fu_122_p3.read());
}

void batch_norm::thread_tmp_94_i_fu_122_p3() {
    tmp_94_i_fu_122_p3 = esl_concat<18,16>(B_V_dout.read(), ap_const_lv16_0);
}

void batch_norm::thread_tmp_99_cast_fu_197_p1() {
    tmp_99_cast_fu_197_p1 = esl_sext<64,11>(tmp_81_fu_192_p2.read());
}

void batch_norm::thread_tmp_fu_146_p3() {
    tmp_fu_146_p3 = esl_concat<5,5>(j_i_reg_96.read(), ap_const_lv5_0);
}

void batch_norm::thread_tmp_i_fu_134_p2() {
    tmp_i_fu_134_p2 = (!j_i_reg_96.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(j_i_reg_96.read() == ap_const_lv5_1C);
}

void batch_norm::thread_tmp_s_fu_158_p3() {
    tmp_s_fu_158_p3 = esl_concat<5,2>(j_i_reg_96.read(), ap_const_lv2_0);
}

void batch_norm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_0, B_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, A_V_empty_n.read()) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_i_fu_134_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_91_i_fu_176_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

}

