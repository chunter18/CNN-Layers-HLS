// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "zero_mean_1chan50.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic zero_mean_1chan50::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic zero_mean_1chan50::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> zero_mean_1chan50::ap_ST_fsm_state1 = "1";
const sc_lv<5> zero_mean_1chan50::ap_ST_fsm_state2 = "10";
const sc_lv<5> zero_mean_1chan50::ap_ST_fsm_state3 = "100";
const sc_lv<5> zero_mean_1chan50::ap_ST_fsm_state4 = "1000";
const sc_lv<5> zero_mean_1chan50::ap_ST_fsm_state5 = "10000";
const sc_lv<32> zero_mean_1chan50::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> zero_mean_1chan50::ap_const_lv32_1 = "1";
const sc_lv<1> zero_mean_1chan50::ap_const_lv1_0 = "0";
const sc_lv<32> zero_mean_1chan50::ap_const_lv32_2 = "10";
const sc_lv<32> zero_mean_1chan50::ap_const_lv32_3 = "11";
const sc_lv<5> zero_mean_1chan50::ap_const_lv5_0 = "00000";
const sc_lv<1> zero_mean_1chan50::ap_const_lv1_1 = "1";
const sc_lv<32> zero_mean_1chan50::ap_const_lv32_4 = "100";
const sc_lv<5> zero_mean_1chan50::ap_const_lv5_1C = "11100";
const sc_lv<5> zero_mean_1chan50::ap_const_lv5_1 = "1";
const sc_lv<2> zero_mean_1chan50::ap_const_lv2_0 = "00";
const sc_lv<32> zero_mean_1chan50::ap_const_lv32_12 = "10010";
const bool zero_mean_1chan50::ap_const_boolean_1 = true;

zero_mean_1chan50::zero_mean_1chan50(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_V_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_V_out_full_n );

    SC_METHOD(thread_a_V_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_V );
    sensitive << ( conv_bias_L1_V_out_full_n );
    sensitive << ( a_V_out_full_n );
    sensitive << ( b_V_out_full_n );

    SC_METHOD(thread_a_V_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( conv_bias_L1_V_out_full_n );
    sensitive << ( a_V_out_full_n );
    sensitive << ( b_V_out_full_n );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( conv_bias_L1_V_out_full_n );
    sensitive << ( a_V_out_full_n );
    sensitive << ( b_V_out_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_179_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_179_p2 );

    SC_METHOD(thread_b_V_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( b_V_out_full_n );

    SC_METHOD(thread_b_V_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( b_V );
    sensitive << ( conv_bias_L1_V_out_full_n );
    sensitive << ( a_V_out_full_n );
    sensitive << ( b_V_out_full_n );

    SC_METHOD(thread_b_V_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( conv_bias_L1_V_out_full_n );
    sensitive << ( a_V_out_full_n );
    sensitive << ( b_V_out_full_n );

    SC_METHOD(thread_conv_bias_L1_V_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( conv_bias_L1_V_out_full_n );

    SC_METHOD(thread_conv_bias_L1_V_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( conv_bias_L1_V );
    sensitive << ( conv_bias_L1_V_out_full_n );
    sensitive << ( a_V_out_full_n );
    sensitive << ( b_V_out_full_n );

    SC_METHOD(thread_conv_bias_L1_V_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( conv_bias_L1_V_out_full_n );
    sensitive << ( a_V_out_full_n );
    sensitive << ( b_V_out_full_n );

    SC_METHOD(thread_i_fu_185_p2);
    sensitive << ( i_i_i_reg_157 );

    SC_METHOD(thread_in_image_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_cast_fu_242_p1 );

    SC_METHOD(thread_in_image_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_j_fu_227_p2);
    sensitive << ( j_i_i_reg_168 );

    SC_METHOD(thread_means_V_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_cast_fu_242_p1 );

    SC_METHOD(thread_means_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_image_V_address0);
    sensitive << ( tmp_3_cast_reg_297 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_image_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_image_V_d0);
    sensitive << ( tmp_i_i_19_reg_312 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_image_V_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_p_Val2_2_fu_260_p2);
    sensitive << ( tmp_6_i_i_fu_248_p3 );
    sensitive << ( tmp_7_cast_i_i_fu_256_p1 );

    SC_METHOD(thread_p_shl1_cast_fu_211_p1);
    sensitive << ( tmp_1_fu_203_p3 );

    SC_METHOD(thread_p_shl_cast_fu_199_p1);
    sensitive << ( tmp_fu_191_p3 );

    SC_METHOD(thread_tmp_1_fu_203_p3);
    sensitive << ( i_i_i_reg_157 );

    SC_METHOD(thread_tmp_2_fu_215_p2);
    sensitive << ( p_shl_cast_fu_199_p1 );
    sensitive << ( p_shl1_cast_fu_211_p1 );

    SC_METHOD(thread_tmp_2_i_i_fu_221_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_i_i_reg_168 );

    SC_METHOD(thread_tmp_3_cast_fu_242_p1);
    sensitive << ( tmp_3_fu_237_p2 );

    SC_METHOD(thread_tmp_3_fu_237_p2);
    sensitive << ( tmp_2_reg_284 );
    sensitive << ( tmp_4_i_i_cast_fu_233_p1 );

    SC_METHOD(thread_tmp_4_i_i_cast_fu_233_p1);
    sensitive << ( j_i_i_reg_168 );

    SC_METHOD(thread_tmp_6_i_i_fu_248_p3);
    sensitive << ( in_image_V_q0 );

    SC_METHOD(thread_tmp_7_cast_i_i_fu_256_p1);
    sensitive << ( means_V_q0 );

    SC_METHOD(thread_tmp_fu_191_p3);
    sensitive << ( i_i_i_reg_157 );

    SC_METHOD(thread_tmp_i_i_fu_179_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_i_i_reg_157 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( conv_bias_L1_V_out_full_n );
    sensitive << ( a_V_out_full_n );
    sensitive << ( b_V_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_179_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_i_i_fu_221_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "zero_mean_1chan50_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_image_V_address0, "(port)in_image_V_address0");
    sc_trace(mVcdFile, in_image_V_ce0, "(port)in_image_V_ce0");
    sc_trace(mVcdFile, in_image_V_q0, "(port)in_image_V_q0");
    sc_trace(mVcdFile, out_image_V_address0, "(port)out_image_V_address0");
    sc_trace(mVcdFile, out_image_V_ce0, "(port)out_image_V_ce0");
    sc_trace(mVcdFile, out_image_V_we0, "(port)out_image_V_we0");
    sc_trace(mVcdFile, out_image_V_d0, "(port)out_image_V_d0");
    sc_trace(mVcdFile, means_V_address0, "(port)means_V_address0");
    sc_trace(mVcdFile, means_V_ce0, "(port)means_V_ce0");
    sc_trace(mVcdFile, means_V_q0, "(port)means_V_q0");
    sc_trace(mVcdFile, conv_bias_L1_V, "(port)conv_bias_L1_V");
    sc_trace(mVcdFile, a_V, "(port)a_V");
    sc_trace(mVcdFile, b_V, "(port)b_V");
    sc_trace(mVcdFile, conv_bias_L1_V_out_din, "(port)conv_bias_L1_V_out_din");
    sc_trace(mVcdFile, conv_bias_L1_V_out_full_n, "(port)conv_bias_L1_V_out_full_n");
    sc_trace(mVcdFile, conv_bias_L1_V_out_write, "(port)conv_bias_L1_V_out_write");
    sc_trace(mVcdFile, a_V_out_din, "(port)a_V_out_din");
    sc_trace(mVcdFile, a_V_out_full_n, "(port)a_V_out_full_n");
    sc_trace(mVcdFile, a_V_out_write, "(port)a_V_out_write");
    sc_trace(mVcdFile, b_V_out_din, "(port)b_V_out_din");
    sc_trace(mVcdFile, b_V_out_full_n, "(port)b_V_out_full_n");
    sc_trace(mVcdFile, b_V_out_write, "(port)b_V_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, conv_bias_L1_V_out_blk_n, "conv_bias_L1_V_out_blk_n");
    sc_trace(mVcdFile, a_V_out_blk_n, "a_V_out_blk_n");
    sc_trace(mVcdFile, b_V_out_blk_n, "b_V_out_blk_n");
    sc_trace(mVcdFile, i_fu_185_p2, "i_fu_185_p2");
    sc_trace(mVcdFile, i_reg_279, "i_reg_279");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_2_fu_215_p2, "tmp_2_fu_215_p2");
    sc_trace(mVcdFile, tmp_2_reg_284, "tmp_2_reg_284");
    sc_trace(mVcdFile, tmp_i_i_fu_179_p2, "tmp_i_i_fu_179_p2");
    sc_trace(mVcdFile, j_fu_227_p2, "j_fu_227_p2");
    sc_trace(mVcdFile, j_reg_292, "j_reg_292");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_3_cast_fu_242_p1, "tmp_3_cast_fu_242_p1");
    sc_trace(mVcdFile, tmp_3_cast_reg_297, "tmp_3_cast_reg_297");
    sc_trace(mVcdFile, tmp_2_i_i_fu_221_p2, "tmp_2_i_i_fu_221_p2");
    sc_trace(mVcdFile, tmp_i_i_19_reg_312, "tmp_i_i_19_reg_312");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_i_i_reg_157, "i_i_i_reg_157");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, j_i_i_reg_168, "j_i_i_reg_168");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_fu_191_p3, "tmp_fu_191_p3");
    sc_trace(mVcdFile, tmp_1_fu_203_p3, "tmp_1_fu_203_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_199_p1, "p_shl_cast_fu_199_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_211_p1, "p_shl1_cast_fu_211_p1");
    sc_trace(mVcdFile, tmp_4_i_i_cast_fu_233_p1, "tmp_4_i_i_cast_fu_233_p1");
    sc_trace(mVcdFile, tmp_3_fu_237_p2, "tmp_3_fu_237_p2");
    sc_trace(mVcdFile, tmp_6_i_i_fu_248_p3, "tmp_6_i_i_fu_248_p3");
    sc_trace(mVcdFile, tmp_7_cast_i_i_fu_256_p1, "tmp_7_cast_i_i_fu_256_p1");
    sc_trace(mVcdFile, p_Val2_2_fu_260_p2, "p_Val2_2_fu_260_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

zero_mean_1chan50::~zero_mean_1chan50() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void zero_mean_1chan50::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(tmp_i_i_fu_179_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(tmp_2_i_i_fu_221_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        i_i_i_reg_157 = i_reg_279.read();
    } else if ((!(esl_seteq<1,1,1>(b_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, a_V_out_full_n.read()) || esl_seteq<1,1,1>(conv_bias_L1_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_i_i_reg_157 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_i_i_reg_168 = j_reg_292.read();
    } else if ((esl_seteq<1,1,1>(tmp_i_i_fu_179_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_i_i_reg_168 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_279 = i_fu_185_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_292 = j_fu_227_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_i_i_fu_179_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_2_reg_284 = tmp_2_fu_215_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_2_i_i_fu_221_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_3_cast_reg_297 = tmp_3_cast_fu_242_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_i_i_19_reg_312 = p_Val2_2_fu_260_p2.read().range(18, 1);
    }
}

void zero_mean_1chan50::thread_a_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        a_V_out_blk_n = a_V_out_full_n.read();
    } else {
        a_V_out_blk_n = ap_const_logic_1;
    }
}

void zero_mean_1chan50::thread_a_V_out_din() {
    a_V_out_din = a_V.read();
}

void zero_mean_1chan50::thread_a_V_out_write() {
    if ((!(esl_seteq<1,1,1>(b_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, a_V_out_full_n.read()) || esl_seteq<1,1,1>(conv_bias_L1_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        a_V_out_write = ap_const_logic_1;
    } else {
        a_V_out_write = ap_const_logic_0;
    }
}

void zero_mean_1chan50::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void zero_mean_1chan50::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void zero_mean_1chan50::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void zero_mean_1chan50::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void zero_mean_1chan50::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void zero_mean_1chan50::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(b_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, a_V_out_full_n.read()) || esl_seteq<1,1,1>(conv_bias_L1_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void zero_mean_1chan50::thread_ap_done() {
    if ((esl_seteq<1,1,1>(tmp_i_i_fu_179_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void zero_mean_1chan50::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void zero_mean_1chan50::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_i_i_fu_179_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void zero_mean_1chan50::thread_b_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        b_V_out_blk_n = b_V_out_full_n.read();
    } else {
        b_V_out_blk_n = ap_const_logic_1;
    }
}

void zero_mean_1chan50::thread_b_V_out_din() {
    b_V_out_din = b_V.read();
}

void zero_mean_1chan50::thread_b_V_out_write() {
    if ((!(esl_seteq<1,1,1>(b_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, a_V_out_full_n.read()) || esl_seteq<1,1,1>(conv_bias_L1_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        b_V_out_write = ap_const_logic_1;
    } else {
        b_V_out_write = ap_const_logic_0;
    }
}

void zero_mean_1chan50::thread_conv_bias_L1_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        conv_bias_L1_V_out_blk_n = conv_bias_L1_V_out_full_n.read();
    } else {
        conv_bias_L1_V_out_blk_n = ap_const_logic_1;
    }
}

void zero_mean_1chan50::thread_conv_bias_L1_V_out_din() {
    conv_bias_L1_V_out_din = conv_bias_L1_V.read();
}

void zero_mean_1chan50::thread_conv_bias_L1_V_out_write() {
    if ((!(esl_seteq<1,1,1>(b_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, a_V_out_full_n.read()) || esl_seteq<1,1,1>(conv_bias_L1_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        conv_bias_L1_V_out_write = ap_const_logic_1;
    } else {
        conv_bias_L1_V_out_write = ap_const_logic_0;
    }
}

void zero_mean_1chan50::thread_i_fu_185_p2() {
    i_fu_185_p2 = (!i_i_i_reg_157.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i_i_reg_157.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void zero_mean_1chan50::thread_in_image_V_address0() {
    in_image_V_address0 =  (sc_lv<10>) (tmp_3_cast_fu_242_p1.read());
}

void zero_mean_1chan50::thread_in_image_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_image_V_ce0 = ap_const_logic_1;
    } else {
        in_image_V_ce0 = ap_const_logic_0;
    }
}

void zero_mean_1chan50::thread_j_fu_227_p2() {
    j_fu_227_p2 = (!j_i_i_reg_168.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_i_i_reg_168.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void zero_mean_1chan50::thread_means_V_address0() {
    means_V_address0 =  (sc_lv<10>) (tmp_3_cast_fu_242_p1.read());
}

void zero_mean_1chan50::thread_means_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        means_V_ce0 = ap_const_logic_1;
    } else {
        means_V_ce0 = ap_const_logic_0;
    }
}

void zero_mean_1chan50::thread_out_image_V_address0() {
    out_image_V_address0 =  (sc_lv<10>) (tmp_3_cast_reg_297.read());
}

void zero_mean_1chan50::thread_out_image_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_image_V_ce0 = ap_const_logic_1;
    } else {
        out_image_V_ce0 = ap_const_logic_0;
    }
}

void zero_mean_1chan50::thread_out_image_V_d0() {
    out_image_V_d0 = tmp_i_i_19_reg_312.read();
}

void zero_mean_1chan50::thread_out_image_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_image_V_we0 = ap_const_logic_1;
    } else {
        out_image_V_we0 = ap_const_logic_0;
    }
}

void zero_mean_1chan50::thread_p_Val2_2_fu_260_p2() {
    p_Val2_2_fu_260_p2 = (!tmp_6_i_i_fu_248_p3.read().is_01() || !tmp_7_cast_i_i_fu_256_p1.read().is_01())? sc_lv<19>(): (sc_biguint<19>(tmp_6_i_i_fu_248_p3.read()) - sc_bigint<19>(tmp_7_cast_i_i_fu_256_p1.read()));
}

void zero_mean_1chan50::thread_p_shl1_cast_fu_211_p1() {
    p_shl1_cast_fu_211_p1 = esl_zext<11,7>(tmp_1_fu_203_p3.read());
}

void zero_mean_1chan50::thread_p_shl_cast_fu_199_p1() {
    p_shl_cast_fu_199_p1 = esl_zext<11,10>(tmp_fu_191_p3.read());
}

void zero_mean_1chan50::thread_tmp_1_fu_203_p3() {
    tmp_1_fu_203_p3 = esl_concat<5,2>(i_i_i_reg_157.read(), ap_const_lv2_0);
}

void zero_mean_1chan50::thread_tmp_2_fu_215_p2() {
    tmp_2_fu_215_p2 = (!p_shl_cast_fu_199_p1.read().is_01() || !p_shl1_cast_fu_211_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(p_shl_cast_fu_199_p1.read()) - sc_biguint<11>(p_shl1_cast_fu_211_p1.read()));
}

void zero_mean_1chan50::thread_tmp_2_i_i_fu_221_p2() {
    tmp_2_i_i_fu_221_p2 = (!j_i_i_reg_168.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(j_i_i_reg_168.read() == ap_const_lv5_1C);
}

void zero_mean_1chan50::thread_tmp_3_cast_fu_242_p1() {
    tmp_3_cast_fu_242_p1 = esl_sext<64,11>(tmp_3_fu_237_p2.read());
}

void zero_mean_1chan50::thread_tmp_3_fu_237_p2() {
    tmp_3_fu_237_p2 = (!tmp_4_i_i_cast_fu_233_p1.read().is_01() || !tmp_2_reg_284.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_4_i_i_cast_fu_233_p1.read()) + sc_biguint<11>(tmp_2_reg_284.read()));
}

void zero_mean_1chan50::thread_tmp_4_i_i_cast_fu_233_p1() {
    tmp_4_i_i_cast_fu_233_p1 = esl_zext<11,5>(j_i_i_reg_168.read());
}

void zero_mean_1chan50::thread_tmp_6_i_i_fu_248_p3() {
    tmp_6_i_i_fu_248_p3 = esl_concat<18,1>(in_image_V_q0.read(), ap_const_lv1_0);
}

void zero_mean_1chan50::thread_tmp_7_cast_i_i_fu_256_p1() {
    tmp_7_cast_i_i_fu_256_p1 = esl_sext<19,18>(means_V_q0.read());
}

void zero_mean_1chan50::thread_tmp_fu_191_p3() {
    tmp_fu_191_p3 = esl_concat<5,5>(i_i_i_reg_157.read(), ap_const_lv5_0);
}

void zero_mean_1chan50::thread_tmp_i_i_fu_179_p2() {
    tmp_i_i_fu_179_p2 = (!i_i_i_reg_157.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(i_i_i_reg_157.read() == ap_const_lv5_1C);
}

void zero_mean_1chan50::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(b_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, a_V_out_full_n.read()) || esl_seteq<1,1,1>(conv_bias_L1_V_out_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_i_i_fu_179_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_2_i_i_fu_221_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

