-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_3x3_4chan_rev is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_image_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_image_V_ce0 : OUT STD_LOGIC;
    in_image_V_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    kernel_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kernel_V_ce0 : OUT STD_LOGIC;
    kernel_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    out_image_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_image_V_ce0 : OUT STD_LOGIC;
    out_image_V_we0 : OUT STD_LOGIC;
    out_image_V_d0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
end;


architecture behav of conv2d_3x3_4chan_rev is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_5_fu_265_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_5_reg_566 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_68_fu_292_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_68_reg_571 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_cast_fu_328_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_81_cast_reg_576 : STD_LOGIC_VECTOR (33 downto 0);
    signal bias_V_addr_reg_581 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_8_fu_338_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_8_reg_589 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_47_cast_fu_344_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_47_cast_reg_594 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_354_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_7_reg_602 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_49_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_370_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_612 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_52_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_V_load_reg_631 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal in_image_V_load_reg_636 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_551_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_9_reg_651 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal acc_V_fu_425_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal acc_V_reg_656 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_76_fu_474_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_76_reg_662 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_13_reg_667 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal k_reg_143 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_reg_154 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_189 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal x_1_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_x_1_be_phi_fu_239_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_y_1_be_phi_fu_251_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_224 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_x_1_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_be_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_538_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_be_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_cast_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_cast_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_cast_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_10_fu_88 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_67_fu_280_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_276_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_288_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_69_fu_298_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_70_fu_310_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_fu_322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_376_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_50_cast_fu_366_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_73_fu_386_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_s_fu_411_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_51_fu_418_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_54_cast_fu_435_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_74_fu_439_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_5_fu_444_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_456_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_448_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_460_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_75_fu_468_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_431_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_70_cast_fu_491_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_55_fu_484_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_2_fu_494_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_2_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_2_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component CNN_mul_mul_25s_1fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;



begin
    CNN_mul_mul_25s_1fYi_U38 : component CNN_mul_mul_25s_1fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 25,
        din1_WIDTH => 18,
        dout_WIDTH => 41)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_image_V_load_reg_636,
        din1 => kernel_V_load_reg_631,
        ce => ap_const_logic_1,
        dout => grp_fu_551_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_48_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_154 <= i_8_reg_589;
            elsif (((tmp_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_154 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_reg_189 <= j_7_reg_602;
            elsif (((tmp_46_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_189 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_46_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_143 <= k_5_reg_566;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_143 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_mul_reg_224 <= next_mul_reg_612;
            elsif (((tmp_46_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_224 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    x_1_be_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_52_reg_627 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                x_1_be_reg_235 <= x_1_reg_200;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_52_reg_627 = ap_const_lv1_1))) then 
                x_1_be_reg_235 <= p_x_1_fu_529_p3;
            end if; 
        end if;
    end process;

    x_1_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                x_1_reg_200 <= ap_phi_mux_x_1_be_phi_fu_239_p4;
            elsif (((tmp_46_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_1_reg_200 <= x_reg_165;
            end if; 
        end if;
    end process;

    x_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_48_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_reg_165 <= x_1_reg_200;
            elsif (((tmp_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_reg_165 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_1_be_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_52_reg_627 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                y_1_be_reg_247 <= y_1_reg_212;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_52_reg_627 = ap_const_lv1_1))) then 
                y_1_be_reg_247 <= p_s_fu_538_p3;
            end if; 
        end if;
    end process;

    y_1_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                y_1_reg_212 <= ap_phi_mux_y_1_be_phi_fu_251_p4;
            elsif (((tmp_46_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_1_reg_212 <= y_reg_177;
            end if; 
        end if;
    end process;

    y_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_48_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_reg_177 <= y_1_reg_212;
            elsif (((tmp_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_reg_177 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                acc_V_reg_656 <= acc_V_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                bias_V_addr_reg_581 <= tmp_s_fu_271_p1(2 - 1 downto 0);
                tmp_68_reg_571 <= tmp_68_fu_292_p2;
                    tmp_81_cast_reg_576(33 downto 1) <= tmp_81_cast_fu_328_p1(33 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_8_reg_589 <= i_8_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                in_image_V_load_reg_636 <= in_image_V_q0;
                kernel_V_load_reg_631 <= kernel_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_7_reg_602 <= j_7_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_5_reg_566 <= k_5_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_48_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                next_mul_reg_612 <= next_mul_fu_370_p2;
                tmp_49_reg_607 <= tmp_49_fu_360_p2;
                tmp_52_reg_627 <= tmp_52_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_10_fu_88 <= acc_V_reg_656;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_13_reg_667 <= bias_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_9_reg_651 <= grp_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_46_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_47_cast_reg_594(8 downto 0) <= tmp_47_cast_fu_344_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_52_reg_627 = ap_const_lv1_1))) then
                tmp_76_reg_662 <= tmp_76_fu_474_p2;
            end if;
        end if;
    end process;
    tmp_81_cast_reg_576(0) <= '0';
    tmp_47_cast_reg_594(10 downto 9) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_259_p2, ap_CS_fsm_state3, tmp_46_fu_332_p2, ap_CS_fsm_state4, tmp_48_fu_348_p2, tmp_52_reg_627, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_46_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_48_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((tmp_52_reg_627 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    acc_V_fu_425_p2 <= std_logic_vector(unsigned(p_Val2_s_fu_411_p3) + unsigned(tmp_51_fu_418_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_259_p2)
    begin
        if (((tmp_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_x_1_be_phi_fu_239_p4_assign_proc : process(tmp_52_reg_627, ap_CS_fsm_state10, p_x_1_fu_529_p3, x_1_be_reg_235)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_52_reg_627 = ap_const_lv1_1))) then 
            ap_phi_mux_x_1_be_phi_fu_239_p4 <= p_x_1_fu_529_p3;
        else 
            ap_phi_mux_x_1_be_phi_fu_239_p4 <= x_1_be_reg_235;
        end if; 
    end process;


    ap_phi_mux_y_1_be_phi_fu_251_p4_assign_proc : process(tmp_52_reg_627, ap_CS_fsm_state10, p_s_fu_538_p3, y_1_be_reg_247)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_52_reg_627 = ap_const_lv1_1))) then 
            ap_phi_mux_y_1_be_phi_fu_251_p4 <= p_s_fu_538_p3;
        else 
            ap_phi_mux_y_1_be_phi_fu_251_p4 <= y_1_be_reg_247;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_259_p2)
    begin
        if (((tmp_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_581;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_8_fu_338_p2 <= std_logic_vector(unsigned(i_reg_154) + unsigned(ap_const_lv9_1));
    in_image_V_address0 <= tmp_83_cast_fu_381_p1(11 - 1 downto 0);

    in_image_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_image_V_ce0 <= ap_const_logic_1;
        else 
            in_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_7_fu_354_p2 <= std_logic_vector(unsigned(j_reg_189) + unsigned(ap_const_lv4_1));
    k_5_fu_265_p2 <= std_logic_vector(unsigned(k_reg_143) + unsigned(ap_const_lv3_1));
    kernel_V_address0 <= tmp_84_cast_fu_391_p1(6 - 1 downto 0);

    kernel_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_V_ce0 <= ap_const_logic_1;
        else 
            kernel_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_370_p2 <= std_logic_vector(unsigned(phi_mul_reg_224) + unsigned(ap_const_lv11_C4));
    out_image_V_address0 <= tmp_89_cast_fu_480_p1(10 - 1 downto 0);

    out_image_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_image_V_ce0 <= ap_const_logic_1;
        else 
            out_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_image_V_d0 <= p_Val2_2_fu_494_p2(49 downto 2);

    out_image_V_we0_assign_proc : process(tmp_52_reg_627, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_52_reg_627 = ap_const_lv1_1))) then 
            out_image_V_we0 <= ap_const_logic_1;
        else 
            out_image_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_2_fu_494_p2 <= std_logic_vector(signed(tmp_70_cast_fu_491_p1) + signed(tmp_55_fu_484_p3));
    p_Val2_s_fu_411_p3 <= 
        ap_const_lv48_0 when (tmp_49_reg_607(0) = '1') else 
        p_Val2_10_fu_88;
    p_s_fu_538_p3 <= 
        ap_const_lv32_0 when (tmp_57_fu_517_p2(0) = '1') else 
        y_2_fu_511_p2;
    p_shl1_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_310_p3),8));
    p_shl2_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_280_p3),7));
    p_shl3_cast_fu_448_p3 <= (tmp_5_fu_444_p1 & ap_const_lv4_0);
    p_shl4_cast_fu_460_p3 <= (tmp_6_fu_456_p1 & ap_const_lv1_0);
    p_shl_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_298_p3),8));
    p_x_1_fu_529_p3 <= 
        x_2_fu_523_p2 when (tmp_57_fu_517_p2(0) = '1') else 
        x_1_reg_200;
    tmp_46_fu_332_p2 <= "1" when (i_reg_154 = ap_const_lv9_100) else "0";
    tmp_47_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_154),11));
    tmp_48_fu_348_p2 <= "1" when (j_reg_189 = ap_const_lv4_9) else "0";
    tmp_49_fu_360_p2 <= "1" when (j_reg_189 = ap_const_lv4_0) else "0";
    tmp_4_fu_431_p1 <= y_1_reg_212(11 - 1 downto 0);
    tmp_50_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_189),7));
    tmp_51_fu_418_p3 <= (p_Val2_9_reg_651 & ap_const_lv7_0);
    tmp_52_fu_396_p2 <= "1" when (j_reg_189 = ap_const_lv4_8) else "0";
    tmp_54_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_200),34));
    tmp_55_fu_484_p3 <= (acc_V_reg_656 & ap_const_lv2_0);
    tmp_57_fu_517_p2 <= "1" when (y_2_fu_511_p2 = ap_const_lv32_E) else "0";
    tmp_5_fu_444_p1 <= tmp_74_fu_439_p2(7 - 1 downto 0);
    tmp_67_fu_280_p3 <= (k_reg_143 & ap_const_lv3_0);
    tmp_68_fu_292_p2 <= std_logic_vector(unsigned(tmp_cast_fu_276_p1) + unsigned(p_shl2_cast_fu_288_p1));
    tmp_69_fu_298_p3 <= (k_reg_143 & ap_const_lv4_0);
    tmp_6_fu_456_p1 <= tmp_74_fu_439_p2(10 - 1 downto 0);
        tmp_70_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_reg_667),50));

    tmp_70_fu_310_p3 <= (k_reg_143 & ap_const_lv1_0);
    tmp_71_fu_322_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_306_p1) - unsigned(p_shl1_cast_fu_318_p1));
    tmp_72_fu_376_p2 <= std_logic_vector(unsigned(tmp_47_cast_reg_594) + unsigned(phi_mul_reg_224));
    tmp_73_fu_386_p2 <= std_logic_vector(unsigned(tmp_50_cast_fu_366_p1) + unsigned(tmp_68_reg_571));
    tmp_74_fu_439_p2 <= std_logic_vector(signed(tmp_81_cast_reg_576) + signed(tmp_54_cast_fu_435_p1));
    tmp_75_fu_468_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_448_p3) - unsigned(p_shl4_cast_fu_460_p3));
    tmp_76_fu_474_p2 <= std_logic_vector(unsigned(tmp_75_fu_468_p2) + unsigned(tmp_4_fu_431_p1));
        tmp_81_cast_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_71_fu_322_p2),34));

    tmp_83_cast_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_376_p2),64));
    tmp_84_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_fu_386_p2),64));
    tmp_89_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_reg_662),64));
    tmp_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_143),7));
    tmp_fu_259_p2 <= "1" when (k_reg_143 = ap_const_lv3_4) else "0";
    tmp_s_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_143),64));
    x_2_fu_523_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(x_1_reg_200));
    y_2_fu_511_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(y_1_reg_212));
end behav;
