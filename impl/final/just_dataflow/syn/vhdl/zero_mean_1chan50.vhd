-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity zero_mean_1chan50 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_image_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_image_V_ce0 : OUT STD_LOGIC;
    in_image_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    out_image_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_image_V_ce0 : OUT STD_LOGIC;
    out_image_V_we0 : OUT STD_LOGIC;
    out_image_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    means_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    means_V_ce0 : OUT STD_LOGIC;
    means_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    conv_bias_L1_V : IN STD_LOGIC_VECTOR (47 downto 0);
    a_V : IN STD_LOGIC_VECTOR (17 downto 0);
    b_V : IN STD_LOGIC_VECTOR (17 downto 0);
    conv_bias_L1_V_out_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    conv_bias_L1_V_out_full_n : IN STD_LOGIC;
    conv_bias_L1_V_out_write : OUT STD_LOGIC;
    a_V_out_din : OUT STD_LOGIC_VECTOR (17 downto 0);
    a_V_out_full_n : IN STD_LOGIC;
    a_V_out_write : OUT STD_LOGIC;
    b_V_out_din : OUT STD_LOGIC_VECTOR (17 downto 0);
    b_V_out_full_n : IN STD_LOGIC;
    b_V_out_write : OUT STD_LOGIC );
end;


architecture behav of zero_mean_1chan50 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_bias_L1_V_out_blk_n : STD_LOGIC;
    signal a_V_out_blk_n : STD_LOGIC;
    signal b_V_out_blk_n : STD_LOGIC;
    signal i_fu_185_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_279 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_215_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_reg_284 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_227_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_292 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_cast_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_reg_297 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_i_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_19_reg_312 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_i_i_reg_157 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal j_i_i_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_191_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_203_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_199_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_211_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_i_i_cast_fu_233_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_237_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_i_i_fu_248_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_7_cast_i_i_fu_256_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_2_fu_260_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_i_i_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_i_i_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_i_i_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_i_i_reg_157 <= i_reg_279;
            elsif ((not(((b_V_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = a_V_out_full_n) or (conv_bias_L1_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_i_reg_157 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_i_i_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_i_i_reg_168 <= j_reg_292;
            elsif (((tmp_i_i_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_i_i_reg_168 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_279 <= i_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_292 <= j_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_i_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_2_reg_284(10 downto 2) <= tmp_2_fu_215_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_i_i_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_3_cast_reg_297 <= tmp_3_cast_fu_242_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_i_i_19_reg_312 <= p_Val2_2_fu_260_p2(18 downto 1);
            end if;
        end if;
    end process;
    tmp_2_reg_284(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, conv_bias_L1_V_out_full_n, a_V_out_full_n, b_V_out_full_n, ap_CS_fsm_state2, tmp_i_i_fu_179_p2, ap_CS_fsm_state3, tmp_2_i_i_fu_221_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((b_V_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = a_V_out_full_n) or (conv_bias_L1_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_i_i_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_2_i_i_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_V_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, a_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            a_V_out_blk_n <= a_V_out_full_n;
        else 
            a_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    a_V_out_din <= a_V;

    a_V_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, conv_bias_L1_V_out_full_n, a_V_out_full_n, b_V_out_full_n)
    begin
        if ((not(((b_V_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = a_V_out_full_n) or (conv_bias_L1_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            a_V_out_write <= ap_const_logic_1;
        else 
            a_V_out_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, conv_bias_L1_V_out_full_n, a_V_out_full_n, b_V_out_full_n)
    begin
                ap_block_state1 <= ((b_V_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = a_V_out_full_n) or (conv_bias_L1_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_i_i_fu_179_p2)
    begin
        if (((tmp_i_i_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_i_i_fu_179_p2)
    begin
        if (((tmp_i_i_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_V_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, b_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_V_out_blk_n <= b_V_out_full_n;
        else 
            b_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_V_out_din <= b_V;

    b_V_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, conv_bias_L1_V_out_full_n, a_V_out_full_n, b_V_out_full_n)
    begin
        if ((not(((b_V_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = a_V_out_full_n) or (conv_bias_L1_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_V_out_write <= ap_const_logic_1;
        else 
            b_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    conv_bias_L1_V_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, conv_bias_L1_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_bias_L1_V_out_blk_n <= conv_bias_L1_V_out_full_n;
        else 
            conv_bias_L1_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv_bias_L1_V_out_din <= conv_bias_L1_V;

    conv_bias_L1_V_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, conv_bias_L1_V_out_full_n, a_V_out_full_n, b_V_out_full_n)
    begin
        if ((not(((b_V_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = a_V_out_full_n) or (conv_bias_L1_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conv_bias_L1_V_out_write <= ap_const_logic_1;
        else 
            conv_bias_L1_V_out_write <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_185_p2 <= std_logic_vector(unsigned(i_i_i_reg_157) + unsigned(ap_const_lv5_1));
    in_image_V_address0 <= tmp_3_cast_fu_242_p1(10 - 1 downto 0);

    in_image_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_image_V_ce0 <= ap_const_logic_1;
        else 
            in_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_227_p2 <= std_logic_vector(unsigned(j_i_i_reg_168) + unsigned(ap_const_lv5_1));
    means_V_address0 <= tmp_3_cast_fu_242_p1(10 - 1 downto 0);

    means_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            means_V_ce0 <= ap_const_logic_1;
        else 
            means_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_image_V_address0 <= tmp_3_cast_reg_297(10 - 1 downto 0);

    out_image_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_image_V_ce0 <= ap_const_logic_1;
        else 
            out_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_image_V_d0 <= tmp_i_i_19_reg_312;

    out_image_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_image_V_we0 <= ap_const_logic_1;
        else 
            out_image_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_2_fu_260_p2 <= std_logic_vector(unsigned(tmp_6_i_i_fu_248_p3) - unsigned(tmp_7_cast_i_i_fu_256_p1));
    p_shl1_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_203_p3),11));
    p_shl_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_191_p3),11));
    tmp_1_fu_203_p3 <= (i_i_i_reg_157 & ap_const_lv2_0);
    tmp_2_fu_215_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_199_p1) - unsigned(p_shl1_cast_fu_211_p1));
    tmp_2_i_i_fu_221_p2 <= "1" when (j_i_i_reg_168 = ap_const_lv5_1C) else "0";
        tmp_3_cast_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_237_p2),64));

    tmp_3_fu_237_p2 <= std_logic_vector(unsigned(tmp_4_i_i_cast_fu_233_p1) + unsigned(tmp_2_reg_284));
    tmp_4_i_i_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_i_reg_168),11));
    tmp_6_i_i_fu_248_p3 <= (in_image_V_q0 & ap_const_lv1_0);
        tmp_7_cast_i_i_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(means_V_q0),19));

    tmp_fu_191_p3 <= (i_i_i_reg_157 & ap_const_lv5_0);
    tmp_i_i_fu_179_p2 <= "1" when (i_i_i_reg_157 = ap_const_lv5_1C) else "0";
end behav;
