-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_features_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_features_V_ce0 : OUT STD_LOGIC;
    in_features_V_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    activations_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    activations_V_ce0 : OUT STD_LOGIC;
    activations_V_we0 : OUT STD_LOGIC;
    activations_V_d0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
end;


architecture behav of relu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_3_fu_88_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_166 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_29_fu_118_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_reg_171 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_4_fu_130_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_4_reg_179 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_32_cast_fu_145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_reg_184 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_features_V_load_reg_194 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_reg_60 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal k_reg_71 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_27_fu_94_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_106_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_102_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_114_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_cast_fu_136_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_140_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_fu_82_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_60 <= j_3_reg_166;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_60 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_reg_71 <= k_4_reg_179;
            elsif (((tmp_fu_82_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_71 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                in_features_V_load_reg_194 <= in_features_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_3_reg_166 <= j_3_fu_88_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_4_reg_179 <= k_4_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_82_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_29_reg_171(10 downto 2) <= tmp_29_fu_118_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_32_cast_reg_184 <= tmp_32_cast_fu_145_p1;
            end if;
        end if;
    end process;
    tmp_29_reg_171(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_82_p2, ap_CS_fsm_state3, tmp_21_fu_124_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_82_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_21_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    activations_V_address0 <= tmp_32_cast_reg_184(10 - 1 downto 0);

    activations_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            activations_V_ce0 <= ap_const_logic_1;
        else 
            activations_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    activations_V_d0 <= 
        in_features_V_load_reg_194 when (tmp_23_fu_150_p2(0) = '1') else 
        ap_const_lv48_0;

    activations_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            activations_V_we0 <= ap_const_logic_1;
        else 
            activations_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_82_p2)
    begin
        if (((tmp_fu_82_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_82_p2)
    begin
        if (((tmp_fu_82_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    in_features_V_address0 <= tmp_32_cast_fu_145_p1(10 - 1 downto 0);

    in_features_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_features_V_ce0 <= ap_const_logic_1;
        else 
            in_features_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_3_fu_88_p2 <= std_logic_vector(unsigned(j_reg_60) + unsigned(ap_const_lv5_1));
    k_4_fu_130_p2 <= std_logic_vector(unsigned(k_reg_71) + unsigned(ap_const_lv5_1));
    p_shl1_cast_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_106_p3),11));
    p_shl_cast_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_94_p3),11));
    tmp_21_fu_124_p2 <= "1" when (k_reg_71 = ap_const_lv5_1C) else "0";
    tmp_22_cast_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_71),11));
    tmp_23_fu_150_p2 <= "1" when (signed(in_features_V_load_reg_194) > signed(ap_const_lv48_0)) else "0";
    tmp_27_fu_94_p3 <= (j_reg_60 & ap_const_lv5_0);
    tmp_28_fu_106_p3 <= (j_reg_60 & ap_const_lv2_0);
    tmp_29_fu_118_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_102_p1) - unsigned(p_shl1_cast_fu_114_p1));
    tmp_30_fu_140_p2 <= std_logic_vector(unsigned(tmp_29_reg_171) + unsigned(tmp_22_cast_fu_136_p1));
        tmp_32_cast_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_fu_140_p2),64));

    tmp_fu_82_p2 <= "1" when (j_reg_60 = ap_const_lv5_1C) else "0";
end behav;
