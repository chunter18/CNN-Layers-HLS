-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity efficient_pad_n_1cha is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_image_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_image_V_ce0 : OUT STD_LOGIC;
    in_image_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    out_image_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_image_V_ce0 : OUT STD_LOGIC;
    out_image_V_we0 : OUT STD_LOGIC;
    out_image_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    out_image_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_image_V_ce1 : OUT STD_LOGIC;
    out_image_V_we1 : OUT STD_LOGIC;
    out_image_V_d1 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of efficient_pad_n_1cha is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_166 : STD_LOGIC_VECTOR (8 downto 0) := "101100110";
    constant ap_const_lv11_1D : STD_LOGIC_VECTOR (10 downto 0) := "00000011101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_6_fu_151_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_339 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_56_fu_190_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_reg_344 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_353 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_61_fu_261_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_61_reg_358 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_291_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_64_reg_363 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_6_fu_303_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_6_reg_371 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_65_fu_313_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_65_reg_376 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_43_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_image_V_load_reg_386 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_reg_112 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_reg_123 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_134 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_s_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_cast_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_cast_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_cast_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_cast_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_cast_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_166_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_55_fu_178_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_174_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_186_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_cast_fu_162_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_57_fu_196_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_67_cast1_fu_202_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_58_fu_215_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_fu_237_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_60_fu_249_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_245_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_257_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_267_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_fu_279_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_275_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_287_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_44_cast_fu_309_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_45_cast_fu_318_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_66_fu_322_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_41_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_123 <= ap_const_lv5_0;
            elsif (((tmp_43_fu_297_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_123 <= i_7_reg_353;
            end if; 
        end if;
    end process;

    i_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_112 <= i_6_reg_339;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_112 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_134 <= j_6_reg_371;
            elsif (((tmp_41_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_134 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_6_reg_339 <= i_6_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_7_reg_353 <= i_7_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_image_V_load_reg_386 <= in_image_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_6_reg_371 <= j_6_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_56_reg_344(10 downto 1) <= tmp_56_fu_190_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_41_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_61_reg_358(10 downto 1) <= tmp_61_fu_261_p2(10 downto 1);
                    tmp_64_reg_363(10 downto 2) <= tmp_64_fu_291_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_43_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_65_reg_376 <= tmp_65_fu_313_p2;
            end if;
        end if;
    end process;
    tmp_56_reg_344(0) <= '0';
    tmp_61_reg_358(0) <= '0';
    tmp_64_reg_363(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_145_p2, ap_CS_fsm_state4, tmp_41_fu_225_p2, ap_CS_fsm_state5, tmp_43_fu_297_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_145_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((tmp_41_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_43_fu_297_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, tmp_41_fu_225_p2)
    begin
        if (((tmp_41_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, tmp_41_fu_225_p2)
    begin
        if (((tmp_41_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_6_fu_151_p2 <= std_logic_vector(unsigned(i_reg_112) + unsigned(ap_const_lv5_1));
    i_7_fu_231_p2 <= std_logic_vector(unsigned(i_1_reg_123) + unsigned(ap_const_lv5_1));
    in_image_V_address0 <= tmp_76_cast_fu_327_p1(10 - 1 downto 0);

    in_image_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_image_V_ce0 <= ap_const_logic_1;
        else 
            in_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_6_fu_303_p2 <= std_logic_vector(unsigned(j_reg_134) + unsigned(ap_const_lv5_1));

    out_image_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, tmp_s_fu_157_p1, tmp_66_cast_fu_211_p1, tmp_75_cast_fu_332_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_image_V_address0 <= tmp_75_cast_fu_332_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_image_V_address0 <= tmp_66_cast_fu_211_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_image_V_address0 <= tmp_s_fu_157_p1(10 - 1 downto 0);
        else 
            out_image_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_image_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_67_cast_fu_206_p1, tmp_68_cast_fu_220_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_image_V_address1 <= tmp_68_cast_fu_220_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_image_V_address1 <= tmp_67_cast_fu_206_p1(10 - 1 downto 0);
        else 
            out_image_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_image_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_image_V_ce0 <= ap_const_logic_1;
        else 
            out_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_image_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_image_V_ce1 <= ap_const_logic_1;
        else 
            out_image_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_image_V_d0_assign_proc : process(ap_CS_fsm_state2, in_image_V_load_reg_386, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_image_V_d0 <= in_image_V_load_reg_386;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_image_V_d0 <= ap_const_lv18_0;
        else 
            out_image_V_d0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    out_image_V_d1 <= ap_const_lv18_0;

    out_image_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_fu_145_p2, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_image_V_we0 <= ap_const_logic_1;
        else 
            out_image_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_image_V_we1_assign_proc : process(ap_CS_fsm_state2, tmp_fu_145_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_image_V_we1 <= ap_const_logic_1;
        else 
            out_image_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_178_p3),11));
    p_shl2_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_267_p3),11));
    p_shl3_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_279_p3),11));
    p_shl4_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_237_p3),11));
    p_shl5_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_249_p3),11));
    p_shl_cast_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_166_p3),11));
    tmp_41_fu_225_p2 <= "1" when (i_1_reg_123 = ap_const_lv5_1C) else "0";
    tmp_43_fu_297_p2 <= "1" when (j_reg_134 = ap_const_lv5_1C) else "0";
    tmp_44_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_6_fu_303_p2),11));
    tmp_45_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_134),11));
    tmp_54_fu_166_p3 <= (i_reg_112 & ap_const_lv5_0);
    tmp_55_fu_178_p3 <= (i_reg_112 & ap_const_lv1_0);
    tmp_56_fu_190_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_174_p1) - unsigned(p_shl1_cast_fu_186_p1));
    tmp_57_fu_196_p2 <= std_logic_vector(unsigned(tmp_cast_cast_fu_162_p1) + unsigned(ap_const_lv9_166));
    tmp_58_fu_215_p2 <= std_logic_vector(signed(tmp_56_reg_344) + signed(ap_const_lv11_1D));
    tmp_59_fu_237_p3 <= (i_7_fu_231_p2 & ap_const_lv5_0);
    tmp_60_fu_249_p3 <= (i_7_fu_231_p2 & ap_const_lv1_0);
    tmp_61_fu_261_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_245_p1) - unsigned(p_shl5_cast_fu_257_p1));
    tmp_62_fu_267_p3 <= (i_1_reg_123 & ap_const_lv5_0);
    tmp_63_fu_279_p3 <= (i_1_reg_123 & ap_const_lv2_0);
    tmp_64_fu_291_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_275_p1) - unsigned(p_shl3_cast_fu_287_p1));
    tmp_65_fu_313_p2 <= std_logic_vector(unsigned(tmp_61_reg_358) + unsigned(tmp_44_cast_fu_309_p1));
        tmp_66_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_reg_344),64));

    tmp_66_fu_322_p2 <= std_logic_vector(unsigned(tmp_64_reg_363) + unsigned(tmp_45_cast_fu_318_p1));
        tmp_67_cast1_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_fu_196_p2),10));

    tmp_67_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_cast1_fu_202_p1),64));
        tmp_68_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_fu_215_p2),64));

        tmp_75_cast_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_65_reg_376),64));

        tmp_76_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_66_fu_322_p2),64));

    tmp_cast_cast_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_112),9));
    tmp_fu_145_p2 <= "1" when (i_reg_112 = ap_const_lv5_1E) else "0";
    tmp_s_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_112),64));
end behav;
