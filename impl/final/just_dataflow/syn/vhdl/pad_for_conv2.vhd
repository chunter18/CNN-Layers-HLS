-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pad_for_conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_image_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_image_V_ce0 : OUT STD_LOGIC;
    in_image_V_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    out_image_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_image_V_ce0 : OUT STD_LOGIC;
    out_image_V_we0 : OUT STD_LOGIC;
    out_image_V_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    out_image_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_image_V_ce1 : OUT STD_LOGIC;
    out_image_V_we1 : OUT STD_LOGIC;
    out_image_V_d1 : OUT STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of pad_for_conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_F : STD_LOGIC_VECTOR (8 downto 0) := "000001111";
    constant ap_const_lv55_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_3_fu_156_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_291 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_31_fu_167_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_31_reg_296 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_215_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_38_fu_245_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_reg_310 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_257_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_26_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_image_V_load_reg_329 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_reg_116 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_reg_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_139 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_s_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_200_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_180_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_cast1_fu_186_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_195_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_36_fu_221_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_233_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_229_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_241_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_cast_fu_263_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_fu_267_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_fu_277_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_24_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_128 <= ap_const_lv4_0;
            elsif (((tmp_26_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_128 <= i_4_reg_304;
            end if; 
        end if;
    end process;

    i_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_116 <= i_3_reg_291;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_116 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_139 <= j_4_reg_318;
            elsif (((tmp_24_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_139 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_291 <= i_3_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_4_reg_304 <= i_4_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_image_V_load_reg_329 <= in_image_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_4_reg_318 <= j_4_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_31_reg_296(8 downto 4) <= tmp_31_fu_167_p3(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_24_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_38_reg_310(8 downto 1) <= tmp_38_fu_245_p2(8 downto 1);
            end if;
        end if;
    end process;
    tmp_31_reg_296(3 downto 0) <= "0000";
    tmp_38_reg_310(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_150_p2, ap_CS_fsm_state4, tmp_24_fu_209_p2, ap_CS_fsm_state5, tmp_26_fu_251_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((tmp_24_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_26_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, tmp_24_fu_209_p2)
    begin
        if (((tmp_24_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, tmp_24_fu_209_p2)
    begin
        if (((tmp_24_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_156_p2 <= std_logic_vector(unsigned(i_reg_116) + unsigned(ap_const_lv5_1));
    i_4_fu_215_p2 <= std_logic_vector(unsigned(i_1_reg_128) + unsigned(ap_const_lv4_1));
    in_image_V_address0 <= tmp_43_cast_fu_272_p1(8 - 1 downto 0);

    in_image_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_image_V_ce0 <= ap_const_logic_1;
        else 
            in_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_4_fu_257_p2 <= std_logic_vector(unsigned(j_reg_139) + unsigned(ap_const_lv4_1));

    out_image_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, tmp_s_fu_162_p1, tmp_35_cast_fu_190_p1, tmp_40_fu_283_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_image_V_address0 <= tmp_40_fu_283_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_image_V_address0 <= tmp_35_cast_fu_190_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_image_V_address0 <= tmp_s_fu_162_p1(8 - 1 downto 0);
        else 
            out_image_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_image_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_32_fu_175_p1, tmp_35_fu_200_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_image_V_address1 <= tmp_35_fu_200_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_image_V_address1 <= tmp_32_fu_175_p1(8 - 1 downto 0);
        else 
            out_image_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    out_image_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_image_V_ce0 <= ap_const_logic_1;
        else 
            out_image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_image_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_image_V_ce1 <= ap_const_logic_1;
        else 
            out_image_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_image_V_d0_assign_proc : process(ap_CS_fsm_state2, in_image_V_load_reg_329, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_image_V_d0 <= in_image_V_load_reg_329;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_image_V_d0 <= ap_const_lv25_0;
        else 
            out_image_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    out_image_V_d1 <= ap_const_lv25_0;

    out_image_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_fu_150_p2, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_image_V_we0 <= ap_const_logic_1;
        else 
            out_image_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_image_V_we1_assign_proc : process(ap_CS_fsm_state2, tmp_fu_150_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_image_V_we1 <= ap_const_logic_1;
        else 
            out_image_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_233_p3),9));
    p_shl_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_221_p3),9));
    tmp_24_fu_209_p2 <= "1" when (i_1_reg_128 = ap_const_lv4_E) else "0";
    tmp_26_fu_251_p2 <= "1" when (j_reg_139 = ap_const_lv4_E) else "0";
    tmp_27_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_139),9));
    tmp_31_fu_167_p3 <= (i_reg_116 & ap_const_lv4_0);
    tmp_32_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_167_p3),64));
    tmp_33_fu_180_p2 <= (i_reg_116 xor ap_const_lv5_10);
    tmp_34_fu_195_p2 <= (tmp_31_reg_296 or ap_const_lv9_F);
        tmp_35_cast1_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_fu_180_p2),8));

    tmp_35_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_cast1_fu_186_p1),64));
    tmp_35_fu_200_p3 <= (ap_const_lv55_0 & tmp_34_fu_195_p2);
    tmp_36_fu_221_p3 <= (i_1_reg_128 & ap_const_lv4_0);
    tmp_37_fu_233_p3 <= (i_1_reg_128 & ap_const_lv1_0);
    tmp_38_fu_245_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_229_p1) - unsigned(p_shl1_cast_fu_241_p1));
    tmp_39_fu_277_p3 <= (i_4_reg_304 & j_4_reg_318);
    tmp_40_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_277_p3),64));
    tmp_41_fu_267_p2 <= std_logic_vector(unsigned(tmp_38_reg_310) + unsigned(tmp_27_cast_fu_263_p1));
        tmp_43_cast_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_41_fu_267_p2),64));

    tmp_fu_150_p2 <= "1" when (i_reg_116 = ap_const_lv5_10) else "0";
    tmp_s_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_116),64));
end behav;
