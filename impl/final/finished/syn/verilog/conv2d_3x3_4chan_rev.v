// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2d_3x3_4chan_rev (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_image_0_V_address0,
        in_image_0_V_ce0,
        in_image_0_V_q0,
        in_image_0_V_address1,
        in_image_0_V_ce1,
        in_image_0_V_q1,
        in_image_1_V_address0,
        in_image_1_V_ce0,
        in_image_1_V_q0,
        in_image_1_V_address1,
        in_image_1_V_ce1,
        in_image_1_V_q1,
        in_image_2_V_address0,
        in_image_2_V_ce0,
        in_image_2_V_q0,
        in_image_2_V_address1,
        in_image_2_V_ce1,
        in_image_2_V_q1,
        kernel_0_V_address0,
        kernel_0_V_ce0,
        kernel_0_V_q0,
        kernel_1_V_address0,
        kernel_1_V_ce0,
        kernel_1_V_q0,
        kernel_2_V_address0,
        kernel_2_V_ce0,
        kernel_2_V_q0,
        kernel_3_V_address0,
        kernel_3_V_ce0,
        kernel_3_V_q0,
        kernel_4_V_address0,
        kernel_4_V_ce0,
        kernel_4_V_q0,
        kernel_5_V_address0,
        kernel_5_V_ce0,
        kernel_5_V_q0,
        kernel_6_V_address0,
        kernel_6_V_ce0,
        kernel_6_V_q0,
        kernel_7_V_address0,
        kernel_7_V_ce0,
        kernel_7_V_q0,
        kernel_8_V_address0,
        kernel_8_V_ce0,
        kernel_8_V_q0,
        bias_0_V,
        bias_1_V,
        bias_2_V,
        bias_3_V,
        out_image_0_V_address0,
        out_image_0_V_ce0,
        out_image_0_V_we0,
        out_image_0_V_d0,
        out_image_1_V_address0,
        out_image_1_V_ce0,
        out_image_1_V_we0,
        out_image_1_V_d0,
        out_image_2_V_address0,
        out_image_2_V_ce0,
        out_image_2_V_we0,
        out_image_2_V_d0,
        out_image_3_V_address0,
        out_image_3_V_ce0,
        out_image_3_V_we0,
        out_image_3_V_d0,
        out_image_4_V_address0,
        out_image_4_V_ce0,
        out_image_4_V_we0,
        out_image_4_V_d0,
        out_image_5_V_address0,
        out_image_5_V_ce0,
        out_image_5_V_we0,
        out_image_5_V_d0,
        out_image_6_V_address0,
        out_image_6_V_ce0,
        out_image_6_V_we0,
        out_image_6_V_d0,
        out_image_7_V_address0,
        out_image_7_V_ce0,
        out_image_7_V_we0,
        out_image_7_V_d0,
        out_image_8_V_address0,
        out_image_8_V_ce0,
        out_image_8_V_we0,
        out_image_8_V_d0,
        out_image_9_V_address0,
        out_image_9_V_ce0,
        out_image_9_V_we0,
        out_image_9_V_d0,
        out_image_10_V_address0,
        out_image_10_V_ce0,
        out_image_10_V_we0,
        out_image_10_V_d0,
        out_image_11_V_address0,
        out_image_11_V_ce0,
        out_image_11_V_we0,
        out_image_11_V_d0,
        out_image_12_V_address0,
        out_image_12_V_ce0,
        out_image_12_V_we0,
        out_image_12_V_d0,
        out_image_13_V_address0,
        out_image_13_V_ce0,
        out_image_13_V_we0,
        out_image_13_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_pp0_stage1 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] in_image_0_V_address0;
output   in_image_0_V_ce0;
input  [24:0] in_image_0_V_q0;
output  [9:0] in_image_0_V_address1;
output   in_image_0_V_ce1;
input  [24:0] in_image_0_V_q1;
output  [9:0] in_image_1_V_address0;
output   in_image_1_V_ce0;
input  [24:0] in_image_1_V_q0;
output  [9:0] in_image_1_V_address1;
output   in_image_1_V_ce1;
input  [24:0] in_image_1_V_q1;
output  [9:0] in_image_2_V_address0;
output   in_image_2_V_ce0;
input  [24:0] in_image_2_V_q0;
output  [9:0] in_image_2_V_address1;
output   in_image_2_V_ce1;
input  [24:0] in_image_2_V_q1;
output  [1:0] kernel_0_V_address0;
output   kernel_0_V_ce0;
input  [17:0] kernel_0_V_q0;
output  [1:0] kernel_1_V_address0;
output   kernel_1_V_ce0;
input  [17:0] kernel_1_V_q0;
output  [1:0] kernel_2_V_address0;
output   kernel_2_V_ce0;
input  [17:0] kernel_2_V_q0;
output  [1:0] kernel_3_V_address0;
output   kernel_3_V_ce0;
input  [17:0] kernel_3_V_q0;
output  [1:0] kernel_4_V_address0;
output   kernel_4_V_ce0;
input  [17:0] kernel_4_V_q0;
output  [1:0] kernel_5_V_address0;
output   kernel_5_V_ce0;
input  [17:0] kernel_5_V_q0;
output  [1:0] kernel_6_V_address0;
output   kernel_6_V_ce0;
input  [17:0] kernel_6_V_q0;
output  [1:0] kernel_7_V_address0;
output   kernel_7_V_ce0;
input  [17:0] kernel_7_V_q0;
output  [1:0] kernel_8_V_address0;
output   kernel_8_V_ce0;
input  [17:0] kernel_8_V_q0;
input  [47:0] bias_0_V;
input  [47:0] bias_1_V;
input  [47:0] bias_2_V;
input  [47:0] bias_3_V;
output  [5:0] out_image_0_V_address0;
output   out_image_0_V_ce0;
output   out_image_0_V_we0;
output  [47:0] out_image_0_V_d0;
output  [5:0] out_image_1_V_address0;
output   out_image_1_V_ce0;
output   out_image_1_V_we0;
output  [47:0] out_image_1_V_d0;
output  [5:0] out_image_2_V_address0;
output   out_image_2_V_ce0;
output   out_image_2_V_we0;
output  [47:0] out_image_2_V_d0;
output  [5:0] out_image_3_V_address0;
output   out_image_3_V_ce0;
output   out_image_3_V_we0;
output  [47:0] out_image_3_V_d0;
output  [5:0] out_image_4_V_address0;
output   out_image_4_V_ce0;
output   out_image_4_V_we0;
output  [47:0] out_image_4_V_d0;
output  [5:0] out_image_5_V_address0;
output   out_image_5_V_ce0;
output   out_image_5_V_we0;
output  [47:0] out_image_5_V_d0;
output  [5:0] out_image_6_V_address0;
output   out_image_6_V_ce0;
output   out_image_6_V_we0;
output  [47:0] out_image_6_V_d0;
output  [5:0] out_image_7_V_address0;
output   out_image_7_V_ce0;
output   out_image_7_V_we0;
output  [47:0] out_image_7_V_d0;
output  [5:0] out_image_8_V_address0;
output   out_image_8_V_ce0;
output   out_image_8_V_we0;
output  [47:0] out_image_8_V_d0;
output  [5:0] out_image_9_V_address0;
output   out_image_9_V_ce0;
output   out_image_9_V_we0;
output  [47:0] out_image_9_V_d0;
output  [5:0] out_image_10_V_address0;
output   out_image_10_V_ce0;
output   out_image_10_V_we0;
output  [47:0] out_image_10_V_d0;
output  [5:0] out_image_11_V_address0;
output   out_image_11_V_ce0;
output   out_image_11_V_we0;
output  [47:0] out_image_11_V_d0;
output  [5:0] out_image_12_V_address0;
output   out_image_12_V_ce0;
output   out_image_12_V_we0;
output  [47:0] out_image_12_V_d0;
output  [5:0] out_image_13_V_address0;
output   out_image_13_V_ce0;
output   out_image_13_V_we0;
output  [47:0] out_image_13_V_d0;

reg ap_done;
reg ap_idle;
reg[9:0] in_image_0_V_address0;
reg in_image_0_V_ce0;
reg in_image_0_V_ce1;
reg[9:0] in_image_1_V_address0;
reg in_image_1_V_ce0;
reg in_image_1_V_ce1;
reg[9:0] in_image_2_V_address0;
reg in_image_2_V_ce0;
reg in_image_2_V_ce1;
reg kernel_0_V_ce0;
reg kernel_1_V_ce0;
reg kernel_2_V_ce0;
reg kernel_3_V_ce0;
reg kernel_4_V_ce0;
reg kernel_5_V_ce0;
reg kernel_6_V_ce0;
reg kernel_7_V_ce0;
reg kernel_8_V_ce0;
reg out_image_0_V_ce0;
reg out_image_0_V_we0;
reg out_image_1_V_ce0;
reg out_image_1_V_we0;
reg out_image_2_V_ce0;
reg out_image_2_V_we0;
reg out_image_3_V_ce0;
reg out_image_3_V_we0;
reg out_image_4_V_ce0;
reg out_image_4_V_we0;
reg out_image_5_V_ce0;
reg out_image_5_V_we0;
reg out_image_6_V_ce0;
reg out_image_6_V_we0;
reg out_image_7_V_ce0;
reg out_image_7_V_we0;
reg out_image_8_V_ce0;
reg out_image_8_V_we0;
reg out_image_9_V_ce0;
reg out_image_9_V_we0;
reg out_image_10_V_ce0;
reg out_image_10_V_we0;
reg out_image_11_V_ce0;
reg out_image_11_V_we0;
reg out_image_12_V_ce0;
reg out_image_12_V_we0;
reg out_image_13_V_ce0;
reg out_image_13_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [0:0] exitcond_flatten_reg_1343;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_22_reg_578;
reg   [31:0] x_reg_593;
reg   [8:0] i_reg_607;
reg   [2:0] k_reg_621;
reg   [31:0] y_reg_635;
reg   [9:0] indvar_flatten_reg_649;
reg  signed [24:0] reg_663;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
reg  signed [24:0] reg_667;
reg  signed [24:0] reg_671;
wire   [8:0] i_mid2_fu_681_p3;
reg   [8:0] i_mid2_reg_1132;
wire   [31:0] x_mid2_fu_689_p3;
reg   [31:0] x_mid2_reg_1137;
wire   [2:0] k_mid2_fu_697_p3;
reg   [2:0] k_mid2_reg_1143;
wire   [63:0] tmp_19_fu_705_p1;
reg   [63:0] tmp_19_reg_1150;
wire   [63:0] tmp_20_fu_714_p1;
reg   [63:0] tmp_20_reg_1158;
wire   [63:0] tmp_6_cast_fu_743_p1;
reg   [63:0] tmp_6_cast_reg_1173;
wire   [1:0] tmp_9_fu_748_p1;
reg   [1:0] tmp_9_reg_1224;
wire   [3:0] tmp_10_fu_752_p1;
reg   [3:0] tmp_10_reg_1229;
reg   [3:0] tmp_10_reg_1229_pp0_iter1_reg;
reg   [3:0] tmp_10_reg_1229_pp0_iter2_reg;
reg   [3:0] tmp_10_reg_1229_pp0_iter3_reg;
reg  signed [17:0] kernel_0_V_load_reg_1248;
reg  signed [24:0] in_image_0_V_load_2_reg_1258;
reg  signed [17:0] kernel_4_V_load_reg_1273;
reg  signed [17:0] kernel_5_V_load_reg_1278;
reg  signed [24:0] in_image_1_V_load_3_reg_1283;
reg  signed [17:0] kernel_6_V_load_reg_1288;
reg  signed [17:0] kernel_7_V_load_reg_1293;
reg  signed [24:0] in_image_2_V_load_2_reg_1298;
wire   [6:0] tmp_8_fu_764_p1;
reg   [6:0] tmp_8_reg_1308;
wire   [47:0] tmp_12_fu_768_p6;
reg   [47:0] tmp_12_reg_1313;
reg   [47:0] tmp_12_reg_1313_pp0_iter1_reg;
reg   [47:0] tmp_12_reg_1313_pp0_iter2_reg;
wire   [9:0] indvar_flatten_next_fu_781_p2;
reg   [9:0] indvar_flatten_next_reg_1318;
wire   [31:0] p_x_1_8_fu_804_p3;
reg   [31:0] p_x_1_8_reg_1323;
wire   [31:0] p_8_fu_811_p3;
reg   [31:0] p_8_reg_1328;
wire   [8:0] i_5_fu_819_p2;
reg   [8:0] i_5_reg_1333;
wire   [0:0] tmp_s_fu_824_p2;
reg   [0:0] tmp_s_reg_1338;
wire   [0:0] exitcond_flatten_fu_830_p2;
reg   [0:0] exitcond_flatten_reg_1343_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_1343_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_1343_pp0_iter3_reg;
reg  signed [17:0] kernel_1_V_load_reg_1357;
reg  signed [17:0] kernel_2_V_load_reg_1362;
reg  signed [17:0] kernel_3_V_load_reg_1367;
reg  signed [17:0] kernel_8_V_load_reg_1412;
wire   [6:0] tmp_7_fu_893_p2;
reg   [6:0] tmp_7_reg_1417;
reg   [6:0] tmp_7_reg_1417_pp0_iter2_reg;
reg   [6:0] tmp_7_reg_1417_pp0_iter3_reg;
wire  signed [40:0] grp_fu_1078_p2;
reg  signed [40:0] p_Val2_9_reg_1422;
wire  signed [40:0] grp_fu_1084_p2;
reg  signed [40:0] p_Val2_9_4_reg_1457;
reg  signed [40:0] p_Val2_9_4_reg_1457_pp0_iter2_reg;
wire  signed [40:0] grp_fu_1090_p2;
reg  signed [40:0] p_Val2_9_5_reg_1462;
reg  signed [40:0] p_Val2_9_5_reg_1462_pp0_iter2_reg;
wire  signed [40:0] grp_fu_1096_p2;
reg  signed [40:0] p_Val2_9_6_reg_1467;
wire  signed [40:0] grp_fu_1102_p2;
reg  signed [40:0] p_Val2_9_7_reg_1472;
wire  signed [40:0] grp_fu_1108_p2;
reg  signed [40:0] p_Val2_9_1_reg_1487;
wire  signed [40:0] grp_fu_1114_p2;
reg  signed [40:0] p_Val2_9_2_reg_1492;
wire  signed [40:0] grp_fu_1120_p2;
reg  signed [40:0] p_Val2_9_3_reg_1497;
wire  signed [40:0] grp_fu_1126_p2;
reg  signed [40:0] p_Val2_9_8_reg_1502;
wire   [47:0] tmp2_fu_974_p2;
reg   [47:0] tmp2_reg_1507;
wire   [47:0] tmp3_fu_980_p2;
reg   [47:0] tmp3_reg_1512;
wire   [47:0] tmp6_fu_992_p2;
reg   [47:0] tmp6_reg_1517;
wire   [47:0] tmp4_fu_1018_p2;
reg   [47:0] tmp4_reg_1522;
reg   [47:0] tmp_78_8_reg_1527;
reg    rewind_ap_ready;
reg    rewind_ap_ready_reg;
reg    rewind_enable;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_state1;
reg   [0:0] ap_phi_mux_tmp_22_phi_fu_582_p6;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_x_phi_fu_597_p6;
reg   [8:0] ap_phi_mux_i_phi_fu_611_p6;
reg   [2:0] ap_phi_mux_k_phi_fu_625_p6;
reg   [31:0] ap_phi_mux_y_phi_fu_639_p6;
wire    ap_block_pp0_stage1;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_653_p6;
wire   [63:0] tmp_5_cast_fu_730_p1;
wire  signed [63:0] tmp_7_cast_fu_1059_p1;
wire   [2:0] k_2_fu_675_p2;
wire   [9:0] tmp_20_cast_fu_720_p1;
wire   [9:0] tmp_5_fu_724_p2;
wire   [9:0] tmp_6_fu_737_p2;
wire   [31:0] y_mid2_fu_756_p3;
wire   [31:0] y_4_8_fu_787_p2;
wire   [0:0] tmp_79_8_fu_793_p2;
wire   [31:0] x_4_8_fu_799_p2;
wire   [3:0] tmp_3_fu_843_p3;
wire   [6:0] tmp_fu_836_p3;
wire   [6:0] p_shl1_cast_fu_850_p1;
wire   [6:0] tmp_4_fu_854_p2;
wire   [47:0] tmp_21_fu_925_p3;
wire   [47:0] tmp_70_1_fu_932_p3;
wire   [47:0] tmp_70_2_fu_939_p3;
wire   [47:0] tmp_70_3_fu_946_p3;
wire   [47:0] tmp_70_7_fu_960_p3;
wire   [47:0] tmp_70_8_fu_967_p3;
wire   [47:0] tmp7_fu_986_p2;
wire   [47:0] tmp_70_6_fu_953_p3;
wire   [47:0] tmp_70_4_fu_998_p3;
wire   [47:0] tmp_70_5_fu_1005_p3;
wire   [47:0] tmp5_fu_1012_p2;
wire   [47:0] tmp1_fu_1023_p2;
wire   [47:0] p_Val2_10_8_fu_1027_p2;
wire   [49:0] tmp_75_8_fu_1032_p3;
wire  signed [49:0] tmp_76_8_cast_fu_1040_p1;
wire   [49:0] p_Val2_13_8_fu_1043_p2;
reg    grp_fu_1078_ce;
reg    grp_fu_1084_ce;
reg    grp_fu_1090_ce;
reg    grp_fu_1096_ce;
reg    grp_fu_1102_ce;
reg    grp_fu_1108_ce;
reg    grp_fu_1114_ce;
reg    grp_fu_1120_ce;
reg    grp_fu_1126_ce;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_467;
reg    ap_condition_483;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 rewind_ap_ready_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

CNN_mux_42_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 48 ),
    .din1_WIDTH( 48 ),
    .din2_WIDTH( 48 ),
    .din3_WIDTH( 48 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 48 ))
CNN_mux_42_48_1_1_U457(
    .din0(bias_0_V),
    .din1(bias_1_V),
    .din2(bias_2_V),
    .din3(bias_3_V),
    .din4(tmp_9_reg_1224),
    .dout(tmp_12_fu_768_p6)
);

CNN_mul_mul_25s_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_25s_1eOg_U458(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_663),
    .din1(kernel_0_V_load_reg_1248),
    .ce(grp_fu_1078_ce),
    .dout(grp_fu_1078_p2)
);

CNN_mul_mul_25s_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_25s_1eOg_U459(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_667),
    .din1(kernel_4_V_load_reg_1273),
    .ce(grp_fu_1084_ce),
    .dout(grp_fu_1084_p2)
);

CNN_mul_mul_25s_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_25s_1eOg_U460(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_image_1_V_load_3_reg_1283),
    .din1(kernel_5_V_load_reg_1278),
    .ce(grp_fu_1090_ce),
    .dout(grp_fu_1090_p2)
);

CNN_mul_mul_25s_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_25s_1eOg_U461(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_671),
    .din1(kernel_6_V_load_reg_1288),
    .ce(grp_fu_1096_ce),
    .dout(grp_fu_1096_p2)
);

CNN_mul_mul_25s_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_25s_1eOg_U462(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_image_2_V_load_2_reg_1298),
    .din1(kernel_7_V_load_reg_1293),
    .ce(grp_fu_1102_ce),
    .dout(grp_fu_1102_p2)
);

CNN_mul_mul_25s_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_25s_1eOg_U463(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_image_0_V_load_2_reg_1258),
    .din1(kernel_1_V_load_reg_1357),
    .ce(grp_fu_1108_ce),
    .dout(grp_fu_1108_p2)
);

CNN_mul_mul_25s_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_25s_1eOg_U464(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_663),
    .din1(kernel_2_V_load_reg_1362),
    .ce(grp_fu_1114_ce),
    .dout(grp_fu_1114_p2)
);

CNN_mul_mul_25s_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_25s_1eOg_U465(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_667),
    .din1(kernel_3_V_load_reg_1367),
    .ce(grp_fu_1120_ce),
    .dout(grp_fu_1120_p2)
);

CNN_mul_mul_25s_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 41 ))
CNN_mul_mul_25s_1eOg_U466(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_671),
    .din1(kernel_8_V_load_reg_1412),
    .ce(grp_fu_1126_ce),
    .dout(grp_fu_1126_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= rewind_enable;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rewind_ap_ready_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (ap_start == 1'b1))) begin
            rewind_ap_ready_reg <= rewind_ap_ready;
        end else begin
            rewind_ap_ready_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_607 <= i_5_reg_1333;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_reg_607 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1343 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten_reg_649 <= indvar_flatten_next_reg_1318;
    end else if ((((exitcond_flatten_reg_1343 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten_reg_649 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_621 <= k_mid2_reg_1143;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        k_reg_621 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_22_reg_578 <= tmp_s_reg_1338;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        tmp_22_reg_578 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_reg_593 <= p_x_1_8_reg_1323;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_reg_593 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1343 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        y_reg_635 <= p_8_reg_1328;
    end else if ((((exitcond_flatten_reg_1343 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        y_reg_635 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exitcond_flatten_reg_1343 <= exitcond_flatten_fu_830_p2;
        exitcond_flatten_reg_1343_pp0_iter1_reg <= exitcond_flatten_reg_1343;
        exitcond_flatten_reg_1343_pp0_iter2_reg <= exitcond_flatten_reg_1343_pp0_iter1_reg;
        exitcond_flatten_reg_1343_pp0_iter3_reg <= exitcond_flatten_reg_1343_pp0_iter2_reg;
        kernel_0_V_load_reg_1248 <= kernel_0_V_q0;
        kernel_4_V_load_reg_1273 <= kernel_4_V_q0;
        kernel_5_V_load_reg_1278 <= kernel_5_V_q0;
        kernel_6_V_load_reg_1288 <= kernel_6_V_q0;
        kernel_7_V_load_reg_1293 <= kernel_7_V_q0;
        p_Val2_9_4_reg_1457 <= grp_fu_1084_p2;
        p_Val2_9_4_reg_1457_pp0_iter2_reg <= p_Val2_9_4_reg_1457;
        p_Val2_9_5_reg_1462 <= grp_fu_1090_p2;
        p_Val2_9_5_reg_1462_pp0_iter2_reg <= p_Val2_9_5_reg_1462;
        p_Val2_9_6_reg_1467 <= grp_fu_1096_p2;
        p_Val2_9_7_reg_1472 <= grp_fu_1102_p2;
        p_Val2_9_reg_1422 <= grp_fu_1078_p2;
        tmp2_reg_1507[47 : 7] <= tmp2_fu_974_p2[47 : 7];
        tmp3_reg_1512[47 : 7] <= tmp3_fu_980_p2[47 : 7];
        tmp6_reg_1517[47 : 7] <= tmp6_fu_992_p2[47 : 7];
        tmp_12_reg_1313 <= tmp_12_fu_768_p6;
        tmp_12_reg_1313_pp0_iter1_reg <= tmp_12_reg_1313;
        tmp_12_reg_1313_pp0_iter2_reg <= tmp_12_reg_1313_pp0_iter1_reg;
        tmp_78_8_reg_1527 <= {{p_Val2_13_8_fu_1043_p2[49:2]}};
        tmp_8_reg_1308 <= tmp_8_fu_764_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_5_reg_1333 <= i_5_fu_819_p2;
        in_image_0_V_load_2_reg_1258 <= in_image_0_V_q1;
        in_image_1_V_load_3_reg_1283 <= in_image_1_V_q1;
        in_image_2_V_load_2_reg_1298 <= in_image_2_V_q1;
        indvar_flatten_next_reg_1318 <= indvar_flatten_next_fu_781_p2;
        p_8_reg_1328 <= p_8_fu_811_p3;
        p_x_1_8_reg_1323 <= p_x_1_8_fu_804_p3;
        tmp_s_reg_1338 <= tmp_s_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_mid2_reg_1132 <= i_mid2_fu_681_p3;
        kernel_1_V_load_reg_1357 <= kernel_1_V_q0;
        kernel_2_V_load_reg_1362 <= kernel_2_V_q0;
        kernel_3_V_load_reg_1367 <= kernel_3_V_q0;
        kernel_8_V_load_reg_1412 <= kernel_8_V_q0;
        p_Val2_9_1_reg_1487 <= grp_fu_1108_p2;
        p_Val2_9_2_reg_1492 <= grp_fu_1114_p2;
        p_Val2_9_3_reg_1497 <= grp_fu_1120_p2;
        p_Val2_9_8_reg_1502 <= grp_fu_1126_p2;
        tmp4_reg_1522[47 : 7] <= tmp4_fu_1018_p2[47 : 7];
        tmp_10_reg_1229 <= tmp_10_fu_752_p1;
        tmp_10_reg_1229_pp0_iter1_reg <= tmp_10_reg_1229;
        tmp_10_reg_1229_pp0_iter2_reg <= tmp_10_reg_1229_pp0_iter1_reg;
        tmp_10_reg_1229_pp0_iter3_reg <= tmp_10_reg_1229_pp0_iter2_reg;
        tmp_19_reg_1150[2 : 0] <= tmp_19_fu_705_p1[2 : 0];
        tmp_20_reg_1158[8 : 0] <= tmp_20_fu_714_p1[8 : 0];
        tmp_6_cast_reg_1173[9 : 0] <= tmp_6_cast_fu_743_p1[9 : 0];
        tmp_7_reg_1417 <= tmp_7_fu_893_p2;
        tmp_7_reg_1417_pp0_iter2_reg <= tmp_7_reg_1417;
        tmp_7_reg_1417_pp0_iter3_reg <= tmp_7_reg_1417_pp0_iter2_reg;
        tmp_9_reg_1224 <= tmp_9_fu_748_p1;
        x_mid2_reg_1137 <= x_mid2_fu_689_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        k_mid2_reg_1143 <= k_mid2_fu_697_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_663 <= in_image_0_V_q0;
        reg_667 <= in_image_1_V_q0;
        reg_671 <= in_image_2_V_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = rewind_enable;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_467)) begin
        if ((exitcond_flatten_reg_1343 == 1'd1)) begin
            ap_phi_mux_i_phi_fu_611_p6 = 9'd0;
        end else if ((exitcond_flatten_reg_1343 == 1'd0)) begin
            ap_phi_mux_i_phi_fu_611_p6 = i_5_reg_1333;
        end else begin
            ap_phi_mux_i_phi_fu_611_p6 = i_reg_607;
        end
    end else begin
        ap_phi_mux_i_phi_fu_611_p6 = i_reg_607;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_483)) begin
        if ((exitcond_flatten_reg_1343 == 1'd1)) begin
            ap_phi_mux_indvar_flatten_phi_fu_653_p6 = 10'd0;
        end else if ((exitcond_flatten_reg_1343 == 1'd0)) begin
            ap_phi_mux_indvar_flatten_phi_fu_653_p6 = indvar_flatten_next_reg_1318;
        end else begin
            ap_phi_mux_indvar_flatten_phi_fu_653_p6 = indvar_flatten_reg_649;
        end
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_653_p6 = indvar_flatten_reg_649;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_467)) begin
        if ((exitcond_flatten_reg_1343 == 1'd1)) begin
            ap_phi_mux_k_phi_fu_625_p6 = 3'd0;
        end else if ((exitcond_flatten_reg_1343 == 1'd0)) begin
            ap_phi_mux_k_phi_fu_625_p6 = k_mid2_reg_1143;
        end else begin
            ap_phi_mux_k_phi_fu_625_p6 = k_reg_621;
        end
    end else begin
        ap_phi_mux_k_phi_fu_625_p6 = k_reg_621;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_467)) begin
        if ((exitcond_flatten_reg_1343 == 1'd1)) begin
            ap_phi_mux_tmp_22_phi_fu_582_p6 = 1'd0;
        end else if ((exitcond_flatten_reg_1343 == 1'd0)) begin
            ap_phi_mux_tmp_22_phi_fu_582_p6 = tmp_s_reg_1338;
        end else begin
            ap_phi_mux_tmp_22_phi_fu_582_p6 = tmp_22_reg_578;
        end
    end else begin
        ap_phi_mux_tmp_22_phi_fu_582_p6 = tmp_22_reg_578;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_467)) begin
        if ((exitcond_flatten_reg_1343 == 1'd1)) begin
            ap_phi_mux_x_phi_fu_597_p6 = 32'd0;
        end else if ((exitcond_flatten_reg_1343 == 1'd0)) begin
            ap_phi_mux_x_phi_fu_597_p6 = p_x_1_8_reg_1323;
        end else begin
            ap_phi_mux_x_phi_fu_597_p6 = x_reg_593;
        end
    end else begin
        ap_phi_mux_x_phi_fu_597_p6 = x_reg_593;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_483)) begin
        if ((exitcond_flatten_reg_1343 == 1'd1)) begin
            ap_phi_mux_y_phi_fu_639_p6 = 32'd0;
        end else if ((exitcond_flatten_reg_1343 == 1'd0)) begin
            ap_phi_mux_y_phi_fu_639_p6 = p_8_reg_1328;
        end else begin
            ap_phi_mux_y_phi_fu_639_p6 = y_reg_635;
        end
    end else begin
        ap_phi_mux_y_phi_fu_639_p6 = y_reg_635;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1078_ce = 1'b1;
    end else begin
        grp_fu_1078_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1084_ce = 1'b1;
    end else begin
        grp_fu_1084_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1090_ce = 1'b1;
    end else begin
        grp_fu_1090_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1096_ce = 1'b1;
    end else begin
        grp_fu_1096_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1102_ce = 1'b1;
    end else begin
        grp_fu_1102_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1108_ce = 1'b1;
    end else begin
        grp_fu_1108_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1114_ce = 1'b1;
    end else begin
        grp_fu_1114_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1120_ce = 1'b1;
    end else begin
        grp_fu_1120_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_1126_ce = 1'b1;
    end else begin
        grp_fu_1126_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            in_image_0_V_address0 = tmp_6_cast_reg_1173;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            in_image_0_V_address0 = tmp_20_fu_714_p1;
        end else begin
            in_image_0_V_address0 = 'bx;
        end
    end else begin
        in_image_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        in_image_0_V_ce0 = 1'b1;
    end else begin
        in_image_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        in_image_0_V_ce1 = 1'b1;
    end else begin
        in_image_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            in_image_1_V_address0 = tmp_20_reg_1158;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            in_image_1_V_address0 = tmp_5_cast_fu_730_p1;
        end else begin
            in_image_1_V_address0 = 'bx;
        end
    end else begin
        in_image_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        in_image_1_V_ce0 = 1'b1;
    end else begin
        in_image_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        in_image_1_V_ce1 = 1'b1;
    end else begin
        in_image_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            in_image_2_V_address0 = tmp_6_cast_reg_1173;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            in_image_2_V_address0 = tmp_20_fu_714_p1;
        end else begin
            in_image_2_V_address0 = 'bx;
        end
    end else begin
        in_image_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        in_image_2_V_ce0 = 1'b1;
    end else begin
        in_image_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        in_image_2_V_ce1 = 1'b1;
    end else begin
        in_image_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1343 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_0_V_ce0 = 1'b1;
    end else begin
        kernel_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_1_V_ce0 = 1'b1;
    end else begin
        kernel_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_2_V_ce0 = 1'b1;
    end else begin
        kernel_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_3_V_ce0 = 1'b1;
    end else begin
        kernel_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_4_V_ce0 = 1'b1;
    end else begin
        kernel_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_5_V_ce0 = 1'b1;
    end else begin
        kernel_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_6_V_ce0 = 1'b1;
    end else begin
        kernel_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_7_V_ce0 = 1'b1;
    end else begin
        kernel_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_8_V_ce0 = 1'b1;
    end else begin
        kernel_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_0_V_ce0 = 1'b1;
    end else begin
        out_image_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_0_V_we0 = 1'b1;
    end else begin
        out_image_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_10_V_ce0 = 1'b1;
    end else begin
        out_image_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd10) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_10_V_we0 = 1'b1;
    end else begin
        out_image_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_11_V_ce0 = 1'b1;
    end else begin
        out_image_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd11) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_11_V_we0 = 1'b1;
    end else begin
        out_image_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_12_V_ce0 = 1'b1;
    end else begin
        out_image_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd12) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_12_V_we0 = 1'b1;
    end else begin
        out_image_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_13_V_ce0 = 1'b1;
    end else begin
        out_image_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_10_reg_1229_pp0_iter3_reg == 4'd15) | (tmp_10_reg_1229_pp0_iter3_reg == 4'd14) | (tmp_10_reg_1229_pp0_iter3_reg == 4'd13)))) begin
        out_image_13_V_we0 = 1'b1;
    end else begin
        out_image_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_1_V_ce0 = 1'b1;
    end else begin
        out_image_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_1_V_we0 = 1'b1;
    end else begin
        out_image_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_2_V_ce0 = 1'b1;
    end else begin
        out_image_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd2) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_2_V_we0 = 1'b1;
    end else begin
        out_image_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_3_V_ce0 = 1'b1;
    end else begin
        out_image_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd3) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_3_V_we0 = 1'b1;
    end else begin
        out_image_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_4_V_ce0 = 1'b1;
    end else begin
        out_image_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd4) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_4_V_we0 = 1'b1;
    end else begin
        out_image_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_5_V_ce0 = 1'b1;
    end else begin
        out_image_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd5) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_5_V_we0 = 1'b1;
    end else begin
        out_image_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_6_V_ce0 = 1'b1;
    end else begin
        out_image_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd6) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_6_V_we0 = 1'b1;
    end else begin
        out_image_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_7_V_ce0 = 1'b1;
    end else begin
        out_image_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd7) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_7_V_we0 = 1'b1;
    end else begin
        out_image_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_8_V_ce0 = 1'b1;
    end else begin
        out_image_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd8) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_8_V_we0 = 1'b1;
    end else begin
        out_image_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_9_V_ce0 = 1'b1;
    end else begin
        out_image_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1229_pp0_iter3_reg == 4'd9) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_image_9_V_we0 = 1'b1;
    end else begin
        out_image_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((rewind_ap_ready_reg == 1'b1) | ((exitcond_flatten_fu_830_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        rewind_ap_ready = 1'b1;
    end else begin
        rewind_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((rewind_ap_ready_reg == 1'b0) & (ap_start == 1'b1))) begin
        rewind_enable = 1'b1;
    end else begin
        rewind_enable = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_467 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_483 = ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_830_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_653_p6 == 10'd1023) ? 1'b1 : 1'b0);

assign i_5_fu_819_p2 = (i_mid2_reg_1132 + 9'd1);

assign i_mid2_fu_681_p3 = ((ap_phi_mux_tmp_22_phi_fu_582_p6[0:0] === 1'b1) ? 9'd0 : ap_phi_mux_i_phi_fu_611_p6);

assign in_image_0_V_address1 = tmp_5_cast_fu_730_p1;

assign in_image_1_V_address1 = tmp_6_cast_fu_743_p1;

assign in_image_2_V_address1 = tmp_5_cast_fu_730_p1;

assign indvar_flatten_next_fu_781_p2 = (10'd1 + ap_phi_mux_indvar_flatten_phi_fu_653_p6);

assign k_2_fu_675_p2 = (3'd1 + ap_phi_mux_k_phi_fu_625_p6);

assign k_mid2_fu_697_p3 = ((ap_phi_mux_tmp_22_phi_fu_582_p6[0:0] === 1'b1) ? k_2_fu_675_p2 : ap_phi_mux_k_phi_fu_625_p6);

assign kernel_0_V_address0 = tmp_19_fu_705_p1;

assign kernel_1_V_address0 = tmp_19_reg_1150;

assign kernel_2_V_address0 = tmp_19_reg_1150;

assign kernel_3_V_address0 = tmp_19_reg_1150;

assign kernel_4_V_address0 = tmp_19_fu_705_p1;

assign kernel_5_V_address0 = tmp_19_fu_705_p1;

assign kernel_6_V_address0 = tmp_19_fu_705_p1;

assign kernel_7_V_address0 = tmp_19_fu_705_p1;

assign kernel_8_V_address0 = tmp_19_reg_1150;

assign out_image_0_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_0_V_d0 = tmp_78_8_reg_1527;

assign out_image_10_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_10_V_d0 = tmp_78_8_reg_1527;

assign out_image_11_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_11_V_d0 = tmp_78_8_reg_1527;

assign out_image_12_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_12_V_d0 = tmp_78_8_reg_1527;

assign out_image_13_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_13_V_d0 = tmp_78_8_reg_1527;

assign out_image_1_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_1_V_d0 = tmp_78_8_reg_1527;

assign out_image_2_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_2_V_d0 = tmp_78_8_reg_1527;

assign out_image_3_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_3_V_d0 = tmp_78_8_reg_1527;

assign out_image_4_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_4_V_d0 = tmp_78_8_reg_1527;

assign out_image_5_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_5_V_d0 = tmp_78_8_reg_1527;

assign out_image_6_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_6_V_d0 = tmp_78_8_reg_1527;

assign out_image_7_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_7_V_d0 = tmp_78_8_reg_1527;

assign out_image_8_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_8_V_d0 = tmp_78_8_reg_1527;

assign out_image_9_V_address0 = tmp_7_cast_fu_1059_p1;

assign out_image_9_V_d0 = tmp_78_8_reg_1527;

assign p_8_fu_811_p3 = ((tmp_79_8_fu_793_p2[0:0] === 1'b1) ? 32'd0 : y_4_8_fu_787_p2);

assign p_Val2_10_8_fu_1027_p2 = (tmp4_reg_1522 + tmp1_fu_1023_p2);

assign p_Val2_13_8_fu_1043_p2 = ($signed(tmp_75_8_fu_1032_p3) + $signed(tmp_76_8_cast_fu_1040_p1));

assign p_shl1_cast_fu_850_p1 = tmp_3_fu_843_p3;

assign p_x_1_8_fu_804_p3 = ((tmp_79_8_fu_793_p2[0:0] === 1'b1) ? x_4_8_fu_799_p2 : x_mid2_reg_1137);

assign tmp1_fu_1023_p2 = (tmp3_reg_1512 + tmp2_reg_1507);

assign tmp2_fu_974_p2 = (tmp_21_fu_925_p3 + tmp_70_1_fu_932_p3);

assign tmp3_fu_980_p2 = (tmp_70_2_fu_939_p3 + tmp_70_3_fu_946_p3);

assign tmp4_fu_1018_p2 = (tmp6_reg_1517 + tmp5_fu_1012_p2);

assign tmp5_fu_1012_p2 = (tmp_70_4_fu_998_p3 + tmp_70_5_fu_1005_p3);

assign tmp6_fu_992_p2 = (tmp7_fu_986_p2 + tmp_70_6_fu_953_p3);

assign tmp7_fu_986_p2 = (tmp_70_7_fu_960_p3 + tmp_70_8_fu_967_p3);

assign tmp_10_fu_752_p1 = x_mid2_fu_689_p3[3:0];

assign tmp_19_fu_705_p1 = k_mid2_fu_697_p3;

assign tmp_20_cast_fu_720_p1 = i_mid2_fu_681_p3;

assign tmp_20_fu_714_p1 = i_mid2_fu_681_p3;

assign tmp_21_fu_925_p3 = {{p_Val2_9_reg_1422}, {7'd0}};

assign tmp_3_fu_843_p3 = {{k_mid2_reg_1143}, {1'd0}};

assign tmp_4_fu_854_p2 = (tmp_fu_836_p3 - p_shl1_cast_fu_850_p1);

assign tmp_5_cast_fu_730_p1 = tmp_5_fu_724_p2;

assign tmp_5_fu_724_p2 = (10'd196 + tmp_20_cast_fu_720_p1);

assign tmp_6_cast_fu_743_p1 = tmp_6_fu_737_p2;

assign tmp_6_fu_737_p2 = (10'd392 + tmp_20_cast_fu_720_p1);

assign tmp_70_1_fu_932_p3 = {{p_Val2_9_1_reg_1487}, {7'd0}};

assign tmp_70_2_fu_939_p3 = {{p_Val2_9_2_reg_1492}, {7'd0}};

assign tmp_70_3_fu_946_p3 = {{p_Val2_9_3_reg_1497}, {7'd0}};

assign tmp_70_4_fu_998_p3 = {{p_Val2_9_4_reg_1457_pp0_iter2_reg}, {7'd0}};

assign tmp_70_5_fu_1005_p3 = {{p_Val2_9_5_reg_1462_pp0_iter2_reg}, {7'd0}};

assign tmp_70_6_fu_953_p3 = {{p_Val2_9_6_reg_1467}, {7'd0}};

assign tmp_70_7_fu_960_p3 = {{p_Val2_9_7_reg_1472}, {7'd0}};

assign tmp_70_8_fu_967_p3 = {{p_Val2_9_8_reg_1502}, {7'd0}};

assign tmp_75_8_fu_1032_p3 = {{p_Val2_10_8_fu_1027_p2}, {2'd0}};

assign tmp_76_8_cast_fu_1040_p1 = $signed(tmp_12_reg_1313_pp0_iter2_reg);

assign tmp_79_8_fu_793_p2 = ((y_4_8_fu_787_p2 == 32'd14) ? 1'b1 : 1'b0);

assign tmp_7_cast_fu_1059_p1 = $signed(tmp_7_reg_1417_pp0_iter3_reg);

assign tmp_7_fu_893_p2 = (tmp_8_reg_1308 + tmp_4_fu_854_p2);

assign tmp_8_fu_764_p1 = y_mid2_fu_756_p3[6:0];

assign tmp_9_fu_748_p1 = k_mid2_fu_697_p3[1:0];

assign tmp_fu_836_p3 = {{k_mid2_reg_1143}, {4'd0}};

assign tmp_s_fu_824_p2 = ((i_5_fu_819_p2 == 9'd256) ? 1'b1 : 1'b0);

assign x_4_8_fu_799_p2 = (x_mid2_reg_1137 + 32'd1);

assign x_mid2_fu_689_p3 = ((ap_phi_mux_tmp_22_phi_fu_582_p6[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_x_phi_fu_597_p6);

assign y_4_8_fu_787_p2 = (y_mid2_fu_756_p3 + 32'd1);

assign y_mid2_fu_756_p3 = ((tmp_22_reg_578[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_y_phi_fu_639_p6);

always @ (posedge ap_clk) begin
    tmp_19_reg_1150[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_20_reg_1158[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    tmp_6_cast_reg_1173[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    tmp2_reg_1507[6:0] <= 7'b0000000;
    tmp3_reg_1512[6:0] <= 7'b0000000;
    tmp6_reg_1517[6:0] <= 7'b0000000;
    tmp4_reg_1522[6:0] <= 7'b0000000;
end

endmodule //conv2d_3x3_4chan_rev
